package com.golead.art.app;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.sf.json.JSONArray;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.golead.art.app.service.DataUploadService;
import com.golead.art.app.service.QueryService;
import com.golead.common.service.system.SysUserService;
import com.golead.core.web.action.BaseAction;

public class DataAction extends BaseAction {

   private final Log log = LogFactory.getLog(DataAction.class);
   private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
   
   public String doExecute() throws Exception {
      String forward = "";
      String action = form.getAction();
      
      if (log.isDebugEnabled()) log.debug("action:" + action);
      try {
         if (action.equalsIgnoreCase("upLoadFile")) forward = upload();//上传图片
         else if (action.equalsIgnoreCase("query")) forward = queryData();//查询数据
         else if (action.equalsIgnoreCase("modifyPsw")) forward = modifyUserPsw();//修改密码
         else {
            setResponse("{\"exit\":\"1\",\"message\":\"找不到该action方法:" + action + "\"}");
         }
      }
      catch (Exception e) {// 其他系统出错
         e.printStackTrace();
         setResponse("{\"exit\":\"1\",\"message\":\"服务器错误\"}");
      }
      return forward;
   }

   private String queryData() throws Exception {
      if (log.isDebugEnabled()) log.debug("Entering queryData method");
      try {
         if (parameters == null) parameters = form.getQuery().getParameters();
         String res = queryService.query(parameters);
         setResponse("{\"exit\":\"0\",\"data\":" + res + "}");
      }
      catch (Exception e) {
         e.printStackTrace();
         setResponse("{\"exit\":\"1\",\"message\":\"数据访问错误。\"}");
      }
      return null;

   }

   private String upload() throws Exception {
      String userId = currentUser.getUserId();
      Map<String, String> record = form.getRecord();
      record.put("currentUserId", userId);
      record.put("currentUserName", currentUser.getUserName());
      record.put("fileName", photoFileName);
      try {
         
         setResponse("{\"exit\":\"0\",\"message\":\"图片上传成功。\"}");
      }
      catch (Exception e) {
         e.printStackTrace();
         setResponse("{\"exit\":\"1\",\"message\":\"文件上传失败。\"}");
      }
      return null;
   }
   
  
   
   private String modifyUserPsw() throws Exception {
      if (log.isDebugEnabled()) log.debug("Entering modifyUserPsw method");
      try {
         if (parameters == null) parameters = form.getQuery().getParameters();
         String data = parameters.get("data");
         JSONArray jsonArray = JSONArray.fromObject(data);
         List<Map<String, String>> list = (List<Map<String, String>>) JSONArray.toCollection(jsonArray, HashMap.class);
         for (Map<String, String> map : list) {
            Integer id = new Integer(map.get("id"));
            String oldPwd = map.get("oldPwd");
            String pwd = map.get("pwd");
            sysUserService.saveMyPwd(id, oldPwd, pwd);
         }
         setResponse("{\"exit\":\"0\",\"message\":\"修改密码成功。\"}");
      }
      catch (Exception e) {
         e.printStackTrace();
         setResponse("{\"exit\":\"1\",\"message\":\"旧密码不对，不能修改密码。\"}");
      }
      return null;
   }
   
  
   
   protected Map<String, String> parameters;

   private String                query;

   @Resource
   private QueryService          queryService;

   @Resource
   private DataUploadService     dataUploadService;
   
   @Resource
   private SysUserService        sysUserService;

   private File                  photo;

   private String                photoFileName;

   public File getFile() {
      return photo;
   }

   public void setFile(File file) {
      this.photo = file;
   }

   public String getFileFileName() {
      return photoFileName;
   }

   public void setFileFileName(String fileFileName) {
      this.photoFileName = fileFileName;
   }

   public String getQuery() {
      return query;
   }

   public void setQuery(String query) {
      this.query = query;
   }

   public Map<String, String> getParameters() {
      return parameters;
   }

   public void setParameters(Map<String, String> parameters) {
      this.parameters = parameters;
   }

}
