package com.golead.art.works.service.impl;

import java.io.File;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;
import com.golead.art.utils.FileUtils;
import com.golead.art.works.dao.ArtWorksCaseDao;
import com.golead.art.works.model.ArtWorksCase;
import com.golead.art.works.service.ArtWorksCaseService;
import com.sun.org.apache.bcel.internal.generic.NEW;

import javax.annotation.Resource; 

import org.hibernate.mapping.Array;
import org.springframework.stereotype.Service;

@Service
public class ArtWorksCaseServiceImpl extends BaseServiceImpl implements ArtWorksCaseService {
	private static final long serialVersionUID = 1L;

	public ArtWorksCase getArtWorksCase(Serializable id) throws ServiceException {
		try {
			return artWorksCaseDao.get(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void createArtWorksCase(ArtWorksCase artWorksCase, List<File> files, String fileNames, String path) throws ServiceException {
		try {
		   StringBuffer fileName = new StringBuffer();
		   String[] names = fileNames.split(",");
         if (files != null) {
            for (int i = 0; i < files.size(); i++) {
               File file = files.get(i);
               String cName = String.valueOf(System.currentTimeMillis());
               String[] endless = names[i].split("\\.");
               FileUtils.fileUpload(path + File.separator + cName + "." + endless[endless.length -1], file);
               fileName.append(names[i] + "/" + cName + "." + endless[endless.length -1]);
               if ((i + 1) != files.size()) fileName.append(",");
            }
         }
         artWorksCase.setAttachment(fileName.toString());
			artWorksCaseDao.save(artWorksCase);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void updateArtWorksCase(Map<String, String> artWorksCaseMap, List<File> files, String fileNames, String addFileName, String path) throws ServiceException {
		try {
         Integer pkId = new Integer(artWorksCaseMap.get(ArtWorksCase.PROP_ID));
			ArtWorksCase tmp = artWorksCaseDao.get(pkId);
			StringBuffer fileName = new StringBuffer();
			
			String[] attachments = tmp.getAttachment().split(",");
         String[] names = addFileName.split(",");//新增加的附件
         String[] saveNames = fileNames.split(",");//剩下的附件
         Map<String, String> fileManagerMap = new HashMap<String, String>();
         for(String attachment : attachments){
            for(String saveName : saveNames){
               if(saveName.equals(attachment.split("/")[1])){
                  fileManagerMap.put(attachment.split("/")[1], "true");
               }
            }
         }
         File[] fileList = new File(path).listFiles();
         if(fileList!=null){
            for(File file : fileList){
               if(fileManagerMap.get(file.getName()) == null){
                  file.delete();
               }
            }
         }
         for(String attachment : attachments){
            if(fileManagerMap.get(attachment.split("/")[1]) != null){
               fileName.append(attachment + ",");
            }
         }
         
         if (files != null) {
            String[] addnames = names;
            for (int i = 0; i < files.size(); i++) {
               File file = files.get(i);
               String cName = String.valueOf(System.currentTimeMillis());
               String[] endless = addnames[i].split("\\.");
               File fFile = new File(path);
               if(!fFile.exists()){
                  fFile.mkdirs();
               }
               FileUtils.fileUpload(path + File.separator + cName + "." + endless[endless.length -1], file);
               if(!"".equals(fileName.toString())){
                  if(!fileName.toString().endsWith(",")){
                     fileName.append(",");
                  }
               }
               fileName.append(addnames[i] + "/" + cName + "." + endless[endless.length -1]);
            }
         }
         tmp.setAttachment(fileName.toString());
			ConvertUtil.mapToObject(tmp, artWorksCaseMap, true);			
			artWorksCaseDao.update(tmp);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtWorksCase(Serializable id) throws ServiceException {
		try {
			artWorksCaseDao.delete(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtWorksCases(Serializable[] ids, String path) throws ServiceException {
		try {
		   List<String> fileNames = new ArrayList<String>();
		   for(Serializable id : ids){
		      ArtWorksCase artWorksCase = getArtWorksCase(id);
		      String[] attachments = artWorksCase.getAttachment().split(",");
		      for(String attachment : attachments){
		         fileNames.add(attachment.split("/")[1]);
		      }
		   }
		   File[] fileLies = new File(path).listFiles();
		   if(fileLies != null){
		      for(File file : fileLies){
		         for(String fileName : fileNames){
		            if(fileName.equals(file.getName())){
		               file.delete();
		            }
		         }
		      }
		      fileLies = new File(path).listFiles();
		      if(fileLies.length == 0 ){
		         File file = new File(path);
		         file.delete();
		      }
		   }
			artWorksCaseDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public PageQuery queryArtWorksCase(PageQuery pageQuery) throws ServiceException {
		try {
		  createSqlFilter(pageQuery);
          return jdbcDao.queryBySqlId("artWorksCaseList", pageQuery);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private void createSqlFilter(PageQuery page) {
	   String paras = " 1=1 ";
      Map<String, String> map = page.getParameters();
      
      String worksId = map.get("id");
      if (worksId != null && worksId.trim().length() > 0) {
         paras += " AND works.id =" + worksId.trim();
      }
      
      if (paras.length() > 0) page.getParameters().put("paras", paras);
	}
	
	public void deleteArtWorksCases(Serializable[] ids) throws ServiceException{
	   try {
         artWorksCaseDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
    @Resource
	private ArtWorksCaseDao	artWorksCaseDao;

	public void setArtWorksCaseDao(ArtWorksCaseDao artWorksCaseDao) {
		this.artWorksCaseDao = artWorksCaseDao;
	}
}

