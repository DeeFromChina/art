package com.golead.art.works.service.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;

import com.golead.art.works.dao.ArtWorksIncludeDao;
import com.golead.art.works.model.ArtWorksInclude;
import com.golead.art.works.service.ArtWorksIncludeService;
import javax.annotation.Resource; 
import org.springframework.stereotype.Service;

@Service
public class ArtWorksIncludeServiceImpl extends BaseServiceImpl implements ArtWorksIncludeService {
	private static final long serialVersionUID = 1L;

	public ArtWorksInclude getArtWorksInclude(Serializable id) throws ServiceException {
		try {
			return artWorksIncludeDao.get(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void createArtWorksInclude(ArtWorksInclude artWorksInclude) throws ServiceException {
		try {
			artWorksIncludeDao.save(artWorksInclude);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void updateArtWorksInclude(Map<String, String> artWorksIncludeMap) throws ServiceException {
		try {
            Integer pkId = new Integer(artWorksIncludeMap.get(ArtWorksInclude.PROP_ID));
			ArtWorksInclude tmp = artWorksIncludeDao.get(pkId);
			ConvertUtil.mapToObject(tmp, artWorksIncludeMap, true);			
			artWorksIncludeDao.update(tmp);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtWorksInclude(Serializable id) throws ServiceException {
		try {
			artWorksIncludeDao.delete(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtWorksIncludes(Serializable[] ids) throws ServiceException {
		try {
			artWorksIncludeDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public PageQuery queryArtWorksInclude(PageQuery pageQuery) throws ServiceException {
		try {
		  createSqlFilter(pageQuery);
          return jdbcDao.queryBySqlId("artWorksIncludeList", pageQuery);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private void createSqlFilter(PageQuery page) {
	}
	
    @Resource
	private ArtWorksIncludeDao	artWorksIncludeDao;

	public void setArtWorksIncludeDao(ArtWorksIncludeDao artWorksIncludeDao) {
		this.artWorksIncludeDao = artWorksIncludeDao;
	}
}

