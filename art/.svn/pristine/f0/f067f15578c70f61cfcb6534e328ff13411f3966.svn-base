package com.golead.art.auction;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.StrutsStatics;

import com.golead.art.auction.model.ArtAuction;
import com.golead.art.auction.model.ArtAuctionHouses;
import com.golead.art.auction.service.ArtAuctionHousesService;
import com.golead.art.auction.service.ArtAuctionService;
import com.golead.art.utils.PrintExcel;
import com.golead.art.utils.PrintPoint;
import com.golead.art.works.model.ArtWorks;
import com.golead.art.works.service.ArtWorksService;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.util.ConvertUtil;
import com.golead.core.web.action.BaseAction;

public class ArtAuctionAction extends BaseAction {

   private Log                     log           = LogFactory.getLog(ArtAuctionAction.class);

   private SimpleDateFormat        dateFormate   = new SimpleDateFormat("yyyy-MM-dd");

   private DecimalFormat           decimalFormat = new DecimalFormat("#,###,###,##0.00");

   @Resource
   private ArtAuctionService       artAuctionService;

   @Resource
   private ArtAuctionHousesService artAuctionHousesService;

   @Resource
   private ArtWorksService         artWorksService;

   @Override
   public String doExecute() throws Exception {
      String forward = "";
      String action = getForm().getAction();
      if (action == null) action = LIST;
      if (log.isDebugEnabled()) log.debug("action" + action);
      try {
         if (LIST.equalsIgnoreCase(action)) forward = LIST;
         else if (PAGE.equalsIgnoreCase(action)) forward = pageAuction();
         else if (ADD.equalsIgnoreCase(action)) forward = addAuction();
         else if (SAVE.equalsIgnoreCase(action)) forward = saveAuction();
         else if (EDIT.equalsIgnoreCase(action)) forward = editAuction();
         else if (UPDATE.equalsIgnoreCase(action)) forward = updateAuction();
         else if (DELETE.equalsIgnoreCase(action)) forward = deleteAuction();
         else if (VIEW.equalsIgnoreCase(action)) forward = viewAuction();
      }
      catch (Exception e) {
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         forward = ERROR;
      }
      return forward;
   }

   public String pageAuction() throws Exception {
      if (log.isDebugEnabled()) log.debug("Entering 'pageAuction' method");
      try {
         initForm();
         PageQuery pq = getForm().getQuery();
         pq = artAuctionService.queryArtAuction(pq);
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
         for (Map<String, Object> item : pq.getRecordSet()) {
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("id", item.get("id"));
            String link = "^javascript:view(" + item.get("id") + ");^_self";

            String cTranPrice = item.get("cTranPrice") == null ? "" : decimalFormat.format(item.get("cTranPrice"));
            String cLowestPrice = item.get("cLowestPrice") == null ? "" : decimalFormat.format(item.get("cLowestPrice"));
            String cHighestPrice = item.get("cHighestPrice") == null ? "" : decimalFormat.format(item.get("cHighestPrice"));
            String imageUrl = item.get("imageUrl") == null ? "" : item.get("imageUrl").toString();
            if (!imageUrl.equals("")) {
               imageUrl = request.get("CONTEXT_PATH") + "/upload/auction/" + File.separator + "thumbnail" + File.separator + imageUrl;
            }
            String autionSeason = findCodeName(getForm(), "AUCTION_SEASON", item.get("autionSeason") + "");
            map.put(
                  "data",
                  new Object[] { "", item.get("auctionNo"), item.get("worksCName") + link, item.get("cName"), item.get("sizeCm"), item.get("createYear"),
                        item.get("auctionHouse"), item.get("auction"), item.get("saleName"), formateDate(item.get("auctionTime")), item.get("auctionDesc"),
                        item.get("worksSource"), item.get("worksCategory"), cTranPrice, cHighestPrice, cLowestPrice, autionSeason, item.get("auctionIdentity") });
            list.add(map);
         }
         String res = genGridJson(pq, list);
         setResponse(res);
      }
      catch (ServiceException e) {
         setResponse("{exit:1,message:\"" + e.getMessage() + "\"}");
      }
      catch (Exception e) {
         e.printStackTrace();
         setResponse("{exit:1,message:\"数据访问错误。\"}");
      }
      return null;
   }

   public String addAuction() throws Exception {
      if (log.isDebugEnabled()) log.debug("Entering 'addAuction' method");
      try {
         initForm();
         return ADD;
      }
      catch (Exception e) {
         e.printStackTrace();
         return ERROR;
      }
   }

   public String saveAuction() throws Exception {
      if (log.isDebugEnabled()) log.debug("Entering 'saveAuction' method");
      try {
         ArtAuction artAuction = new ArtAuction();
         ConvertUtil.mapToObject(artAuction, getForm().getRecord(), false);
         artAuction.setAuctionTime(dateFormate.parse(getForm().getRecord().get("auctionTime")));
         artAuction.setWorksId(Integer.valueOf(getForm().getRecord().get("worksId")));
         artAuction.setAuctionHousesId(Integer.valueOf(getForm().getRecord().get("housesId")));
         artAuctionService.createArtAuction(artAuction);
         getForm().getRecord().put("id", artAuction.getId().toString());
         return editAuction();
      }
      catch (Exception e) {
         addMessage(getForm(), e.getMessage());
         initForm();
         return ADD;
      }
   }

   public String editAuction() throws Exception {
      if (log.isDebugEnabled()) log.debug("Entering 'editAuction' method");
      try {
         initForm();
         int id = Integer.valueOf(ids);
         ArtAuction artAuction = artAuctionService.getArtAuction(id);
         ConvertUtil.objectToMap(form.getRecord(), artAuction);
         setPriceToMap(artAuction);
         Integer worksId = artAuction.getWorksId();
         if (worksId != null) {
            ArtWorks artWorks = artWorksService.getArtWorks(worksId);
            if (artWorks != null) {
               form.getRecord().put("worksName", artWorks.getWorksCName());
            }
         }
         Integer auctionHousesId = artAuction.getAuctionHousesId();
         if (auctionHousesId != null) {
            ArtAuctionHouses artAuctionHouses = artAuctionHousesService.getArtAuctionHouses(auctionHousesId);
            if (artAuctionHouses != null) {
               form.getRecord().put("housesName", artAuctionHouses.getAuctionHouse());
            }
         }
         return EDIT;
      }
      catch (Exception e) {
         e.printStackTrace();
         return ERROR;
      }
   }

   private void setPriceToMap(ArtAuction artAuction) {
      form.getRecord().put("cTranPrice", artAuction.getCtranPrice() == null ? null : artAuction.getCtranPrice() + "");
      form.getRecord().put("cTradePrice", artAuction.getCtradePrice() == null ? null : artAuction.getCtradePrice() + "");
      form.getRecord().put("cHighestPrice", artAuction.getChighestPrice() == null ? null : artAuction.getChighestPrice() + "");
      form.getRecord().put("cLowestPrice", artAuction.getClowestPrice() == null ? null : artAuction.getClowestPrice() + "");

      form.getRecord().put("eTranPrice", artAuction.getEtranPrice() == null ? null : artAuction.getEtranPrice() + "");
      form.getRecord().put("eTradePrice", artAuction.getEtradePrice() == null ? null : artAuction.getEtradePrice() + "");
      form.getRecord().put("eHighestPrice", artAuction.getEhighestPrice() == null ? null : artAuction.getEhighestPrice() + "");
      form.getRecord().put("eLowestPrice", artAuction.getElowestPrice() == null ? null : artAuction.getElowestPrice() + "");

      form.getRecord().put("dTranPrice", artAuction.getDtranPrice() == null ? null : artAuction.getDtranPrice() + "");
      form.getRecord().put("dTradePrice", artAuction.getDtradePrice() == null ? null : artAuction.getDtradePrice() + "");
      form.getRecord().put("dHighestPrice", artAuction.getDhighestPrice() == null ? null : artAuction.getDhighestPrice() + "");
      form.getRecord().put("dLowestPrice", artAuction.getDlowestPrice() == null ? null : artAuction.getDlowestPrice() + "");

      form.getRecord().put("pTranPrice", artAuction.getPtranPrice() == null ? null : artAuction.getPtranPrice() + "");
      form.getRecord().put("pTradePrice", artAuction.getPtradePrice() == null ? null : artAuction.getPtradePrice() + "");
      form.getRecord().put("pHighestPrice", artAuction.getPhighestPrice() == null ? null : artAuction.getPhighestPrice() + "");
      form.getRecord().put("pLowestPrice", artAuction.getPlowestPrice() == null ? null : artAuction.getPlowestPrice() + "");

   }

   public String updateAuction() throws Exception {
      if (log.isDebugEnabled()) log.debug("Entering 'updateAuction' method");
      try {
         getForm().getRecord().put("worksId", getForm().getRecord().get("worksId"));
         getForm().getRecord().put("auctionHousesId", getForm().getRecord().get("housesId"));
         artAuctionService.updateArtAuction(getForm().getRecord());
         return returnForward(RETURN_NORMAL);
      }
      catch (Exception e) {
         e.printStackTrace();
         return EDIT;
      }
   }

   public String deleteAuction() throws Exception {
      if (log.isDebugEnabled()) log.debug("Entering 'deleteAuction' method");
      try {
         String[] id = ids.split(",");
         Integer[] del_ids = new Integer[id.length];
         for (int i = 0; i < del_ids.length; i++) {
            del_ids[i] = Integer.valueOf(id[i]);
         }
         artAuctionService.deleteArtAuctions(del_ids);
         setResponse("{exit:0}");
      }
      catch (ServiceException e) {
         setResponse("{exit:1,message:\"" + e.getMessage() + "\"}");
      }
      catch (Exception e) {
         setResponse("{exit:1,message:\"删除操作失败!\"}");
      }
      return null;

   }

   public String viewAuction() throws Exception {
      if (log.isDebugEnabled()) log.debug("Entering 'viewAuction' method");
      try {
         initForm();
         ArtAuction artAuction = artAuctionService.getArtAuction(Integer.valueOf(ids));
         ConvertUtil.objectToMap(getForm().getRecord(), artAuction);
         Integer worksId = artAuction.getWorksId();
         if (worksId != null) {
            ArtWorks artWorks = artWorksService.getArtWorks(worksId);
            if (artWorks != null) {
               form.getRecord().put("worksName", artWorks.getWorksCName());
            }
         }
         Integer auctionHousesId = artAuction.getAuctionHousesId();
         if (auctionHousesId != null) {
            ArtAuctionHouses artAuctionHouses = artAuctionHousesService.getArtAuctionHouses(auctionHousesId);
            if (artAuctionHouses != null) {
               form.getRecord().put("housesName", artAuctionHouses.getAuctionHouse());
            }
         }
         return VIEW;
      }
      catch (Exception e) {
         e.printStackTrace();
         return ERROR;
      }
   }

   public String downloadTemplate() throws Exception {
      if (log.isDebugEnabled()) log.debug("Entering 'downloadTemplate' method");
      try {
         HttpServletResponse response = (HttpServletResponse) ctx.get(StrutsStatics.HTTP_RESPONSE);
         response.setContentType("APPLICATION/DOWNLOAD");
         response.setContentType("application/octed-stream,charset=gb2312");
         response.setHeader("Content-Disposition", "attachment;filename=" + new String("作品拍卖导入模板.xls".getBytes("gb2312"), "ISO-8859-1"));
         String templatePath = ServletActionContext.getServletContext().getRealPath("/template/works/art_works_auction.xls");
         File templateFile = new File(templatePath);
         PrintExcel printExcel = new PrintExcel();
         InputStream inputStream = new FileInputStream(templateFile);
         HSSFWorkbook hssfWorkbook = null;
         POIFSFileSystem poifsFileSystem = new POIFSFileSystem(inputStream);
         hssfWorkbook = new HSSFWorkbook(poifsFileSystem);

         HSSFDataFormat format = hssfWorkbook.createDataFormat();

         HSSFCellStyle csString = hssfWorkbook.createCellStyle();
         csString.setBorderLeft(CellStyle.BORDER_THIN);
         csString.setBorderRight(CellStyle.BORDER_THIN);
         csString.setBorderTop(CellStyle.BORDER_THIN);
         csString.setBorderBottom(CellStyle.BORDER_THIN);
         csString.setAlignment(HSSFCellStyle.ALIGN_CENTER);
         csString.setDataFormat(format.getFormat("@"));

         HSSFCellStyle csDecimal = hssfWorkbook.createCellStyle();
         csDecimal.setBorderLeft(CellStyle.BORDER_THIN);
         csDecimal.setBorderRight(CellStyle.BORDER_THIN);
         csDecimal.setBorderTop(CellStyle.BORDER_THIN);
         csDecimal.setBorderBottom(CellStyle.BORDER_THIN);
         csDecimal.setDataFormat(HSSFDataFormat.getBuiltinFormat("0.00"));

         HSSFCellStyle csDecimal1 = hssfWorkbook.createCellStyle();
         csDecimal1.setBorderLeft(CellStyle.BORDER_THIN);
         csDecimal1.setBorderRight(CellStyle.BORDER_THIN);
         csDecimal1.setBorderTop(CellStyle.BORDER_THIN);
         csDecimal1.setBorderBottom(CellStyle.BORDER_THIN);
         HSSFDataFormat csformat = hssfWorkbook.createDataFormat();
         csDecimal1.setDataFormat(csformat.getFormat("0.000"));

         List<PrintPoint> printPoints = new ArrayList<PrintPoint>();

         printExcel.setPrintPointList(printPoints);// 填写数据
         printExcel.doFillSheet(hssfWorkbook, 0);// 写入workbook的第一页
         printExcel.doPrint(response, templateFile, hssfWorkbook);// workbook输出到response中。
      }
      catch (Exception e) {
         e.printStackTrace();
      }
      return null;
   }

   public void initForm() throws Exception {
      setCode(getForm(), "AUCTION_SEASON");
   }

   private String formateDate(Object obj) {
      if (obj == null) return "";
      return dateFormate.format(obj);
   }

}
