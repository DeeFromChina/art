package com.golead.art.literature.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.Serializable;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;
import com.golead.art.literature.dao.ArtLiteratureCollectDao;
import com.golead.art.literature.model.ArtLiteratureCollect;
import com.golead.art.literature.service.ArtLiteratureCollectService;
import com.golead.art.utils.FileUtils;

import javax.annotation.Resource; 

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.struts2.ServletActionContext;
import org.springframework.stereotype.Service;

@Service
public class ArtLiteratureCollectServiceImpl extends BaseServiceImpl implements ArtLiteratureCollectService {
	private static final long serialVersionUID = 1L;

	public ArtLiteratureCollect getArtLiteratureCollect(Serializable id) throws ServiceException {
		try {
			return artLiteratureCollectDao.get(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void createArtLiteratureCollect(ArtLiteratureCollect artLiteratureCollect, List<File> files, String filesFileName) throws ServiceException {
		try {
			StringBuffer attachment = new StringBuffer();
			String[] attachmentNames = filesFileName.split(",");
			if (files != null) {
				for (int i = 0; i < files.size(); i++) {
					String newName = String.valueOf(System.currentTimeMillis());
					String endLess = attachmentNames[i].split("\\.")[1];
					attachment.append(newName + "." + endLess);
					if (i + 1 != files.size()) {
						attachment.append(";");
					}
				}
			}
			artLiteratureCollect.setAttachment(attachment.toString());
			artLiteratureCollectDao.save(artLiteratureCollect);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void updateArtLiteratureCollect(Map<String, String> artLiteratureCollectMap, List<File> files, String oldFileName, String filesFileName, String path) throws ServiceException {
		try {
            Integer pkId = new Integer(artLiteratureCollectMap.get(ArtLiteratureCollect.PROP_ID));
			ArtLiteratureCollect tmp = artLiteratureCollectDao.get(pkId);
			ConvertUtil.mapToObject(tmp, artLiteratureCollectMap, true);
			StringBuffer newAttachment = new StringBuffer();
			String attachment;//数据库附件值
			String[] deleteAttachments;//界面删除的附件
			if (!"".equals(tmp.getAttachment()) && tmp.getAttachment() != null) {
				attachment = tmp.getAttachment();
				deleteAttachments = attachment.replace(oldFileName, "").split(";");
				File file = new File(path);
				File[] fileList = new File(path).listFiles();
				if(fileList != null){
					for(File inFile : fileList){
						for (String deleteAttachment : deleteAttachments) {
							if (deleteAttachment.equals(inFile.getName())) {
								inFile.delete();
							}
						}
					}
					File[] fileList2 = new File(path).listFiles();
					if (fileList2.length == 0) {
						file.delete();
					}
				}
				if (oldFileName.length() > 0) {
					newAttachment.append(oldFileName + ";");
				}
			}
			
			if (files != null) {
				String[] fileNames = filesFileName.split(",");
				for (int i = 0; i < files.size(); i++) {
					File file = files.get(i);
					String newName = String.valueOf(System.currentTimeMillis());
					String endLess = fileNames[i].split("\\.")[1];
					FileUtils.fileUpload(path + File.separator + newName + "." + endLess, file);
					newAttachment.append(newName + "." + endLess);
					if (i + 1 != files.size()) {
						newAttachment.append(";");
					}
				}
			}
			
			tmp.setAttachment(newAttachment.toString());
			artLiteratureCollectDao.update(tmp);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtLiteratureCollect(Serializable id) throws ServiceException {
		try {
			artLiteratureCollectDao.delete(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtLiteratureCollects(Serializable[] ids) throws ServiceException {
		try {
			String FILE_PATH = ServletActionContext.getServletContext().getRealPath("");
			for (Serializable id : ids) {
				String path = FILE_PATH + File.separator + "upload" + File.separator + "literature" + File.separator + "collect" + File.separator + id.toString();
				File file = new File(path);
				if (file.exists()) {
					File[] files = file.listFiles();
					for (File childFile : files) {
						if (childFile.isFile()) {
							childFile.delete();
						}
					}
					File[] files2 = file.listFiles();
					if (files2.length == 0) {
						file.delete();
					}
				}
			}
			artLiteratureCollectDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	public String importCollect(String path) throws ServiceException {
		String message = "";
		try {
			FileInputStream fileInputStream = new FileInputStream(path);
			HSSFWorkbook wb = new HSSFWorkbook(fileInputStream);
			HSSFSheet sht = wb.getSheetAt(0);
			if (sht != null) {
				for (int rowNum = 2; rowNum < sht.getLastRowNum(); rowNum++) {
					HSSFRow hssfRow = sht.getRow(rowNum);
					if(hssfRow == null) continue;
					if (hssfRow.getCell(0) == null) {
						message = "成功操作到第" + String.valueOf(rowNum) + "行";
						break;
					}
					if(("").equals(getValue(hssfRow.getCell(0)))) {
						message = "成功操作到第" + String.valueOf(rowNum) + "行";
						break;
					}
					ArtLiteratureCollect artLiteratureCollect = new ArtLiteratureCollect();
					String str = "";
					Date time = null;
					int thisRowNum = rowNum + 1;
					str = getValue(hssfRow.getCell(0));
					if ("".equals(str)) {
						message = "第" + String.valueOf(thisRowNum) + "行找不到机构或人名";
						break;
					}
					if (str.length() > 64) {
						message = "第" + String.valueOf(thisRowNum) + "行机构或人名过长";
						break;
					}
					artLiteratureCollect.setCollectName(str);
					time = hssfRow.getCell(1).getDateCellValue();
					if ("".equals(str)) {
						message = "第" + String.valueOf(thisRowNum) + "行时间找不到";
						break;
					}
					artLiteratureCollect.setCollectTime(time);
					str = getValue(hssfRow.getCell(2));
					if ("".equals(str)) {
						message = "第" + String.valueOf(thisRowNum) + "行找不到城市";
						break;
					}
					if (str.length() > 30) {
						message = "第" + String.valueOf(thisRowNum) + "行城市过长";
						break;
					}
					artLiteratureCollect.setCity(str);
					str = getValue(hssfRow.getCell(3));
					if ("".equals(str)) {
						message = "第" + String.valueOf(thisRowNum) + "行找不到省份";
						break;
					}
					if (str.length() > 30) {
						message = "第" + String.valueOf(thisRowNum) + "行省份过长";
						break;
					}
					artLiteratureCollect.setProvince(str);
					str = getValue(hssfRow.getCell(4));
					if ("".equals(str)) {
						message = "第" + String.valueOf(thisRowNum) + "行找不到国家";
						break;
					}
					if (str.length() > 30) {
						message = "第" + String.valueOf(thisRowNum) + "行国家过长";
						break;
					}
					artLiteratureCollect.setCountry(str);
					artLiteratureCollectDao.save(artLiteratureCollect);
				}
			}
			fileInputStream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		File file = new File(path);
		if(file.exists() && file.isFile()){
			file.delete();
		}
		return message;
	}
	
	private String getValue(HSSFCell hssfCell) {
		if (hssfCell.getCellType() == hssfCell.CELL_TYPE_BOOLEAN) {
			// 返回布尔类型的值
			return String.valueOf(hssfCell.getBooleanCellValue());
		} else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_NUMERIC) {
			// 返回数值类型的值
			DecimalFormat df = new DecimalFormat("0");
			return df.format(hssfCell.getNumericCellValue());
		} else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_FORMULA) {
			// 返回数值类型的值
			return String.valueOf(hssfCell.getNumericCellValue());
		} else {
			// 返回字符串类型的值
			return String.valueOf(hssfCell.getStringCellValue());
		}
	}

	public PageQuery queryArtLiteratureCollect(PageQuery pageQuery) throws ServiceException {
		try {
		  createSqlFilter(pageQuery);
          return jdbcDao.queryBySqlId("artLiteratureCollectList", pageQuery);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private void createSqlFilter(PageQuery page) {
		String paras = "";
		String collectName = page.getParameters().get("collectName").toString();
		if (collectName != null && !"".equals(collectName)) {
			paras = " collect_name like '%" + collectName + "%'";
		}
		if (paras.length() > 0) {
			page.getParameters().put("paras", paras);
		}
	}
	
    @Resource
	private ArtLiteratureCollectDao	artLiteratureCollectDao;

	public void setArtLiteratureCollectDao(ArtLiteratureCollectDao artLiteratureCollectDao) {
		this.artLiteratureCollectDao = artLiteratureCollectDao;
	}
}

