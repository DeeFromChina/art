package com.golead.art.photo;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts2.ServletActionContext;

import com.golead.art.artist.model.ArtArtist;
import com.golead.art.artist.service.ArtArtistService;
import com.golead.art.photo.model.ArtPhoto;
import com.golead.art.photo.service.ArtPhotoService;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.util.ConvertUtil;
import com.golead.core.web.action.BaseAction;

public class ArtPhotoAction extends BaseAction {

   private final Log                 logger    = LogFactory.getLog(ArtPhotoAction.class);

   private static final String       FILE_PATH = ServletActionContext.getServletContext().getRealPath("/upload/photo/");

   private List<Map<String, String>> cookie    = new ArrayList<Map<String, String>>();

   @Resource
   private ArtArtistService          artArtistService;

   @Resource
   private ArtPhotoService           artPhotoService;

   private File                      files;
   private String                    filesFileName;
   private String                    filesContentType;

   public String doExecute() throws Exception {
      String forward = "";
      String action = form.getAction();

      if (action == null) action = LIST;
      if (logger.isDebugEnabled()) logger.debug("action:" + action);
      try {
         if (LIST.equalsIgnoreCase(action)) forward = sreachPhoto();
         else if (PAGE.equalsIgnoreCase(action)) forward = getPagePhoto();
         else if (ADD.equalsIgnoreCase(action)) forward = add();
         else if (SAVE.equalsIgnoreCase(action)) forward = save();
         else if (EDIT.equalsIgnoreCase(action)) forward = edit();
         else if (UPDATE.equalsIgnoreCase(action)) forward = update();
         else if ("ARTIST".equalsIgnoreCase(action)) forward = artist();
         else if ("SHOW".equalsIgnoreCase(action)) forward = show();
         else if (VIEW.equalsIgnoreCase(action)) forward = view();
         else if (DELETE.equalsIgnoreCase(action)) forward = delete();
      }
      catch (Exception e) {// 其他系统出错
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         forward = ERROR;
      }
      return forward;
   }

   public String sreachPhoto() throws Exception {
      initForm();
      return LIST;
   }

   public void initForm() throws Exception {
      setCode(form, "PHOTO_TYPE");
   }

   private String getPagePhoto() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'getPagePhoto' method");
      try {
         initForm();
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
         PageQuery pageQuery = form.getQuery();
         pageQuery = artPhotoService.queryArtPhoto(pageQuery);
         if (pageQuery.getRecordSet() != null) {
            for (Map<String, Object> item : pageQuery.getRecordSet()) {
               Map<String, Object> map = new HashMap<String, Object>();
               String thumbnail = item.get("photo") == null ? "" : item.get("photo").toString();
               if (!thumbnail.equals("")) {
                  thumbnail = request.get("CONTEXT_PATH") + "/upload/photo/" + item.get("eName") + File.separator + item.get("photo");
               }
               String photoType = item.get("photoType") == null ? "" : item.get("photoType").toString();
               String link = "^javascript:view(" + item.get("id") + ");^_self";

               String photoTime = item.get("photoTime") == null ? "" : item.get("photoTime").toString();
               if (!"".equals(photoTime)) {
                  SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                  Date date = (Date) sdf.parse(photoTime);
                  photoTime = sdf.format(date);
               }
               String str = "<img width='100px' height='100px' src='" + thumbnail + "' />";
               map.put("id", item.get("id"));
               map.put("data",
                     new Object[] { "", str, item.get("photoName") + link, item.get("cName"), item.get("publicationName"), photoTime, item.get("photoAddr"),
                           item.get("photoDesc"), item.get("photoSource"), findCodeName(form, "PHOTO_TYPE", photoType) });
               list.add(map);
            }
         }
         String res = genGridJson(pageQuery, list);
         setResponse(res);
      }
      catch (ServiceException e) {
         e.printStackTrace();
         setResponse("{exit:1,message:\"" + e.getMessage() + "\"}");
      }
      catch (Exception e) {
         e.printStackTrace();
         setResponse("{exit:1,message:\"数据访问错误。\"}");
      }
      return null;
   }

   private String add() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'add' method");
      String forward = null;
      try {
         if (ids != null && !"".equals(ids)) {
            ArtArtist artArtist = artArtistService.getArtArtist(Integer.valueOf(ids));
            form.getRecord().put("artistName", artArtist.getCname());
            form.getRecord().put("artistId", artArtist.getId().toString());
         }
         initForm();
         return ADD;
      }
      catch (Exception e) {
         e.printStackTrace();
         forward = ERROR;
      }
      return forward;
   }

   private String save() throws Exception {
      try {
         artPhotoService.createArtPhoto(form.getRecord(), files, filesFileName, FILE_PATH);
         return returnForward(RETURN_NORMAL);
      }
      catch (Exception e) {
         addMessage(form, e.getMessage());
         initForm();
         return ADD;
      }
   }

   private String edit() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'edit' method");
      String forward = null;
      try {
         initForm();
         String id = form.getRecord().get("id");
         ArtPhoto artPhoto = artPhotoService.getArtPhoto(Integer.valueOf(id));
         ConvertUtil.objectToMap(form.getRecord(), artPhoto);
         ArtArtist artist = artArtistService.getArtArtist(artPhoto.getArtistId());
         form.getRecord().remove("artistId");
         form.getRecord().put("artistName", artist.getCname());
         form.getRecord().put("eName", artist.getEname());
         String attachment = artPhoto.getPhoto();
         if (attachment != null) {
            String[] attachments = attachment.split(",");
            for (int i = 0; i < attachments.length; i++) {
               Map<String, String> map = new HashMap<String, String>();
               map.put("name", artPhoto.getPhotoName());
               map.put("saveName", attachments[i]);
               cookie.add(map);
            }
            form.getRecord().put("attachment", artist.getEname().trim().toLowerCase() + File.separator + attachment);
         }
         return EDIT;
      }
      catch (Exception e) {
         e.printStackTrace();
         forward = ERROR;
      }
      return forward;
   }

   private String update() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'update' method");
      try {
         artPhotoService.updateArtPhoto(form.getRecord(), files, filesFileName, FILE_PATH);
         return returnForward(RETURN_NORMAL);
      }
      catch (Exception e) {
         e.printStackTrace();
         addMessage(form, e.getMessage());
         initForm();
         return EDIT;
      }
   }

   private String artist() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'artist' method");
      try {
         List<ArtArtist> artArtists = artArtistService.findAllArtArtist();
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
         for (ArtArtist artArtist : artArtists) {
            Map<String, Object> map = new HashMap<String, Object>();
            ConvertUtil.objectToMap(map, artArtist);
            if ((";" + ids).indexOf(";" + map.get("id")) > -1) map.put("CHECKED", "checked");
            else map.put("CHECKED", "");
            list.add(map);
         }
         form.getQuery().setRecordSet(list);
         return "ARTIST";
      }
      catch (Exception e) {
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         return ERROR;
      }
   }

   private String show() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'show' method");
      try {
         return "SHOW";
      }
      catch (Exception e) {
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         return ERROR;
      }
   }

   private String view() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'view' method");
      String forward = null;
      try {
         initForm();
         ArtPhoto artPhoto = artPhotoService.getArtPhoto(Integer.valueOf(ids));
         ConvertUtil.objectToMap(form.getRecord(), artPhoto);
         ArtArtist artist = artArtistService.getArtArtist(artPhoto.getArtistId());
         form.getRecord().put("artistName", artist.getCname());
         form.getRecord().put("photoType", findCodeName(form, "PHOTO_TYPE", artPhoto.getPhotoType()));
         String attachment = artPhoto.getPhoto();
         if (attachment != null) {
            form.getRecord().put("attachment", artist.getEname().trim().toLowerCase() + File.separator + attachment);
         }
         return VIEW;
      }
      catch (Exception e) {
         e.printStackTrace();
         forward = ERROR;
      }
      return forward;
   }

   private String delete() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'delete' method");
      try {
         String[] idlist = ids.split(",");
         Integer[] dels = new Integer[idlist.length];
         for (int i = 0; i < idlist.length; i++) {
            dels[i] = Integer.valueOf(idlist[i]);
         }
         artPhotoService.deleteArtPhotos(dels, FILE_PATH);
         setResponse("{exit:0}");
      }
      catch (Exception e) {
         e.printStackTrace();
         return ERROR;
      }
      return null;
   }

   public List<Map<String, String>> getCookie() {
      return cookie;
   }

   public void setCookie(List<Map<String, String>> cookie) {
      this.cookie = cookie;
   }

   public File getFiles() {
      return files;
   }

   public void setFiles(File files) {
      this.files = files;
   }

   public String getFilesFileName() {
      return filesFileName;
   }

   public void setFilesFileName(String filesFileName) {
      this.filesFileName = filesFileName;
   }

   public String getFilesContentType() {
      return filesContentType;
   }

   public void setFilesContentType(String filesContentType) {
      this.filesContentType = filesContentType;
   }

}
