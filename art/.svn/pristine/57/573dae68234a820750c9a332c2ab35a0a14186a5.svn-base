package com.golead.art.auction.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.Serializable;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;
import com.golead.art.auction.dao.ArtAuctionWordsDao;
import com.golead.art.auction.model.ArtAuctionWords;
import com.golead.art.auction.service.ArtAuctionWordsService;
import com.golead.art.utils.FileUtils;

import javax.annotation.Resource; 

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Service;

@Service
public class ArtAuctionWordsServiceImpl extends BaseServiceImpl implements ArtAuctionWordsService {
	private static final long serialVersionUID = 1L;

	public ArtAuctionWords getArtAuctionWords(Serializable id) throws ServiceException {
		try {
			return artAuctionWordsDao.get(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void createArtAuctionWords(ArtAuctionWords artAuctionWords, List<File> files, String filesFileName, String path) throws ServiceException {
		try {
			StringBuffer attachment = new StringBuffer();
			String[] names = filesFileName.split(",");
			if (files != null) {
				for (int i = 0; i < files.size(); i++) {
					File file = files.get(i);
					String cName = String.valueOf(System.currentTimeMillis());
					String[] endName = names[i].split("\\.");
					FileUtils.fileUpload(path + File.separator + cName + "." + endName[endName.length-1], file);
					attachment.append(names[i] + "/" + cName + "." + endName[endName.length-1]);
					if (i + 1 != files.size())
						attachment.append(",");
				}
			}
			artAuctionWords.setAttachment(attachment.toString());
			artAuctionWordsDao.save(artAuctionWords);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void updateArtAuctionWords(Map<String, String> artAuctionWordsMap, List<File> files, String fileName, String filesFileName, String path) throws ServiceException {
		try {
            Integer pkId = new Integer(artAuctionWordsMap.get(ArtAuctionWords.PROP_ID));
			ArtAuctionWords tmp = artAuctionWordsDao.get(pkId);
			StringBuffer attachment = new StringBuffer();
			
			String[] links;//数据库的attachment的值
			String[] oldNames = fileName.split(",");//没有删除的附件名称
			
			String allNewName = "";
			String[] deleteNames;
			
			if (tmp.getAttachment() != null && !"".equals(tmp.getAttachment())) {
				links = tmp.getAttachment().split(",");
				for (String link : links) {
					allNewName += link.split("/")[1] + ",";
				}
				deleteNames = allNewName.replace(fileName, "").split(",");
				File[] fileList = new File(path).listFiles();
				if(fileList!=null){
					for(File file : fileList){
						for (String deleteName : deleteNames) {
							if (deleteName.equals(file.getName())) {
								file.delete();
							}
						}
					}
				}
				for (String link : links) {
					for (String oldName : oldNames) {
						if (oldName.equals(link.split("/")[1])) {
							attachment.append(link + ",");
						}
					}
				}
			}
			
			if (files != null) {
				String[] names = filesFileName.split(",");
				for (int i = 0; i < files.size(); i++) {
					File file = files.get(i);
					String cName = String.valueOf(System.currentTimeMillis());
					String[] endName = names[i].split("\\.");
					FileUtils.fileUpload(path + File.separator + cName + "." + endName[endName.length-1], file);
					if (!"".equals(fileName.toString())) {
						if(!fileName.toString().endsWith(",")){
		                     attachment.append(",");
		                  }
					}
					attachment.append(filesFileName + "/" + cName + "." + endName[endName.length-1]);
					if (i + 1 != files.size())
						attachment.append(",");
				}
			}
			
			tmp.setAttachment(attachment.toString());
			ConvertUtil.mapToObject(tmp, artAuctionWordsMap, true);
			artAuctionWordsDao.update(tmp);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtAuctionWords(Serializable id) throws ServiceException {
		try {
			artAuctionWordsDao.delete(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtAuctionWordss(Serializable[] ids) throws ServiceException {
		try {
			artAuctionWordsDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	public void deleteArtAuctionWordss(Serializable[] ids, String path) throws ServiceException {
		try {
			List<String> fileNames = new ArrayList<String>();
			for (Serializable id : ids) {
				ArtAuctionWords artAuctionWords = getArtAuctionWords(id);
				String[] attachments = artAuctionWords.getAttachment().split(",");
				if (artAuctionWords.getAttachment().length() > 0) {
					for (String attachment : attachments) {
						fileNames.add(attachment.split("/")[1]);
					}
				}
			}
			File[] fileLies = new File(path).listFiles();
			if (fileLies != null) {
				for (File file : fileLies) {
					for (String fileName : fileNames) {
						if (fileName.equals(file.getName())) {
							file.delete();
						}
					}
				}
				fileLies = new File(path).listFiles();
				if (fileLies.length == 0) {
					File file = new File(path);
					file.delete();
				}
			}
			artAuctionWordsDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	public String importWords(String path, int auctionId) throws ServiceException {
		String message = "";
		try {
			FileInputStream fileInputStream = new FileInputStream(path);
			HSSFWorkbook wb = new HSSFWorkbook(fileInputStream);
			HSSFSheet sht = wb.getSheetAt(0);
			if (sht != null) {
				for (int rowNum = 2; rowNum < sht.getLastRowNum(); rowNum++) {
					HSSFRow hssfRow = sht.getRow(rowNum);
					if(hssfRow == null) continue;
					if (hssfRow.getCell(0) == null) {
						message = "成功操作到第" + String.valueOf(rowNum-1) + "行";
						break;
					}
					if(("").equals(getValue(hssfRow.getCell(0)))) {
						message = "成功操作到第" + String.valueOf(rowNum-1) + "行";
						break;
					}
					ArtAuctionWords artAuctionWords = new ArtAuctionWords();
					String str = "";
					Date time = null;
					str = getValue(hssfRow.getCell(1));
					if ("".equals(str)) {
						message = "第" + String.valueOf(rowNum) + "行找不到文章主题";
						break;
					}
					artAuctionWords.setWordsTheme(str);
					str = getValue(hssfRow.getCell(2));
					if ("".equals(str)) {
						message = "第" + String.valueOf(rowNum) + "行找不到出处";
						break;
					}
					artAuctionWords.setWordsSource(str);
					time = hssfRow.getCell(3).getDateCellValue();
					if ("".equals(time)) {
						message = "第" + String.valueOf(rowNum) + "行找不到时间";
						break;
					}
					artAuctionWords.setWordsTime(time);
					artAuctionWords.setAuctionId(auctionId);
					artAuctionWordsDao.save(artAuctionWords);
				}
			}
			fileInputStream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		File file = new File(path);
		if(file.exists() && file.isFile()){
			file.delete();
		}
		return message;
	}
	
	private String getValue(HSSFCell hssfCell) {
		if (hssfCell.getCellType() == hssfCell.CELL_TYPE_BOOLEAN) {
			// 返回布尔类型的值
			return String.valueOf(hssfCell.getBooleanCellValue());
		} else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_NUMERIC) {
			// 返回数值类型的值
			DecimalFormat df = new DecimalFormat("0");
			return df.format(hssfCell.getNumericCellValue());
		} else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_FORMULA) {
			// 返回数值类型的值
			return String.valueOf(hssfCell.getNumericCellValue());
		} else {
			// 返回字符串类型的值
			return String.valueOf(hssfCell.getStringCellValue());
		}
	}

	public PageQuery queryArtAuctionWords(PageQuery pageQuery) throws ServiceException {
		try {
		  createSqlFilter(pageQuery);
          return jdbcDao.queryBySqlId("artAuctionWordsList", pageQuery);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private void createSqlFilter(PageQuery page) {
		String paras = "";
		Map<String, String> map = page.getParameters();
		String auctionId = map.get("auctionId");
		paras = " aaw.auction_id = '" + auctionId.trim() + "' ";
		if (paras.length() > 0) {
			page.getParameters().put("paras", paras);
		}
	}
	
    @Resource
	private ArtAuctionWordsDao	artAuctionWordsDao;

	public void setArtAuctionWordsDao(ArtAuctionWordsDao artAuctionWordsDao) {
		this.artAuctionWordsDao = artAuctionWordsDao;
	}
}

