package com.golead.art.works.service.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;
import com.golead.art.works.dao.ArtWorksEvaluateDao;
import com.golead.art.works.model.ArtWorksEvaluate;
import com.golead.art.works.service.ArtWorksEvaluateService;

import javax.annotation.Resource; 

import org.springframework.stereotype.Service;

@Service
public class ArtWorksEvaluateServiceImpl extends BaseServiceImpl implements ArtWorksEvaluateService {
	private static final long serialVersionUID = 1L;

	public ArtWorksEvaluate getArtWorksEvaluate(Serializable id) throws ServiceException {
		try {
			return artWorksEvaluateDao.get(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void createArtWorksEvaluate(ArtWorksEvaluate artWorksEvaluate) throws ServiceException {
		try {
			artWorksEvaluateDao.save(artWorksEvaluate);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void updateArtWorksEvaluate(Map<String, String> artWorksEvaluateMap) throws ServiceException {
		try {
            Integer pkId = new Integer(artWorksEvaluateMap.get(ArtWorksEvaluate.PROP_ID));
			ArtWorksEvaluate tmp = artWorksEvaluateDao.get(pkId);
			ConvertUtil.mapToObject(tmp, artWorksEvaluateMap, true);			
			artWorksEvaluateDao.update(tmp);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtWorksEvaluate(Serializable id) throws ServiceException {
		try {
			artWorksEvaluateDao.delete(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtWorksEvaluates(Serializable[] ids) throws ServiceException {
		try {
			artWorksEvaluateDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public PageQuery queryArtWorksEvaluate(PageQuery pageQuery) throws ServiceException {
		try {
		  createSqlFilter(pageQuery);
          return jdbcDao.queryBySqlId("artWorksEvaluateList", pageQuery);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private void createSqlFilter(PageQuery page) {
	   String paras = " 1=1 ";
      Map<String, String> map = page.getParameters();
      
      String worksId = map.get("id");
      if (worksId != null && worksId.trim().length() > 0) {
         paras += " AND evaluate.works_id =" + worksId.trim();
      }
      
      if (paras.length() > 0) page.getParameters().put("paras", paras);
   }
	
    @Resource
	private ArtWorksEvaluateDao	artWorksEvaluateDao;

	public void setArtWorksEvaluateDao(ArtWorksEvaluateDao artWorksEvaluateDao) {
		this.artWorksEvaluateDao = artWorksEvaluateDao;
	}
}

