package com.golead.art.works;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.StrutsStatics;

import com.golead.art.artist.model.ArtArtist;
import com.golead.art.artist.model.ArtCountry;
import com.golead.art.artist.service.ArtArtistService;
import com.golead.art.artist.service.ArtCountryService;
import com.golead.art.utils.FileUtils;
import com.golead.art.utils.PrintExcel;
import com.golead.art.utils.PrintPoint;
import com.golead.art.works.model.ArtMedium;
import com.golead.art.works.model.ArtWorks;
import com.golead.art.works.model.ArtWorksAttachment;
import com.golead.art.works.service.ArtMediumService;
import com.golead.art.works.service.ArtWorksAttachmentService;
import com.golead.art.works.service.ArtWorksService;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.util.ConvertUtil;
import com.golead.core.web.action.BaseAction;

public class ArtWorksAction extends BaseAction {

   private final Log                 logger        = LogFactory.getLog(ArtWorksAction.class);

   private SimpleDateFormat          sdf           = new SimpleDateFormat("yyyy-MM-dd");

   public static String              FILE_PATH2     = ServletActionContext.getServletContext().getRealPath("/upload/auction/");
   public static String              FILE_PATH     = ServletActionContext.getServletContext().getRealPath("");

   private List<Map<String, String>> partSizeList  = new ArrayList<Map<String, String>>();
   private List<Map<String, String>> thumbnailList = new ArrayList<Map<String, String>>();
   private List<File>                files;
   private String                    filesFileName;
   private String                    filesContentType;
   private File                      importFile;
   private String                    importFileFileName;
   private String                    importFileContentType;

   @Resource
   private ArtMediumService          artMediumService;

   @Resource
   private ArtWorksService           artWorksService;

   @Resource
   private ArtArtistService          artArtistService;

   @Resource
   private ArtWorksAttachmentService artWorksAttachmentService;

   @Resource
   private ArtCountryService         artCountryService;

   public String doExecute() throws Exception {
      String forward = "";
      String action = form.getAction();

      if (action == null) action = LIST;
      if (logger.isDebugEnabled()) logger.debug("action:" + action);
      try {
         initForm();
         if (LIST.equalsIgnoreCase(action)) forward = LIST;
         else if (PAGE.equalsIgnoreCase(action)) forward = getPageDate();
         else if (ADD.equalsIgnoreCase(action)) forward = addWorks();
         else if (SAVE.equalsIgnoreCase(action)) forward = saveWorks();
         else if (EDIT.equalsIgnoreCase(action)) forward = editWorks();
         else if (UPDATE.equalsIgnoreCase(action)) forward = updateWorks();
         else if (VIEW.equalsIgnoreCase(action)) forward = view();
         else if (DELETE.equalsIgnoreCase(action)) forward = delete();
         else if ("ARTIST".equalsIgnoreCase(action)) forward = artist();
         else if ("COUNTRY".equalsIgnoreCase(action)) forward = country();
         else if ("MEDIUM".equalsIgnoreCase(action)) forward = medium();
         else if ("THUMBNAIL".equalsIgnoreCase(action)) forward = thumbnail();
         else if ("SAVETHUMBNAIL".equalsIgnoreCase(action)) forward = saveThumbnail();
         else if ("DELETETHUMBNAIL".equalsIgnoreCase(action)) forward = deleteThumbnail();
         else if ("SHOW".equalsIgnoreCase(action)) forward = show();
         else if ("GOEXCEL".equalsIgnoreCase(action)) forward = goExcel();
         else if ("EXCEL".equalsIgnoreCase(action)) forward = excel();
         else if ("DOWNLOAD".equalsIgnoreCase(action)) forward = download();
      }
      catch (Exception e) {// 其他系统出错
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         forward = ERROR;
      }
      return forward;
   }

   public void initForm() throws Exception {
      setCode(form, "ART_TYPE,DATE_YEAR,MEDIUM_TYPE,SIGNATURE");
      List<ArtMedium> chineseMediums = artMediumService.findBySide("1");
      List<ArtMedium> englishMediums = artMediumService.findBySide("2");
      setCode(form, "chineseMediums", chineseMediums, ArtMedium.PROP_MEDIUM_NAME, ArtMedium.PROP_ID, true);
      setCode(form, "englishMediums", englishMediums, ArtMedium.PROP_MEDIUM_NAME, ArtMedium.PROP_ID, true);
      List<ArtMedium> materials = artMediumService.findByCategory("1");
      List<ArtMedium> shapes = artMediumService.findByCategory("2");
      setCode(form, "MATERIALS", materials, ArtMedium.PROP_MEDIUM_NAME, ArtMedium.PROP_ID, true);
      setCode(form, "SHAPES", shapes, ArtMedium.PROP_MEDIUM_NAME, ArtMedium.PROP_ID, true);
      List<ArtCountry> artCountries = artCountryService.findAll();
      setCode(form, "COUNTRY", artCountries, ArtCountry.PROP_COUNTRY_NAME, ArtCountry.PROP_ID, true);
   }

   private String getPageDate() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'getPageDate' method");
      try {
         initForm();
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
         PageQuery pageQuery = form.getQuery();
         pageQuery = artWorksService.queryArtWorks(pageQuery);
         if (pageQuery.getRecordSet() != null) {
            for (Map<String, Object> item : pageQuery.getRecordSet()) {
               Map<String, Object> map = new HashMap<String, Object>();
               String artistlink = "^javascript:artistview(" + item.get("artistId") + ");^_self";
               String worklink = "^javascript:workview(" + item.get("id") + ");^_self";
               map.put("id", item.get("id"));
               String createTime = item.get("createYear") == null ? "" : item.get("createYear").toString();
               if (!"".equals(createTime)) {
                  createTime = createTime + "年";
               }
               String createMonth = item.get("createMonth") == null ? "" : item.get("createMonth").toString();
               if (!"".equals(createMonth)) {
                  createTime = createTime + createMonth + "月";
               }
               String createDay = item.get("createDay") == null ? "" : item.get("createDay").toString();
               if (!"".equals(createDay)) {
                  createTime = createTime + createDay + "日";
               }
               String auctionTime = "";
               if (item.get("auctionTime") != null) {
                  auctionTime = sdf.format(item.get("auctionTime"));
               }
               String thumbnail = item.get("thumbnail") == null ? "" : item.get("thumbnail").toString();
               if (!thumbnail.equals("")) {
                  thumbnail = request.get("CONTEXT_PATH") + "/upload/auction/" + File.separator + "thumbnail" + File.separator + thumbnail;
               }
               map.put(
                     "data",
                     new Object[] {
                           "",
                           thumbnail,
                           item.get("no") + worklink,
                           item.get("c_name") + artistlink,
                           item.get("chineseName"),
                           item.get("englishName"),
                           createTime,
                           item.get("sizeCm"),
                           item.get("sizeIn"),
                           findCodeName(form, "MATERIALS", item.get("mediumMaterial") == null ? "" : item.get("mediumMaterial").toString()),
                           findCodeName(form, "SHAPES", item.get("mediumShape") == null ? "" : item.get("mediumShape").toString()),
                           item.get("worksSeries"),
                           findCodeName(form, "SIGNATURE", item.get("signature") == null ? "" : item.get("signature").toString()),
                           item.get("signatureContent"),
                           (item.get("createCountry") == null ? "" : item.get("createCountry").toString())
                                 + (item.get("createPlace") == null ? "" : item.get("createPlace").toString()),
                           (item.get("worksTheme") == null ? "" : item.get("worksTheme").toString()),
                           //                           +"2:"+(item.get("worksTheme") == null ? "" : item.get("worksTheme2").toString())
                           //                                 +"3:"+(item.get("worksTheme2") == null ? "" : item.get("worksTheme2").toString()),
                           item.get("styleType"), auctionTime, item.get("auctionHouse"), item.get("lowestPrice"), item.get("highestPrice"),
                           item.get("tranPrice"), item.get("tradePrice") });
               list.add(map);
            }
         }
         String res = genGridJson(pageQuery, list);
         setResponse(res);
      }
      catch (ServiceException e) {
         e.printStackTrace();
         setResponse("{exit:1,message:\"" + e.getMessage() + "\"}");
      }
      catch (Exception e) {
         e.printStackTrace();
         setResponse("{exit:1,message:\"数据访问错误。\"}");
      }
      return null;
   }

   private String addWorks() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'addWorks' method");
      String forward = null;
      try {
         initForm();
         String worksNo = artWorksService.getMaxWorksNo();
         form.getRecord().put("worksNo", worksNo);
         return ADD;
      }
      catch (Exception e) {
         e.printStackTrace();
         forward = ERROR;
      }
      return forward;
   }

   private String saveWorks() throws Exception {
      try {
         initForm();

         ArtWorks artWorks = new ArtWorks();
         ConvertUtil.convertToModel(artWorks, artWorksService.changeArtWorks(form));
         artWorksService.createArtWorks(artWorks);
         if (filesFileName != null) {
            artWorksService.saveThumbnail(artWorks, filesFileName, FILE_PATH, files);
         }
         artWorks.getArtistId();
         form.getRecord().put("id", artWorks.getId().toString());
         editWorks();
         form.getRecord().put("next", "true");
         return EDIT;
      }
      catch (Exception e) {
         addMessage(form, e.getMessage());
         e.printStackTrace();
         initForm();
         return ADD;
      }
   }

   private String editWorks() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'editWorks' method");
      String forward = null;
      try {
         initForm();
         String id = form.getRecord().get("id");
         ArtWorks works = artWorksService.getArtWorks(Integer.valueOf(id));
         ConvertUtil.objectToMap(getForm().getRecord(), works);
         if (works.getMediumMaterial() != null && !"".equals(works.getMediumMaterial())) {
            ArtMedium artMedium = artMediumService.getArtMedium(works.getMediumMaterial());
            form.getRecord().put("mediumMaterial", artMedium.getMediumName());
            form.getRecord().put("mediumMaterialId", artMedium.getId().toString());
            artMedium = artMediumService.getArtMedium(works.getMediumShape());
            form.getRecord().put("mediumShape", artMedium.getMediumName());
            form.getRecord().put("mediumShapeId", artMedium.getId().toString());
         }
         ArtArtist artist = artArtistService.getArtArtist(works.getArtistId());
         form.getRecord().put("artArtistName", artist.getCname());
         form.getRecord().put("artArtistId", artist.getId().toString());
         if(works.getCreateCountry() != null){
            ArtCountry artCountry = artCountryService.getArtCountry(works.getCreateCountry());
            form.getRecord().put("createCountryName", artCountry.getCountryName());
            form.getRecord().put("createCountry", artCountry.getId().toString());
         }
         form.getRecord().put("chineseName", works.getWorksCName());
         form.getRecord().put("englishName", works.getWorksEName() == null ? "" : works.getWorksEName());
         form.getRecord().put("no", works.getWorksNo());
         //         String mediums = works.getMediumMaterial() == null ? "" : works.getMediumMaterial().toString();
         //         form.getRecord().put("chineseMediums", mediums);
         //         mediums = works.getMediumShape() == null ? "" : works.getMediumShape().toString();
         //         form.getRecord().put("englishMediums", mediums);
         String worksImage = works.getWorksImage();
         if (worksImage != null && !"".equals(worksImage)) {
            String[] worksImages = worksImage.split("、");
            for (int i = 0; i < worksImages.length; i++) {
               Map<String, String> map = new HashMap<String, String>();
               map.put("key", worksImages[i].split(":")[0]);
               map.put("value", worksImages[i].split(":")[1]);
               thumbnailList.add(map);
            }
         }
         String partSize = works.getPartSize();
         if (partSize != null && !"".equals(partSize)) {
            String[] partSizes = partSize.split(";");
            for (int i = 0; i < partSizes.length; i++) {
               Map<String, String> map = new HashMap<String, String>();
               String size = partSizes[i];
               String[] sizes = size.split(":");
               if (sizes.length == 2) {
                  String partSize_name = sizes[0];
                  map.put("name_" + String.valueOf(i), partSize_name);
                  if (sizes[1].split(" ").length == 2) {
                     String partSize_unit = sizes[1].split(" ")[1];
                     map.put("unit_" + String.valueOf(i), partSize_unit);
                     String lw = sizes[1].split(" ")[0];
                     String[] lws = lw.split("\\*");
                     if (lws.length == 2) {
                        String partSize_l = lws[0];
                        String partSize_w = lws[1];
                        map.put("l_" + String.valueOf(i), partSize_l);
                        map.put("w_" + String.valueOf(i), partSize_w);
                        map.put("id", String.valueOf(i));
                        partSizeList.add(map);
                     }
                  }
               }
            }
            if (partSizeList.size() == 0) {
               Map<String, String> map = new HashMap<String, String>();
               map.put("id", "0");
               partSizeList.add(map);
            }
         }
         else {
            form.getRecord().put("Psize", "no");
         }
         return EDIT;
      }
      catch (Exception e) {
         e.printStackTrace();
         forward = ERROR;
      }
      return forward;
   }

   private String updateWorks() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'updateWorks' method");
      try {
         initForm();
         form.getRecord().put("artistId", form.getRecord().get("artArtistId"));
         form.getRecord().put("worksCName", form.getRecord().get("chineseName"));
         form.getRecord().put("worksEName", form.getRecord().get("englishName"));
         form.getRecord().put("worksNo", form.getRecord().get("no"));
         form.getRecord().put("mediumMaterial", form.getRecord().get("mediumMaterialId"));
         form.getRecord().put("mediumShape", form.getRecord().get("mediumShapeId"));
         if (form.getRecord().get("partSize_unit") == null) form.getRecord().put("partSize_unit", "尺寸单位");
         if (form.getRecord().get("partSize_name") == null) form.getRecord().put("partSize_name", "位置名称1");
         if (form.getRecord().get("partSize_w") == null) form.getRecord().put("partSize_w", "宽");
         if (form.getRecord().get("partSize_l") == null) form.getRecord().put("partSize_l", "长");
         artWorksService.changeArtWorks(form);
         artWorksService.updateArtWorks(form.getRecord(), files, filesFileName, FILE_PATH);
         return returnForward(RETURN_NORMAL);
      }
      catch (Exception e) {
         addMessage(form, e.getMessage());
         initForm();
         return EDIT;
      }
   }

   private String view() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'view' method");
      String forward = null;
      try {
         initForm();
         String id = form.getRecord().get("id");
         ArtWorks works = artWorksService.getArtWorks(Integer.valueOf(id));
         ConvertUtil.objectToMap(getForm().getRecord(), works);
         if (works.getMediumMaterial() != null && !"".equals(works.getMediumMaterial())) {
            ArtMedium artMedium = artMediumService.getArtMedium(works.getMediumMaterial());
            form.getRecord().put("mediumMaterial", artMedium.getMediumName());
            form.getRecord().put("mediumMaterialId", artMedium.getId().toString());
            artMedium = artMediumService.getArtMedium(works.getMediumShape());
            form.getRecord().put("mediumShape", artMedium.getMediumName());
            form.getRecord().put("mediumShapeId", artMedium.getId().toString());
         }
         ArtArtist artist = artArtistService.getArtArtist(works.getArtistId());
         form.getRecord().put("artArtistName", artist.getCname());
         form.getRecord().put("artArtistId", artist.getId().toString());
         form.getRecord().put("chineseName", works.getWorksCName());
         form.getRecord().put("englishName", works.getWorksEName() == null ? "" : works.getWorksEName());
         form.getRecord().put("no", works.getWorksNo());
         //          String mediums = works.getMediumMaterial() == null ? "" : works.getMediumMaterial().toString();
         //          form.getRecord().put("chineseMediums", mediums);
         //          mediums = works.getMediumShape() == null ? "" : works.getMediumShape().toString();
         //          form.getRecord().put("englishMediums", mediums);
         String partSize = works.getPartSize();
         if (partSize != null && !"".equals(partSize)) {
            String[] partSizes = partSize.split(";");
            for (int i = 0; i < partSizes.length; i++) {
               Map<String, String> map = new HashMap<String, String>();
               String size = partSizes[i];
               String[] sizes = size.split(":");
               if (sizes.length == 2) {
                  String partSize_name = sizes[0];
                  map.put("name_" + String.valueOf(i), partSize_name);
                  if (sizes[1].split(" ").length == 2) {
                     String partSize_unit = sizes[1].split(" ")[1];
                     map.put("unit_" + String.valueOf(i), partSize_unit);
                     String lw = sizes[1].split(" ")[0];
                     String[] lws = lw.split("\\*");
                     if (lws.length == 2) {
                        String partSize_l = lws[0];
                        String partSize_w = lws[1];
                        map.put("l_" + String.valueOf(i), partSize_l);
                        map.put("w_" + String.valueOf(i), partSize_w);
                        map.put("id", String.valueOf(i));
                        partSizeList.add(map);
                     }
                  }
               }
            }
            if (partSizeList.size() == 0) {
               Map<String, String> map = new HashMap<String, String>();
               map.put("id", "0");
               partSizeList.add(map);
            }
         }
         else {
            form.getRecord().put("Psize", "no");
         }
         return VIEW;
      }
      catch (Exception e) {
         e.printStackTrace();
         forward = ERROR;
      }
      return forward;
   }

   private String delete() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'delete' method");
      try {
         String[] idlist = ids.split(",");
         Integer[] dels = new Integer[idlist.length];
         for (int i = 0; i < idlist.length; i++) {
            dels[i] = Integer.valueOf(idlist[i]);
         }
         artWorksService.deleteArtWorkss(dels);
         setResponse("{exit:0}");
      }
      catch (Exception e) {
         e.printStackTrace();
         return ERROR;
      }
      return null;
   }

   private String artist() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'artist' method");
      try {
         List<ArtArtist> artArtists = artArtistService.findAllArtArtist();
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
         for (ArtArtist artArtist : artArtists) {
            Map<String, Object> map = new HashMap<String, Object>();
            ConvertUtil.objectToMap(map, artArtist);
            if ((";" + ids).indexOf(";" + map.get("id") + ";") > -1) map.put("CHECKED", "checked");
            else map.put("CHECKED", "");
            list.add(map);
         }
         form.getQuery().setRecordSet(list);
         return "ARTIST";
      }
      catch (Exception e) {
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         return ERROR;
      }
   }
   
   private String country() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'country' method");
      try {
         List<ArtCountry> artCountries = artCountryService.findAll();
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
         for (ArtCountry artCountry : artCountries) {
            Map<String, Object> map = new HashMap<String, Object>();
            ConvertUtil.objectToMap(map, artCountry);
            if ((";" + ids).indexOf(";" + map.get("id")) > -1) map.put("CHECKED", "checked");
            else map.put("CHECKED", "");
            list.add(map);
         }
         form.getQuery().setRecordSet(list);
         return "COUNTRY";
      }
      catch (Exception e) {
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         return ERROR;
      }
   }

   private String medium() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'Medium' method");
      try {
         String id = form.getRecord().get("id");
         PageQuery pageQuery = new PageQuery();
         pageQuery.getParameters().put("upId", "");
         pageQuery.getParameters().put("mediumCategory", form.getRecord().get("mediumCategory"));
         pageQuery = artMediumService.queryArtMedium(pageQuery);
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
         for (Map<String, Object> map : pageQuery.getRecordSet()) {
            if (id.indexOf(map.get("id").toString()) > -1) map.put("CHECKED", "checked");
            else map.put("CHECKED", "");
            list.add(map);
         }
         form.getQuery().setRecordSet(list);
         return "MEDIUM";
      }
      catch (Exception e) {
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         return ERROR;
      }
   }

   private String thumbnail() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'thumbnail' method");
      try {
         String id = form.getRecord().get("id");
         form.getRecord().put("worksId", id);
         ArtWorks artWorks = artWorksService.getArtWorks(Integer.valueOf(id));
         ArtWorksAttachment artWorksAttachment = artWorksAttachmentService.findByWorksId(Integer.valueOf(id));
         String cover = "";
         if (artWorksAttachment != null) {
            cover = artWorksAttachment.getFileName();
         }
         String picture = artWorks.getThumbnail();
         if (picture != null && !"".equals(picture)) {
            String[] pictures = picture.split(",");
            for (String str : pictures) {
               Map<String, String> map = new HashMap<String, String>();
               map.put("name", str.split("/")[0]);
               map.put("realName", str.split("/")[1]);
               map.put("worksId", id);
               if (cover.equals(str)) {
                  map.put("cover", "(封面)");
               }
               thumbnailList.add(map);
            }
         }
         return "THUMBNAIL";
      }
      catch (Exception e) {
         e.printStackTrace();
         return ERROR;
      }
   }

   private String saveThumbnail() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'saveThumbnail' method");
      try {
         String id = form.getRecord().get("id");
         ArtWorks artWorks = artWorksService.getArtWorks(Integer.valueOf(id));

         String path = FILE_PATH + File.separator + "upload" + File.separator + "works" + File.separator + "thumbnail" + File.separator
               + form.getRecord().get("worksId");
         File newfile = new File(path);
         if (!newfile.exists()) {
            newfile.mkdirs();
         }
         StringBuffer fileName = new StringBuffer();
         String name = getFilesFileName();
         if (files != null) {
            for (int i = 0; i < files.size(); i++) {
               File file = files.get(i);
               String cName = String.valueOf(System.currentTimeMillis());
               String[] endless = name.split("\\.");
               FileUtils.fileUpload(path + File.separator + cName + "." + endless[endless.length - 1], file);
               fileName.append(name + "/" + cName + "." + endless[endless.length - 1]);
            }
         }
         String thumbnail = artWorks.getThumbnail();
         if (thumbnail == null) {
            thumbnail = fileName.toString();
         }
         else {
            if (thumbnail.length() == 0) {
               thumbnail = fileName.toString();
            }
            else {
               thumbnail = thumbnail + "," + fileName.toString();
            }
         }
         artWorks.setThumbnail(thumbnail);
         artWorksService.updateArtWorks(artWorks);
      }
      catch (Exception e) {
         e.printStackTrace();
         return ERROR;
      }
      return thumbnail();
   }

   private String deleteThumbnail() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'deleteThumbnail' method");
      try {
         String id = form.getRecord().get("worksId");
         form.getRecord().put("id", id);
         String name = form.getRecord().get("name");
         ArtWorks artWorks = artWorksService.getArtWorks(Integer.valueOf(id));

         StringBuffer saveThumbnail = new StringBuffer();
         List<String> fileNames = new ArrayList<String>();
         String thumbnail = artWorks.getThumbnail();
         if (thumbnail != null) {
            String[] thumbnails = thumbnail.split(",");
            for (String allName : thumbnails) {
               fileNames.add(allName);
            }
         }
         String[] fileNames2 = new String[fileNames.size()];
         int j = 0;
         for (String fileName : fileNames) {
            fileNames2[j] = fileName;
            j++;
         }
         String[] names = name.split(",");
         int length = fileNames2.length;
         for (String delname : names) {
            for (int i = 0; i < length; i++) {
               if (fileNames2[i].split("/").length == 2) {
                  if (delname.equals(fileNames2[i].split("/")[1])) {
                     fileNames2[i] = "";
                  }
               }
            }
         }
         for (String saveName : fileNames2) {
            if (saveName != null && !"".equals(saveName)) {
               saveThumbnail.append(saveName);
               saveThumbnail.append(",");
            }
         }
         thumbnail = saveThumbnail.toString();
         if (thumbnail.length() > 0) {
            saveThumbnail.deleteCharAt(thumbnail.length() - 1);
         }
         thumbnail = saveThumbnail.toString();
         artWorks.setThumbnail(thumbnail);
         artWorksService.updateArtWorks(artWorks);
         String path = FILE_PATH + File.separator + "upload" + File.separator + "works" + File.separator + "thumbnail" + File.separator
               + form.getRecord().get("worksId");
         File[] fileLies = new File(path).listFiles();
         for (File file : fileLies) {
            for (String fileName : names) {
               if (fileName.equals(file.getName())) {
                  file.delete();
               }
            }
         }
         if (fileLies.length == 0) {
            File file = new File(path);
            file.delete();
         }
         return thumbnail();
      }
      catch (Exception e) {
         e.printStackTrace();
         return ERROR;
      }
   }

   private String show() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'show' method");
      try {
         return "SHOW";
      }
      catch (Exception e) {
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         return ERROR;
      }
   }

   private String goExcel() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'goExcel' method");
      try {
         return "GOEXCEL";
      }
      catch (Exception e) {
         e.printStackTrace();
         return LIST;
      }
   }

   private String excel() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'excel' method");
      try {
         File file = new File(FILE_PATH + File.separator + "template" + File.separator + "works" + File.separator + "works");
         if (!file.exists()) {
            file.mkdirs();
         }
         String path = FILE_PATH + File.separator + "template" + File.separator + "works" + File.separator + "works" + File.separator + importFileFileName;
         FileUtils.fileUpload(path, importFile);
         String message = artWorksService.importArtWorks(path);
         if (!"".equals(message)) {
            if (message.startsWith("成功")) {
               request.put("msg", message);
            }
            else {
               throw new Exception(message);
            }
         }
         return returnForward(message);
      }
      catch (Exception e) {
         e.printStackTrace();
         if (e.getMessage() != null) {
            addMessage(form, e.getMessage());
         }
         return "GOEXCEL";
      }
   }

   private String download() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'download' method");
      try {
         HttpServletResponse response = (HttpServletResponse) ctx.get(StrutsStatics.HTTP_RESPONSE);
         response.setContentType("APPLICATION/DOWNLOAD");
         response.setContentType("application/octed-stream,charset=gb2312");
         response.setHeader("Content-Disposition", "attachment;filename=" + new String("作品模板.xls".getBytes("gb2312"), "ISO-8859-1"));
         String tempPath = ServletActionContext.getServletContext().getRealPath("") + File.separator + "template" + File.separator + "works" + File.separator
               + "art_works.xls";
         File tempFile = new File(tempPath);
         if (!tempFile.exists()) { throw new Exception(); }

         PrintExcel printExcel = new PrintExcel();
         InputStream inp = null;
         inp = new FileInputStream(tempFile);
         HSSFWorkbook wb = null;
         POIFSFileSystem f = new POIFSFileSystem(inp);
         wb = new HSSFWorkbook(f);

         HSSFDataFormat format = wb.createDataFormat();

         HSSFCellStyle csString = wb.createCellStyle();
         csString.setBorderLeft(CellStyle.BORDER_THIN);
         csString.setBorderRight(CellStyle.BORDER_THIN);
         csString.setBorderTop(CellStyle.BORDER_THIN);
         csString.setBorderBottom(CellStyle.BORDER_THIN);
         csString.setAlignment(HSSFCellStyle.ALIGN_CENTER);
         csString.setDataFormat(format.getFormat("@"));

         HSSFCellStyle csDecimal = wb.createCellStyle();
         csDecimal.setBorderLeft(CellStyle.BORDER_THIN);
         csDecimal.setBorderRight(CellStyle.BORDER_THIN);
         csDecimal.setBorderTop(CellStyle.BORDER_THIN);
         csDecimal.setBorderBottom(CellStyle.BORDER_THIN);
         csDecimal.setDataFormat(HSSFDataFormat.getBuiltinFormat("0.00"));

         HSSFCellStyle csDecimal1 = wb.createCellStyle();
         csDecimal1.setBorderLeft(CellStyle.BORDER_THIN);
         csDecimal1.setBorderRight(CellStyle.BORDER_THIN);
         csDecimal1.setBorderTop(CellStyle.BORDER_THIN);
         csDecimal1.setBorderBottom(CellStyle.BORDER_THIN);
         HSSFDataFormat csformat = wb.createDataFormat();
         csDecimal1.setDataFormat(csformat.getFormat("0.000"));

         List<PrintPoint> printPointList = new ArrayList<PrintPoint>();

         printExcel.setPrintPointList(printPointList);// 填写数据
         printExcel.doFillSheet(wb, 0);// 写入workbook的第一页
         printExcel.doPrint(response, tempFile, wb);// workbook输出到response中。
      }
      catch (Exception e) {
         e.printStackTrace();
      }
      return null;
   }

   private String CodeNo() {
      return "W" + String.valueOf(System.currentTimeMillis());
   }

   public List<Map<String, String>> getPartSizeList() {
      return partSizeList;
   }

   public void setPartSizeList(List<Map<String, String>> partSizeList) {
      this.partSizeList = partSizeList;
   }

   public List<Map<String, String>> getThumbnailList() {
      return thumbnailList;
   }

   public void setThumbnailList(List<Map<String, String>> thumbnailList) {
      this.thumbnailList = thumbnailList;
   }

   public List<File> getFiles() {
      return files;
   }

   public void setFiles(List<File> files) {
      this.files = files;
   }

   public String getFilesFileName() {
      return filesFileName;
   }

   public void setFilesFileName(String filesFileName) {
      this.filesFileName = filesFileName;
   }

   public String getFilesContentType() {
      return filesContentType;
   }

   public void setFilesContentType(String filesContentType) {
      this.filesContentType = filesContentType;
   }

   public File getImportFile() {
      return importFile;
   }

   public void setImportFile(File importFile) {
      this.importFile = importFile;
   }

   public String getImportFileFileName() {
      return importFileFileName;
   }

   public void setImportFileFileName(String importFileFileName) {
      this.importFileFileName = importFileFileName;
   }

   public String getImportFileContentType() {
      return importFileContentType;
   }

   public void setImportFileContentType(String importFileContentType) {
      this.importFileContentType = importFileContentType;
   }

}
