package com.golead.art.literature.service.impl;

import java.io.File;
import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;
import com.golead.art.literature.dao.ArtLiteratureMediumDao;
import com.golead.art.literature.model.ArtLiteratureMedium;
import com.golead.art.literature.model.ArtLiteratureMediumResearch;
import com.golead.art.literature.model.ArtLiteratureWords;
import com.golead.art.literature.service.ArtLiteratureMediumResearchService;
import com.golead.art.literature.service.ArtLiteratureMediumService;
import com.golead.art.utils.FileUtils;

import javax.annotation.Resource; 

import org.apache.struts2.ServletActionContext;
import org.springframework.stereotype.Service;

@Service
public class ArtLiteratureMediumServiceImpl extends BaseServiceImpl implements ArtLiteratureMediumService {
	private static final long serialVersionUID = 1L;

	public ArtLiteratureMedium getArtLiteratureMedium(Serializable id) throws ServiceException {
		try {
			return artLiteratureMediumDao.get(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void createArtLiteratureMedium(ArtLiteratureMedium artLiteratureMedium) throws ServiceException {
		try {
			artLiteratureMediumDao.save(artLiteratureMedium);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void updateArtLiteratureMedium(Map<String, String> artLiteratureMediumMap) throws ServiceException {
		try {
            Integer pkId = new Integer(artLiteratureMediumMap.get(ArtLiteratureMedium.PROP_ID));
			ArtLiteratureMedium tmp = artLiteratureMediumDao.get(pkId);
			ConvertUtil.mapToObject(tmp, artLiteratureMediumMap, true);
			artLiteratureMediumDao.update(tmp);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtLiteratureMedium(Serializable id) throws ServiceException {
		try {
			artLiteratureMediumDao.delete(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtLiteratureMediums(Serializable[] ids) throws ServiceException {
		try {
			String FILE_PATH = ServletActionContext.getServletContext().getRealPath("");
			for (Serializable id : ids) {
				String path = FILE_PATH + File.separator + "upload" + File.separator + "literature" + File.separator + "medium" + File.separator + id.toString();
				File file = new File(path);
				if (file.exists()) {
					File[] fileList = file.listFiles();
					for (File inFile : fileList) {
						inFile.delete();
					}
					File[] fileList2 = file.listFiles();
					if (fileList2.length == 0) {
						file.delete();
					}
				}
			}
			artLiteratureMediumDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public PageQuery queryArtLiteratureMedium(PageQuery pageQuery) throws ServiceException {
		try {
		  createSqlFilter(pageQuery);
          return jdbcDao.queryBySqlId("artLiteratureMediumList", pageQuery);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private void createSqlFilter(PageQuery page) {
		String paras = "";
		Map<String, String> map = page.getParameters();
		String mediumTitle = map.get("mediumTitle");
		if (mediumTitle != null && !"".equals(mediumTitle)) {
			paras = " medium_title like '%" + mediumTitle.trim() + "%'";
		}
		if (paras.length() > 0) {
			page.getParameters().put("paras", paras);
		}
	}

   public boolean saveFile(ArtLiteratureMedium artLiteratureMedium, List<File> files, String filesFileName, String FILE_PATH) throws ServiceException{
      try {
         String[] names = filesFileName.split(",");
         String path = FILE_PATH + File.separator + artLiteratureMedium.getId().toString();
         if (!new File(path).exists()) {
            new File(path).mkdirs();
         }
         StringBuffer fileName = new StringBuffer();
         if (files != null) {
            for (int i = 0; i < files.size(); i++) {
               if(files.get(i) == null){
                  break;
               }
               File file = files.get(i);
               String cName = String.valueOf(System.currentTimeMillis());
               String[] endless = names[i].split("\\.");
               FileUtils.fileUpload(path + File.separator + cName + "." + endless[endless.length - 1], file);
               fileName.append(names[i] + "/" + cName + "." + endless[endless.length - 1]);
               if ((i + 1) != files.size()) fileName.append(",");
            }
         }
         artLiteratureMedium.setAttachment(fileName.toString());
         updateArtLiteratureMedium(artLiteratureMedium);
         return false;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }
   
   public void updateFile(ArtLiteratureMediumResearch artLiteratureMediumResearch, ArtLiteratureMedium artLiteratureMedium, List<File> files, String filesFileName, String FILE_PATH, String fileName) throws ServiceException{
      try {
         artLiteratureMediumResearchService.updateArtLiteratureMediumResearch(artLiteratureMediumResearch);
         String path = FILE_PATH + File.separator + artLiteratureMedium.getId().toString();
         File file = new File(path);
         File[] files2 = null;
         if (file.exists()) {
            files2 = file.listFiles();//原本的文件
         }
         Map<String, String> map = new HashMap<String, String>();
         if(fileName != null && !"".equals(fileName)){
            String[] fileNames = fileName.split(",");
            for (int i = 0; i < fileNames.length; i++) {
               if (fileNames[i] != null && !"".equals(fileNames[i])) {
                  map.put(fileNames[i], "");
               }
            }
         }
         String attachment = artLiteratureMedium.getAttachment();
         StringBuffer newAttachment = new StringBuffer();
         if(attachment != null && !"".equals(attachment)){
            String[] attachments = attachment.split(",");
            for(int i = 0; i<attachments.length; i++){
               if(map.get(attachments[i].split("/")[1]) == null){
                  deleteFile(files2, attachments[i].split("/")[1]);
                  attachments[i] = "";
               }
               if(attachments[i] != ""){
                  newAttachment.append(attachments[i]);
                  newAttachment.append(",");
               }
            }
            
         }
         if(files != null){
            saveFile(artLiteratureMedium, files, filesFileName, FILE_PATH);
            attachment = artLiteratureMedium.getAttachment();
            newAttachment.append(attachment);
         }
         String att = newAttachment.toString();
         if(att.endsWith(",")){
            att.substring(0, att.length()-1);
         }
         artLiteratureMedium.setAttachment(att);
         updateArtLiteratureMedium(artLiteratureMedium);
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   private void deleteFile(File[] files, String fileName){
      for(int i = 0; i<files.length; i++){
         File file = files[i];
         if(file.getName().equals(fileName)){
            file.delete();
         }
      }
   }
   
   public void updateArtLiteratureMedium(ArtLiteratureMedium artLiteratureMedium) throws ServiceException{
      try {
         artLiteratureMediumDao.update(artLiteratureMedium);
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }
   
    @Resource
	private ArtLiteratureMediumDao	artLiteratureMediumDao;
    
    @Resource
    private ArtLiteratureMediumResearchService	artLiteratureMediumResearchService;

	public void setArtLiteratureMediumDao(ArtLiteratureMediumDao artLiteratureMediumDao) {
		this.artLiteratureMediumDao = artLiteratureMediumDao;
	}
}

