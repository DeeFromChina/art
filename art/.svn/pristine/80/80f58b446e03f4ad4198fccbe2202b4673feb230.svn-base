package com.golead.art.app.service.impl;

import java.awt.image.BufferedImage;
import java.io.File;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;

import org.apache.struts2.ServletActionContext;
import org.springframework.stereotype.Service;

import com.golead.art.app.service.SeachFristService;
import com.golead.art.artist.model.ArtArtist;
import com.golead.art.util.ChinaInitial;
import com.golead.art.works.model.ArtWorks;
import com.golead.core.exception.ServiceException;
import com.golead.core.service.impl.BaseServiceImpl;

@Service
public class SeachFristServiceImpl extends BaseServiceImpl implements SeachFristService {

   @Override
   public List<Map<String, Object>> seachArt(Map<String, String> parameters) throws ServiceException {
      try {
         String pageName = parameters.get("pageName");
         if (pageName.equalsIgnoreCase("search")) return search(parameters);// 艺术家搜索
         if (pageName.equalsIgnoreCase("allArtist")) return allArtist(parameters);// 艺术家搜索
      }
      catch (ServiceException e) {
         e.printStackTrace();
      }
      catch (Exception e) {
         e.printStackTrace();
      }

      return null;
   }
   
   private List<Map<String, Object>> search(Map<String, String> parameters) throws ServiceException {
      System.out.println("search...");
      try {
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
         String type = returnString(parameters.get("type"));
         String condition = returnString(parameters.get("condition")).trim();
         condition = URLDecoder.decode(condition,"UTF-8");
         String sql = "";
         if ("1".equals(type)) {
            sql = "SELECT artist.id AS id,artist.c_name AS name FROM art_artist artist " + "WHERE artist.c_name LIKE '%" + condition + "%'";
            list = jdbcDao.queryBySql(sql);
            if (list != null && list.size() > 0) { return list; }
            sql = "SELECT artist.id AS id,artist.e_name AS name FROM art_artist artist " + "WHERE artist.e_name LIKE '%" + condition + "%'";
            list = jdbcDao.queryBySql(sql);
            if (list != null && list.size() > 0) { return list; }
         }
         if ("2".equals(type)) {
            sql = "SELECT works.id AS worksId,works.*,artist.* FROM art_works works" + " LEFT JOIN art_artist artist ON artist.id=works.artist_id "
                  + " WHERE works.works_c_name LIKE '%" + condition + "%' OR works.works_e_name LIKE '%" + condition + "%' ";
            list = jdbcDao.queryBySql(sql);
            List<Map<String, Object>> worksList = new ArrayList<Map<String, Object>>();
            worksList = putWorksList(list, worksList);
            return worksList;
         }
      }
      catch (ServiceException e) {
         e.printStackTrace();
         List<Map<String, Object>> list = addError(e.getMessage());
         return list;
      }
      catch (Exception e) {
         e.printStackTrace();
      }
      return null;
   }
   
   private List<Map<String, Object>> allArtist(Map<String, String> parameters) throws ServiceException {
      System.out.println("allArtist...");
      try {
         String sql = "SELECT artist.id AS id,artist.c_name AS name,"
               + "CONCAT('auction/',artist.folder_name,'/',artist.works_photo) AS worksPhoto FROM art_artist artist ORDER BY convert(artist.c_name using gbk) ASC";
         List<Map<String, Object>> list = jdbcDao.queryBySql(sql);
         for(Map<String, Object> map : list){
            String name = returnString(map.get("name"));
            String firstStr = "#";
            if(name.length()>0){
               firstStr = ChinaInitial.getPYIndexStr(name.substring(0, 1), true);
            }
            map.put("str", firstStr);
         }
         return list;
      }
      catch (ServiceException e) {
         e.printStackTrace();
         List<Map<String, Object>> list = addError(e.getMessage());
         return list;
      }
      catch (Exception e) {
         e.printStackTrace();
      }
      return null;
   }
   
   private List<Map<String, Object>> putWorksList(List<Map<String, Object>> list, List<Map<String, Object>> worksList) {
      String FILE_PATH = ServletActionContext.getServletContext().getRealPath("/upload/");
      try {
         for (Map<String, Object> map : list) {
            Map<String, Object> worksMap = new HashMap<String, Object>();
            worksMap.put("worksId", map.get("worksId"));
            worksMap.put("name", map.get(ArtWorks.COL_WORKS_C_NAME));
            String thumbnail = returnString(map.get(ArtWorks.COL_THUMBNAIL));
            String thumbnailPath = "";
            if (!"".equals(thumbnail)) {
               String folderName = returnString(map.get(ArtArtist.COL_FOLDER_NAME));
               thumbnailPath = File.separator + "auction" + File.separator + folderName + File.separator + "thumbnail" + File.separator + thumbnail;
               thumbnail = FILE_PATH + File.separator + "auction" + File.separator + folderName + File.separator + "thumbnail" + File.separator + thumbnail;
               File file = new File(thumbnail);
               if (file.exists() && file.isFile()) {
                  BufferedImage bufferedImage = ImageIO.read(file);
                  int width = bufferedImage.getWidth();
                  int height = bufferedImage.getHeight();
                  worksMap.put("width", width);
                  worksMap.put("height", height);
               }
               else {
                  thumbnail = "";
               }
            }
            worksMap.put("photo", thumbnailPath);
            worksMap.put("descript", map.get(ArtWorks.COL_WORKS_STATUS));
            worksList.add(worksMap);
         }
      }
      catch (Exception e) {
         e.printStackTrace();
      }
      return worksList;
   }

   private String returnString(Object obj) {
      if (obj == null) { return ""; }
      return obj.toString();
   }

   private List<Map<String, Object>> addError(String message) {
      Map<String, Object> map = new HashMap<String, Object>();
      List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
      map.put("error", message);
      list.add(map);
      return list;
   }
}
