package com.golead.art.app.artistPage.service.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;

import com.golead.art.app.artistPage.dao.ArtArtistPageDao;
import com.golead.art.app.artistPage.model.ArtArtistPage;
import com.golead.art.app.artistPage.service.ArtArtistPageService;
import javax.annotation.Resource; 
import org.springframework.stereotype.Service;

@Service
public class ArtArtistPageServiceImpl extends BaseServiceImpl implements ArtArtistPageService {
	private static final long serialVersionUID = 1L;

	public ArtArtistPage getArtArtistPage(Serializable id) throws ServiceException {
		try {
			return artArtistPageDao.get(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void createArtArtistPage(ArtArtistPage artArtistPage) throws ServiceException {
		try {
			artArtistPageDao.save(artArtistPage);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void updateArtArtistPage(Map<String, String> artArtistPageMap) throws ServiceException {
		try {
            Integer pkId = new Integer(artArtistPageMap.get(ArtArtistPage.PROP_ID));
			ArtArtistPage tmp = artArtistPageDao.get(pkId);
			ConvertUtil.mapToObject(tmp, artArtistPageMap, true);			
			artArtistPageDao.update(tmp);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtArtistPage(Serializable id) throws ServiceException {
		try {
			artArtistPageDao.delete(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtArtistPages(Serializable[] ids) throws ServiceException {
		try {
			artArtistPageDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public PageQuery queryArtArtistPage(PageQuery pageQuery) throws ServiceException {
		try {
		  createSqlFilter(pageQuery);
          return jdbcDao.queryBySqlId("artArtistPageList", pageQuery);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private void createSqlFilter(PageQuery page) {
	}
	
    @Resource
	private ArtArtistPageDao	artArtistPageDao;

	public void setArtArtistPageDao(ArtArtistPageDao artArtistPageDao) {
		this.artArtistPageDao = artArtistPageDao;
	}
}

