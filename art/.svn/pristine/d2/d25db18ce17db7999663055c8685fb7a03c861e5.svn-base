package com.golead.art.auction.service.impl;

import java.io.File;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.golead.art.artist.dao.ArtArtistDao;
import com.golead.art.artist.model.ArtArtist;
import com.golead.art.artist.model.ArtCollectArtist;
import com.golead.art.auction.dao.ArtAuctionDao;
import com.golead.art.auction.dao.ArtAuctionHousesDao;
import com.golead.art.auction.model.ArtAuction;
import com.golead.art.auction.model.ArtAuctionHouses;
import com.golead.art.auction.service.ArtAuctionService;
import com.golead.art.works.dao.ArtWorksDao;
import com.golead.art.works.model.ArtWorks;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.DAOException;
import com.golead.core.exception.ServiceException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;

@Service
public class ArtAuctionServiceImpl extends BaseServiceImpl implements ArtAuctionService {
   private static final long serialVersionUID = 1L;

   private SimpleDateFormat  outFormat        = new SimpleDateFormat("yyyy-MM-dd");

   public ArtAuction getArtAuction(Serializable id) throws ServiceException {
      try {
         return artAuctionDao.get(id);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public void createArtAuction(ArtAuction artAuction) throws ServiceException {
      try {
         artAuctionDao.save(artAuction);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public void updateArtAuction(Map<String, String> artAuctionMap) throws ServiceException {
      try {
         Integer pkId = new Integer(artAuctionMap.get(ArtAuction.PROP_ID));
         ArtAuction tmp = artAuctionDao.get(pkId);
         ConvertUtil.mapToObject(tmp, artAuctionMap, true);
         ArtWorks works = artWorksDao.get(tmp.getWorksId());
         ArtArtist artist = artArtistDao.get(works.getArtistId());
         String author = artist.getCname();
         if (author == null || "".equals(author)) author = artist.getEname();
         StringBuffer SizeCm = new StringBuffer();
         SizeCm.append(works.getSizeCmLength() == null ? "" : works.getSizeCmLength().toString()+"X");
         SizeCm.append(works.getSizeCmWidth() == null ? "" : works.getSizeCmWidth().toString()+"X");
         SizeCm.append(works.getSizeCmHeight() == null ? "" : works.getSizeCmHeight().toString());
         tmp.setSizeCm(SizeCm.toString());
         StringBuffer SizeIn = new StringBuffer();
         SizeIn.append(works.getSizeInLength() == null ? "" : works.getSizeInLength().toString()+"X");
         SizeIn.append(works.getSizeInWidth() == null ? "" : works.getSizeInWidth().toString()+"X");
         SizeIn.append(works.getSizeInHeight() == null ? "" : works.getSizeInHeight().toString());
         tmp.setSizeIn(SizeIn.toString());
         StringBuffer SizeRule = new StringBuffer();
         SizeRule.append(works.getSizeRuleLength() == null ? "" : works.getSizeRuleLength().toString()+"X");
         SizeRule.append(works.getSizeRuleWidth() == null ? "" : works.getSizeRuleWidth().toString()+"X");
         SizeRule.append(works.getSizeRuleHeight() == null ? "" : works.getSizeRuleHeight().toString());
         tmp.setSizeRule(SizeRule.toString());
         tmp.setArtId(works.getArtistId());
         tmp.setAuthor(artist.getCname());
         tmp.setCnName(works.getWorksCName());
         tmp.setEnName(works.getWorksEName());
         artAuctionDao.update(tmp);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public void deleteArtAuction(Serializable id) throws ServiceException {
      try {
         artAuctionDao.delete(id);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public void deleteArtAuctions(Serializable[] ids) throws ServiceException {
      try {
         artAuctionDao.deleteAll(ids);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public PageQuery queryArtAuction(PageQuery pageQuery) throws ServiceException {
      try {
         createSqlFilter(pageQuery);
         return jdbcDao.queryBySqlId("artAuctionList", pageQuery);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   private void createSqlFilter(PageQuery page) {
      String tmp = "";
      Map<String, String> map = page.getParameters();
      String str = map.get("createYear");
      if (str != null && !"".equals(str.trim())) {
         if (tmp.length() > 0) tmp += " and ";
         tmp += "a.create_year like '%" + str.trim() + "%'";
      }
      str = map.get("worksName");
      if (str != null && !"".equals(str.trim())) {
         if (tmp.length() > 0) tmp += " and ";
         tmp += " (a.cn_name like '%" + str.trim() + "%' or a.en_name like '%" + str.trim() + "%' ) ";
      }
      str = map.get("cName");
      if (str != null && !"".equals(str.trim())) {
         if (tmp.length() > 0) tmp += " and ";
         tmp += "a.author like '%" + str.trim() + "%'";
      }
      str = map.get("worksId");
      if (str != null && !"".equals(str.trim())) {
         if (tmp.length() > 0) tmp += " and ";
         tmp += "a.works_id=" + str.trim();
      }
      if (tmp.length() > 0) map.put("paras", tmp);
   }

   public void createArtAuction(Map<String, Object> map, List<ArtCollectArtist> artists, List<ArtAuctionHouses> houses) throws ServiceException {
      try {
         String author = map.get("author") == null ? null : map.get("author").toString().trim();//作者
         if (author != null && !"".equals(author)) {
            String number = map.get("number") == null ? null : map.get("number").toString();//编号
            String cnName = map.get("cnName") == null ? null : map.get("cnName").toString();//作品中文名
            String enName = map.get("enName") == null ? null : map.get("enName").toString();//作品英文名
            String createYear = map.get("createYear") == null || "".equals(map.get("createYear")) ? null : map.get("createYear").toString();//创作年份
            String sizeCm = map.get("artSize") == null ? null : map.get("artSize").toString();//尺寸
            String auctionPlace = map.get("auctionPlace") == null ? null : map.get("auctionPlace").toString();//拍卖地
            String auctionTime = map.get("auctionDate") == null || "".equals(map.get("auctionDate")) ? null : map.get("auctionDate").toString();//拍卖时间
            String worksCategory = map.get("type") == null ? null : map.get("type").toString();//类别
            String auctionHouse = map.get("auctionCompany") == null ? "" : map.get("auctionCompany").toString();//拍卖行
            String nationality = map.get("country") == null ? null : map.get("country").toString();//国家
            String source = map.get("source") == null ? null : map.get("source").toString();//来源
            String auctionLocal = map.get("auctionLocal") == null ? null : map.get("auctionLocal").toString();//拍卖会
            String priceUnit = map.get("priceUnit") == null ? "" : map.get("priceUnit").toString().trim();//价格单位
            String lastPrice = map.get("lastPrice") == null || "".equals(map.get("lastPrice")) ? null : map.get("lastPrice").toString();//最底价
            String maxPrice = map.get("maxPrice") == null || "".equals(map.get("maxPrice")) ? null : map.get("maxPrice").toString();//最高价
            String price = map.get("price") == null || "".equals(map.get("price")) ? null : map.get("price").toString();//成交价
            String imageUrl = map.get("imageUrl") == null || "".equals(map.get("imageUrl")) ? null : map.get("imageUrl").toString();//图片
            String content = map.get("content") == null || "".equals(map.get("content")) ? null : map.get("content").toString();//作品描述
            Integer artistId = null;
            Integer houseId = null;
            String eName = null;

            for (ArtCollectArtist artist : artists) {
               // 查找是否能在艺术家库找到对应的艺术家
               if (author.indexOf(artist.getArtistName()) > -1) {
                  artistId = artist.getArtistId();
                  eName = artist.getArtistEnName().trim();
                  break;
               }
            }
            for (ArtAuctionHouses house : houses) {
               // 查找是否能在拍卖行库找到对应的拍卖行
               if (house.getAuctionHouse().indexOf(auctionHouse) > -1) {
                  houseId = house.getId();
                  break;
               }
            }

            String storeName = imageUrl == null ? null : imageUrl.substring(0, imageUrl.lastIndexOf("."));
            // 判断是否为图片，如果不是则不保存图片名称
            if (imageUrl != null) {
               String extension = imageUrl.substring(imageUrl.lastIndexOf(".") + 1).toLowerCase();
               if (extension.equals("jpg") || extension.equals("jpeg") || extension.equals("png") || extension.equals("gif") || extension.equals("tiff")
                     || extension.equals("bmp")) {
                  imageUrl = imageUrl == null ? null : imageUrl.substring(imageUrl.lastIndexOf("/") + 1);
               }
               else {
                  imageUrl = null;
               }
            }
            if (artistId != null) {
               //String path = File.separator + eName.trim().toLowerCase() + File.separator + "thumbnail" + File.separator;
               ArtWorks works = new ArtWorks();
               works.setArtistId(artistId);
               works.setCreateYear(createYear);
               works.setWorksCName(cnName);
               works.setWorksEName(enName);
               works.setWorksNo(number);
               works.setWorksImage(imageUrl);
               works.setWorksStoreName(storeName);
               works.setThumbnail(imageUrl);
               works.setSizeCm(sizeCm);
               works.setRepeatMarker("0");
               works.setWorksStatus(content);
               Integer worksId = (Integer) artWorksDao.save(works);
               houseId = saveAuctionHouse(auctionHouse, nationality, houseId);
               ArtAuction auction = new ArtAuction();
               auction.setArtId(artistId);
               auction.setWorksId(worksId);
               auction.setAuctionHousesId(houseId);
               auction.setAuctionNo(number);
               auction.setCreateYear(createYear);
               auction.setAuction(auctionLocal);
               auction.setAuctionTime(auctionTime == null ? null : outFormat.parse(auctionTime));
               auction.setWorksCategory(worksCategory);
               auction.setSaleName(auctionPlace);
               auction.setWorksSource(source);
               auction.setImageUrl(imageUrl == null ? null : imageUrl);
               auction.setAuctionDesc(content);
               auction.setSizeCm(sizeCm);
               auction.setAuthor(author);
               auction.setCnName(cnName);
               auction.setEnName(enName);
               auction.setAuctionNo(number);
               acuctionPrice(priceUnit, lastPrice, maxPrice, price, auction);
               artAuctionDao.save(auction);
            }
         }
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }

   }

   private void acuctionPrice(String priceUnit, String lastPrice, String maxPrice, String price, ArtAuction auction) {
      if (priceUnit.toUpperCase().indexOf("RMB") > -1) {//
         auction.setCtradePrice(price == null ? null : Double.valueOf(price));
         auction.setChighestPrice(maxPrice == null ? null : Double.valueOf(maxPrice));
         auction.setClowestPrice(lastPrice == null ? null : Double.valueOf(lastPrice));
         auction.setCtranPrice(price == null ? null : Double.valueOf(price));
      }
      if (priceUnit.toUpperCase().indexOf("HKD") > -1) {//港币
         auction.setHkTradePrice(price == null ? null : Double.valueOf(price));
         auction.setHkHighestPrice(maxPrice == null ? null : Double.valueOf(maxPrice));
         auction.setHkLowestPrice(lastPrice == null ? null : Double.valueOf(lastPrice));
         auction.setHkTranPrice(price == null ? null : Double.valueOf(price));
      }
      if (priceUnit.toUpperCase().indexOf("GBP") > -1) {//英镑
         auction.setPtradePrice(price == null ? null : Double.valueOf(price));
         auction.setPhighestPrice(maxPrice == null ? null : Double.valueOf(maxPrice));
         auction.setPlowestPrice(lastPrice == null ? null : Double.valueOf(lastPrice));
         auction.setPtranPrice(price == null ? null : Double.valueOf(price));
      }
      if (priceUnit.toUpperCase().indexOf("USD") > -1) {//美元
         auction.setDtradePrice(price == null ? null : Double.valueOf(price));
         auction.setDhighestPrice(maxPrice == null ? null : Double.valueOf(maxPrice));
         auction.setDlowestPrice(lastPrice == null ? null : Double.valueOf(lastPrice));
         auction.setDtranPrice(price == null ? null : Double.valueOf(price));
      }
      if (priceUnit.toUpperCase().indexOf("EUR") > -1) {//欧元
         auction.setEtradePrice(price == null ? null : Double.valueOf(price));
         auction.setEhighestPrice(maxPrice == null ? null : Double.valueOf(maxPrice));
         auction.setElowestPrice(lastPrice == null ? null : Double.valueOf(lastPrice));
         auction.setEtranPrice(price == null ? null : Double.valueOf(price));
      }
   }

   private Integer saveAuctionHouse(String auctionHouse, String nationality, Integer houseId) {
      if (houseId == null) {
         ArtAuctionHouses house = new ArtAuctionHouses();
         house.setAuctionHouse(auctionHouse);
         house.setNationality(nationality);
         houseId = (Integer) artAuctionHousesDao.save(house);
      }
      return houseId;
   }

   @Resource
   private ArtAuctionDao       artAuctionDao;

   @Resource
   private ArtAuctionHousesDao artAuctionHousesDao;

   @Resource
   private ArtWorksDao         artWorksDao;

   @Resource
   private ArtArtistDao        artArtistDao;

}
