package com.golead.art.literature.service.impl;

import java.io.File;
import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;
import com.golead.art.literature.dao.ArtLiteratureMediumDao;
import com.golead.art.literature.model.ArtLiteratureMedium;
import com.golead.art.literature.service.ArtLiteratureMediumService;
import com.golead.art.utils.FileUtils;

import javax.annotation.Resource; 

import org.apache.struts2.ServletActionContext;
import org.springframework.stereotype.Service;

@Service
public class ArtLiteratureMediumServiceImpl extends BaseServiceImpl implements ArtLiteratureMediumService {
	private static final long serialVersionUID = 1L;

	public ArtLiteratureMedium getArtLiteratureMedium(Serializable id) throws ServiceException {
		try {
			return artLiteratureMediumDao.get(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void createArtLiteratureMedium(ArtLiteratureMedium artLiteratureMedium ,List<File> files, String filesFileName) throws ServiceException {
		try {
			StringBuffer attachment = new StringBuffer();
			String[] attachmentNames = filesFileName.split(",");
			if (files != null) {
				for (int i = 0; i < files.size(); i++) {
					String newName = String.valueOf(System.currentTimeMillis());
					String endLess = attachmentNames[i].split("\\.")[1];
					attachment.append(newName + "." + endLess);
					if (i + 1 != files.size()) {
						attachment.append(";");
					}
				}
			}
			artLiteratureMedium.setAttachment(attachment.toString());
			artLiteratureMediumDao.save(artLiteratureMedium);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void updateArtLiteratureMedium(Map<String, String> artLiteratureMediumMap ,List<File> files, String oldsFileName, String filesFileName, String path) throws ServiceException {
		try {
            Integer pkId = new Integer(artLiteratureMediumMap.get(ArtLiteratureMedium.PROP_ID));
			ArtLiteratureMedium tmp = artLiteratureMediumDao.get(pkId);
			ConvertUtil.mapToObject(tmp, artLiteratureMediumMap, true);
			StringBuffer newAttachment = new StringBuffer(); 
			String attachment;
			String[] deleteAttachments;
			if (tmp.getAttachment() != null && !"".equals(tmp.getAttachment())) {
				attachment = tmp.getAttachment();
				deleteAttachments = attachment.replace(oldsFileName, "").split(";");
				File file = new File(path);
				File[] fileList = file.listFiles();
				if (fileList != null) {
					for (File inFile : fileList) {
						for (String deleteAttachment : deleteAttachments) {
							if (deleteAttachment.equals(inFile.getName())) {
								inFile.delete();
							}
						}
					}
					File[] fileList2 = new File(path).listFiles();
					if (fileList2.length == 0) {
						file.delete();
					}
				}
				if (oldsFileName.length() > 0) {
					newAttachment.append(oldsFileName + ";");
				}
			}
			
			if (files != null) {
				String[] attachmentNames = filesFileName.split(",");
				for (int i = 0; i < files.size(); i++) {
					File file = files.get(i);
					String newName = String.valueOf(System.currentTimeMillis());
					String endLess = attachmentNames[i].split("\\.")[1];
					FileUtils.fileUpload(path + File.separator + newName + "." + endLess, file);
					newAttachment.append(newName + "." + endLess);
					if (i + 1 != files.size()) {
						newAttachment.append(";");
					}
				}
			}
			tmp.setAttachment(newAttachment.toString());
			artLiteratureMediumDao.update(tmp);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtLiteratureMedium(Serializable id) throws ServiceException {
		try {
			artLiteratureMediumDao.delete(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtLiteratureMediums(Serializable[] ids) throws ServiceException {
		try {
			String FILE_PATH = ServletActionContext.getServletContext().getRealPath("");
			for (Serializable id : ids) {
				String path = FILE_PATH + File.separator + "upload" + File.separator + "literature" + File.separator + "medium" + File.separator + id.toString();
				File file = new File(path);
				if (file.exists()) {
					File[] fileList = file.listFiles();
					for (File inFile : fileList) {
						inFile.delete();
					}
					File[] fileList2 = file.listFiles();
					if (fileList2.length == 0) {
						file.delete();
					}
				}
			}
			artLiteratureMediumDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public PageQuery queryArtLiteratureMedium(PageQuery pageQuery) throws ServiceException {
		try {
		  createSqlFilter(pageQuery);
          return jdbcDao.queryBySqlId("artLiteratureMediumList", pageQuery);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private void createSqlFilter(PageQuery page) {
		String paras = "";
		Map<String, String> map = page.getParameters();
		String mediumTitle = map.get("mediumTitle");
		if (mediumTitle != null && !"".equals(mediumTitle)) {
			paras = " medium_title like '%" + mediumTitle.trim() + "%'";
		}
		if (paras.length() > 0) {
			page.getParameters().put("paras", paras);
		}
	}
	
    @Resource
	private ArtLiteratureMediumDao	artLiteratureMediumDao;

	public void setArtLiteratureMediumDao(ArtLiteratureMediumDao artLiteratureMediumDao) {
		this.artLiteratureMediumDao = artLiteratureMediumDao;
	}
}

