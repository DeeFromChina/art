package com.golead.art.job.service.impl;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;

import net.coobird.thumbnailator.Thumbnails;

import com.golead.art.artist.model.ArtArtist;
import com.golead.art.auction.model.ArtAuctionHouses;
import com.golead.art.job.service.CheckArtAuction;

public class ArtAuctionGeneImpl extends BaseCheckAuctionImpl implements CheckArtAuction {

   public void executeCheck() throws Exception {
      // 采集数据
      List<Map<String, Object>> list = new DataCollectHandler().executeCollect();
      // 艺术家库
      List<ArtArtist> artists = artArtistDao.findAll();
      /**if (list != null && list.size() > 0) {
         for (Map<String, Object> map : list) {
            // 拍卖行库
            List<ArtAuctionHouses> houses = artAuctionHousesDao.findAll();
            artAuctiosService.createArtAuction(map, artists, houses);
         }
      }**/
      // 下载图片
      download(list, artists);
   }

   public void download(List<Map<String, Object>> list, List<ArtArtist> artists) throws Exception {
      String path = System.getProperty("artApplication.root") + "upload/auction/";
      String tmpPath = "";
      for (Map<String, Object> map : list) {
         String author = map.get("author") == null ? "" : map.get("author").toString();//作者
         String eName = null;
         for (ArtArtist artist : artists) {
            // 查找是否能在艺术家库找到对应的艺术家
            if (artist.getCname().indexOf(author) > -1 || artist.getEname().indexOf(author) > -1) {
               eName = artist.getEname();
               break;
            }
         }
         if (eName != null) {
            tmpPath = path + File.separator + eName.trim().toLowerCase();
            File file = new File(tmpPath);
            // 判断文件夹是否存在，不存在则新建
            if (!file.exists()) file.mkdir();
            
            file = new File(tmpPath + File.separator + "thumbnail");
            // 判断文件夹是否存在，不存在则新建
            if (!file.exists()) file.mkdir();
         }
         try {
            String imageUrl = map.get("imageUrl") == null ? null : map.get("imageUrl").toString();//图片
            if (imageUrl != null) {
               String imageName = imageUrl.substring(imageUrl.lastIndexOf("/") + 1);
               String imagePath = tmpPath + File.separator + imageName;
               String extension = imageUrl.substring(imageUrl.lastIndexOf(".") + 1).toLowerCase();
               if (extension.equals("jpg") || extension.equals("jpeg") || extension.equals("png") || extension.equals("gif") || extension.equals("tiff")
                     || extension.equals("bmp")) {
                  byte[] btImg = getImageFromNetByUrl(imageUrl);
                  if (null != btImg && btImg.length > 0) {
                     writeImageToDisk(btImg, imagePath);

                     BufferedImage bufferedImage = ImageIO.read(new File(imagePath));
                     int width = bufferedImage.getWidth();
                     int height = bufferedImage.getHeight();
                     //压缩计算  
                     float resizeTimes = 0.3f; //这个参数是要转化成的倍数,如果是1就是转化成1倍

                     // 调整后的图片的宽度和高度 
                     int toWidth = (int) (width * resizeTimes);
                     int toHeight = (int) (height * resizeTimes);
                     Thumbnails.of(imagePath).size(toWidth, toHeight).outputFormat(extension).outputQuality(0.6f)
                           .toFile(tmpPath + File.separator + "thumbnail/" + imageName);//保存小图
                  }
               }
            }
         }
         catch (MalformedURLException e) {
            e.printStackTrace();
         }
         catch (IOException e) {
            e.printStackTrace();
         }
      }
   }

   /**
    * 将图片写入到磁盘
    * 
    * @param img
    *           图片数据流
    * @param fileName
    *           文件保存时的名称
    */
   public static void writeImageToDisk(byte[] img, String fileName) {
      try {
         File file = new File(fileName);
         FileOutputStream fops = new FileOutputStream(file);
         fops.write(img);
         fops.flush();
         fops.close();
      }
      catch (Exception e) {
         e.printStackTrace();
      }
   }

   /**
    * 根据地址获得数据的字节流
    * 
    * @param strUrl
    *           网络连接地址
    * @return
    */
   private byte[] getImageFromNetByUrl(String strUrl) {
      try {
         URL url = new URL(strUrl);
         HttpURLConnection conn = (HttpURLConnection) url.openConnection();
         conn.setRequestMethod("GET");
         conn.setConnectTimeout(5 * 1000);
         InputStream inStream = conn.getInputStream();//通过输入流获取图片数据  
         byte[] btImg = readInputStream(inStream);//得到图片的二进制数据  
         return btImg;
      }
      catch (Exception e) {
         e.printStackTrace();
      }
      return null;
   }

   /**
    * 从输入流中获取数据
    * 
    * @param inStream
    *           输入流
    * @return
    * @throws Exception
    */
   private byte[] readInputStream(InputStream inStream) throws Exception {
      ByteArrayOutputStream outStream = new ByteArrayOutputStream();
      byte[] buffer = new byte[1024];
      int len = 0;
      while ((len = inStream.read(buffer)) != -1) {
         outStream.write(buffer, 0, len);
      }
      inStream.close();
      return outStream.toByteArray();
   }

}
