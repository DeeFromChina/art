package com.golead.art.artist;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.golead.art.artist.model.ArtArtistExperience;
import com.golead.art.artist.service.ArtArtistExperienceService;
import com.golead.common.service.system.SysUserService;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.util.ConvertUtil;
import com.golead.core.web.action.BaseAction;

public class ArtistExperienceAction extends BaseAction {
	
	private Log log = LogFactory.getLog(ArtArtistExperienceService.class);
	
	@Resource
	private ArtArtistExperienceService artArtistExperienceService;
	
	@Resource
	private SysUserService sysUserService;

	@Override
	public String doExecute() throws Exception {
		String forward = "";
		String action = getForm().getAction();
		
		if (action == null) {
			forward = LIST;
		}
		try {
			if (LIST.equalsIgnoreCase(action)) forward = listExperience();
			else if (PAGE.equalsIgnoreCase(action)) forward = pageExperience();
			else if (ADD.equalsIgnoreCase(action)) forward = addExperience();
			else if (SAVE.equalsIgnoreCase(action)) forward = saveExperience();
			else if (EDIT.equalsIgnoreCase(action)) forward = editExperience();
			else if (UPDATE.equalsIgnoreCase(action)) forward = updateExperience();
			else if (DELETE.equalsIgnoreCase(action)) forward = deleteExperience();
			else if (VIEW.equalsIgnoreCase(action)) forward = viewExperience();
		} catch (Exception e) {
			e.printStackTrace();
			request.put("errMsg", e.getMessage());
			forward = ERROR;
		}
		return forward;
	}
	
	public String listExperience() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'list()' method");
		initForm();
		return LIST;
	}
	
	public String pageExperience() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'pageExperience()' method");
		try {
			initForm();
			PageQuery pq = form.getQuery();
			String artistId = getForm().getRecord().get("artistId");
			pq.getParameters().put("artistId", artistId);
			pq = artArtistExperienceService.queryArtArtistExperience(pq);
			List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();
			for (Map<String, Object> item : pq.getRecordSet()) {
				Map<String, Object> map = new HashMap<String, Object>();
				String artistLink = "^javascript:view(" + item.get("id") + ")^_self";
				map.put("id", item.get("id"));
				map.put("data", new Object[]{
					""
					,item.get("year") + artistLink 
					,item.get("cExperience")
					,item.get("eExperience")
				});
				list.add(map);
			}
			String res = genGridJson(pq, list);
			setResponse(res);
		} catch (ServiceException e) {
			setResponse("{exit:1,message:\"" + e.getMessage() + "\"}");
		} catch (Exception e) {
			e.printStackTrace();
			setResponse("{exit:1,message:\"数据访问错误。\"}");
		}
		return null;
	}
	
	public String addExperience() throws Exception {
		if (log.isDebugEnabled()) log.debug("Entering 'addExperience()' method");
		String forward = null;
		try {
			initForm();
			return ADD;
		} catch (Exception e) {
			e.printStackTrace();
			forward = ERROR;
		}
		return forward;
	}
	
	public String saveExperience() throws Exception {
		if (log.isDebugEnabled()) log.debug("Entering 'saveExperience()' method");
		try {
			initForm();
			ArtArtistExperience artArtistExperience = new ArtArtistExperience();
			artArtistExperience.setArtId(Integer.valueOf(getForm().getRecord().get("artistId")));
			artArtistExperience.setYear(getForm().getRecord().get("year"));
			artArtistExperience.setCexperience(getForm().getRecord().get("cExperience"));
			artArtistExperience.setEexperience(getForm().getRecord().get("eExperience"));
			artArtistExperienceService.createArtArtistExperience(artArtistExperience);
			return returnForward(RETURN_NORMAL);
		} catch (ServiceException e) {
			addMessage(getForm(), e.getMessage());
			return ADD;
		} catch (Exception e) {
			e.printStackTrace();
			addMessage(getForm(), "保存操作失败!");
			return ADD;
		}
	}
	
	public String editExperience() throws Exception {
		if (log.isDebugEnabled()) log.debug("Entering 'editExperience()' method");
		String forward = null;
		try {
			initForm();
			int id = Integer.valueOf(getForm().getRecord().get("id"));
			ArtArtistExperience artArtistExperience = artArtistExperienceService.getArtArtistExperience(id);
			ConvertUtil.objectToMap(getForm().getRecord(), artArtistExperience);
			return EDIT;
		} catch (Exception e) {
			e.printStackTrace();
			forward = ERROR;
		}
		return forward;
	}
	
	public String updateExperience() throws Exception {
		if (log.isDebugEnabled()) log.debug("Entering 'updateExperience()' method");
		try {
			initForm();
			artArtistExperienceService.updateArtArtistExperience(getForm().getRecord());
			return returnForward(RETURN_NORMAL);
		} catch (Exception e) {
			addMessage(form, e.getMessage());
			initForm();
			return EDIT;
		}
	}
	
	public String deleteExperience() throws Exception {
		if (log.isDebugEnabled()) log.debug("Entering 'deleteExperience()' method");
		try {
			String[] id = ids.split(",");
			Integer[] del_ids = new Integer[id.length];
			for (int i = 0; i < id.length; i++) {
				del_ids[i] = Integer.valueOf(id[i]);
			}
			artArtistExperienceService.deleteArtArtistExperiences(del_ids);
		} catch (Exception e) {
			initForm();
			return ERROR;
		}
		return pageExperience();
	}
	
	public String viewExperience() throws Exception {
		if (log.isDebugEnabled()) log.debug("Entering 'viewExperience()' method");
		try {
			initForm();
			ArtArtistExperience artArtistExperience = artArtistExperienceService.getArtArtistExperience(Integer.valueOf(ids));
			ConvertUtil.objectToMap(getForm().getRecord(), artArtistExperience);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR;
		}
		return VIEW;
	}
	
	public void initForm() throws Exception {
		setCode(getForm(), "");
	}

}
