package com.golead.art.activity.service.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;

import com.golead.art.activity.dao.ArtActivityExhibitDao;
import com.golead.art.activity.model.ArtActivityExhibit;
import com.golead.art.activity.service.ArtActivityExhibitService;
import javax.annotation.Resource; 
import org.springframework.stereotype.Service;

@Service
public class ArtActivityExhibitServiceImpl extends BaseServiceImpl implements ArtActivityExhibitService {
	private static final long serialVersionUID = 1L;

	public ArtActivityExhibit getArtActivityExhibit(Serializable id) throws ServiceException {
		try {
			return artActivityExhibitDao.get(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void createArtActivityExhibit(ArtActivityExhibit artActivityExhibit) throws ServiceException {
		try {
			artActivityExhibitDao.save(artActivityExhibit);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void updateArtActivityExhibit(Map<String, String> artActivityExhibitMap) throws ServiceException {
		try {
            Integer pkId = new Integer(artActivityExhibitMap.get(ArtActivityExhibit.PROP_ID));
			ArtActivityExhibit tmp = artActivityExhibitDao.get(pkId);
			ConvertUtil.mapToObject(tmp, artActivityExhibitMap, true);			
			artActivityExhibitDao.update(tmp);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtActivityExhibit(Serializable id) throws ServiceException {
		try {
			artActivityExhibitDao.delete(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtActivityExhibits(Serializable[] ids) throws ServiceException {
		try {
			artActivityExhibitDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public PageQuery queryArtActivityExhibit(PageQuery pageQuery) throws ServiceException {
		try {
		  createSqlFilter(pageQuery);
          return jdbcDao.queryBySqlId("artActivityExhibitList", pageQuery);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private void createSqlFilter(PageQuery page) {
	}
	
    @Resource
	private ArtActivityExhibitDao	artActivityExhibitDao;

	public void setArtActivityExhibitDao(ArtActivityExhibitDao artActivityExhibitDao) {
		this.artActivityExhibitDao = artActivityExhibitDao;
	}
}

