package com.golead.art.works.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.Serializable;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.golead.common.model.SysCode;
import com.golead.common.service.system.SysCodeService;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;
import com.golead.art.artist.model.ArtArtist;
import com.golead.art.artist.service.ArtArtistService;
import com.golead.art.works.dao.ArtWorksDao;
import com.golead.art.works.model.ArtMedium;
import com.golead.art.works.model.ArtWorks;
import com.golead.art.works.model.ArtWorksPeriod;
import com.golead.art.works.service.ArtMediumService;
import com.golead.art.works.service.ArtWorksCaseService;
import com.golead.art.works.service.ArtWorksEvaluateService;
import com.golead.art.works.service.ArtWorksPeriodService;
import com.golead.art.works.service.ArtWorksService;
import com.golead.art.works.service.ArtWorksSomeService;
import com.sun.xml.internal.bind.v2.runtime.unmarshaller.IntArrayData;

import javax.annotation.Resource; 

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.struts2.ServletActionContext;
import org.springframework.stereotype.Service;

@Service
public class ArtWorksServiceImpl extends BaseServiceImpl implements ArtWorksService {
	private static final long serialVersionUID = 1L;

	public ArtWorks getArtWorks(Serializable id) throws ServiceException {
		try {
			return artWorksDao.get(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void createArtWorks(ArtWorks artWorks) throws ServiceException {
		try {
			artWorksDao.save(artWorks);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void updateArtWorks(Map<String, String> artWorksMap) throws ServiceException {
		try {
         Integer pkId = new Integer(artWorksMap.get(ArtWorks.PROP_ID));
			ArtWorks tmp = artWorksDao.get(pkId);
			String partSize_l = artWorksMap.get("partSize_l");
         partSize_l = partSize_l.replace(" ", "");
         String partSize_w = artWorksMap.get("partSize_w");
         partSize_w = partSize_w.replace(" ", "");
         String[] partSize_ls = partSize_l.split(",");
         String[] partSize_ws = partSize_w.split(",");
         String partSize = "";
         for(int i = 0; i<partSize_ls.length; i++){
            partSize = partSize + partSize_ls[i] + "*" + partSize_ws[i] + ";";
         }
         artWorksMap.put("partSize", partSize);
			ConvertUtil.mapToObject(tmp, artWorksMap, true);			
			artWorksDao.update(tmp);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	public void updateArtWorks(ArtWorks artWorks) throws ServiceException {
	   try {
         artWorksDao.update(artWorks);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtWorks(Serializable id) throws ServiceException {
		try {
			artWorksDao.delete(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtWorkss(Serializable[] ids) throws ServiceException {
		try {
		   PageQuery pageQuery = new PageQuery();
		   List<Integer> periods = new ArrayList<Integer>(); 
		   List<Integer> cases = new ArrayList<Integer>(); 
		   List<Integer> evaluates = new ArrayList<Integer>(); 
		   List<Integer> somes = new ArrayList<Integer>(); 
		   for(Serializable id : ids){
		      pageQuery.getParameters().put("id", id.toString());
		      pageQuery.getParameters().put("worksId", id.toString());
		      pageQuery = artWorksPeriodService.queryArtWorksPeriod(pageQuery);
		      if(pageQuery.getRecordSet() != null){
	            for(Map<String, Object> item : pageQuery.getRecordSet()){
	               periods.add(Integer.valueOf(item.get("id").toString()));
	            }
		      }
		      pageQuery = artWorksCaseService.queryArtWorksCase(pageQuery);
		      if(pageQuery.getRecordSet() != null){
               for(Map<String, Object> item : pageQuery.getRecordSet()){
                  cases.add(Integer.valueOf(item.get("id").toString()));
               }
            }
		      pageQuery = artWorksEvaluateService.queryArtWorksEvaluate(pageQuery);
		      if(pageQuery.getRecordSet() != null){
		         for(Map<String, Object> item : pageQuery.getRecordSet()){
		            evaluates.add(Integer.valueOf(item.get("id").toString()));
		         }
		      }
		      pageQuery = artWorksSomeService.queryArtWorksSome(pageQuery);
		      if(pageQuery.getRecordSet() != null){
		         for(Map<String, Object> item : pageQuery.getRecordSet()){
		            somes.add(Integer.valueOf(item.get("id").toString()));
		         }
		      }
		      String path = ServletActionContext.getServletContext().getRealPath("");
		      String casePath = path + File.separator +"upload" + File.separator + "works" + File.separator + "case" + File.separator + id.toString();
		      String thumbnailPath = path + File.separator +"upload" + File.separator + "works" + File.separator + "thumbnail" + File.separator + id.toString();
		      deleteFile(casePath);
		      deleteFile(thumbnailPath);
		   }
		   Integer[] delperiods = del(periods);
		   Integer[] delcases = del(cases);
		   Integer[] delevaluates = del(evaluates);
		   Integer[] delsomes = del(somes);
		   artWorksPeriodService.deleteArtWorksPeriods(delperiods);
		   artWorksCaseService.deleteArtWorksCases(delcases);
		   artWorksEvaluateService.deleteArtWorksEvaluates(delevaluates);
		   artWorksSomeService.deleteArtWorksSomes(delsomes);
			artWorksDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private Integer[] del(List<Integer> ids){
	   Integer[] dels = new Integer[ids.size()];
	   int i = 0;
	   for(Integer id : ids){
	      dels[i] = id;
	      i++;
	   }
	   return dels;
 	}
	
	private void deleteFile(String path) throws Exception{
	   try {
         File file = new File(path);
         if(file.exists()){
            File[] files = file.listFiles();
            for(File childFile : files){
               if(childFile.isFile()){
                  childFile.delete();
               }else{
                  deleteFile(childFile.getPath());
               }
            }
            File[] files2 = new File(path).listFiles();
            if(files2.length == 0){
               file.delete();
            }
         }
      }
      catch (Exception e) {
         e.printStackTrace();
      }
	}

	public PageQuery queryArtWorks(PageQuery pageQuery) throws ServiceException {
		try {
		  createSqlFilter(pageQuery);
          return jdbcDao.queryBySqlId("artWorksList", pageQuery);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private void createSqlFilter(PageQuery page) {
	   String paras = " 1=1 ";
      Map<String, String> map = page.getParameters();
      
      String artist = map.get("artist");
      if (artist != null && artist.trim().length() > 0) {
         paras += " AND artist.c_name like '%" + artist.trim() + "%'" 
               + " OR artist.e_name like '%" + artist.trim() + "%'";
      }
      
      String code = map.get("code");
      if (code != null && code.trim().length() > 0) {
         paras += " AND works.works_no like '%" + code.trim() + "%'";
      }
      
      String name = map.get("name");
      if (name != null && name.trim().length() > 0) {
         paras += " AND (works.works_c_name like '%" + name.trim() + "%'" 
               + " OR works.works_e_name like '%" + name.trim() + "%')";
      }

      String artType = map.get("artType");
      if (artType != null && artType.trim().length() > 0) {
         paras += " AND works.works_category = '" + artType.trim() + "'";
      }
      
      if (paras.length() > 0) page.getParameters().put("paras", paras);
	}

   public String importArtWorks(String path) throws ServiceException{
      String message = "";
      try {
         List<ArtArtist> artArtists = artArtistService.findAllArtArtist();
         Map<String, String> artistMap = new HashMap<String, String>();
         for(ArtArtist artArtist : artArtists){
            artistMap.put(artArtist.getCname(), artArtist.getId().toString());
            artistMap.put(artArtist.getEname(), artArtist.getId().toString());
         }
         List<ArtMedium> material = artMediumService.findByCategory("1");
         Map<String, String> materialMap = new HashMap<String, String>();
         for(ArtMedium artMedium : material){
            materialMap.put(artMedium.getMediumName(), artMedium.getId().toString());
         }
         List<ArtMedium> shape = artMediumService.findByCategory("2");
         Map<String, String> shapeMap = new HashMap<String, String>();
         for(ArtMedium artMedium : shape){
            shapeMap.put(artMedium.getMediumName(), artMedium.getId().toString());
         }
         List<SysCode> sysCodes = sysCodeService.findCodeBySetId(19);
         Map<String, String> map = new HashMap<String, String>();
         for(SysCode sysCode : sysCodes){
            map.put(sysCode.getItemName(), sysCode.getItemValue());
            map.put(sysCode.getItemValue(), sysCode.getItemName());
         }
         sysCodes = sysCodeService.findCodeBySetId(15);
         Map<String, String> artType = new HashMap<String, String>();
         for(SysCode sysCode : sysCodes){
            artType.put(sysCode.getItemName(), sysCode.getItemValue());
         }
         InputStream is = new FileInputStream(path);
         HSSFWorkbook hssfWorkbook = new HSSFWorkbook(is);
         // 循环工作表Sheet
         HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(0);
         if (hssfSheet != null) {
            for (int rowNum = 2; rowNum <= hssfSheet.getLastRowNum(); rowNum++) {
               HSSFRow hssfRow = hssfSheet.getRow(rowNum);
               if (hssfRow == null) continue;
               
               ArtWorks artWorks = new ArtWorks();
               if(hssfRow.getCell(0) == null){
                  message = "成功操作到第" + String.valueOf(rowNum-1) + "行";
                  break;
               }
               if("".equals(getValue(hssfRow.getCell(0)))){
                  message = "成功操作到第" + String.valueOf(rowNum-1) + "行";
                  break;
               }
               //艺术家中文名
               String artist = getValue(hssfRow.getCell(0));
               if(artistMap.get(artist) == null){
                  message = "第" + String.valueOf(rowNum) + "行找不到艺术家";
                  break;
               }
               Integer artistId = Integer.valueOf(artistMap.get(artist));
               artWorks.setArtistId(artistId);
               //作品编号
               String worksNo = getValue(hssfRow.getCell(1));
               if("".equals(worksNo)){
                  message = "第" + String.valueOf(rowNum) + "行作品编号不能为空";
                  break;
               }
               artWorks.setWorksNo(worksNo);
               //创作时间
               String time = getValue(hssfRow.getCell(2));
               if("".equals(time)){
                  message = "第" + String.valueOf(rowNum) + "行创作时间不能为空";
                  break;
               }
               Date createTime = hssfRow.getCell(2).getDateCellValue();
               artWorks.setCreateTime(createTime);
               //创作时期
               String createPeriod = getValue(hssfRow.getCell(3));
               if("".equals(createPeriod)){
                  message = "第" + String.valueOf(rowNum) + "行创作时期不能为空";
                  break;
               }
               artWorks.setCreatePeriod(createPeriod);
               //作品系列
               String worksSeries = getValue(hssfRow.getCell(4));
               if("".equals(worksNo)){
                  message = "第" + String.valueOf(rowNum) + "行作品系列不能为空";
                  break;
               }
               artWorks.setWorksSeries(worksSeries);
               //作品中文名
               String worksCName = getValue(hssfRow.getCell(5));
               if("".equals(worksCName)){
                  message = "第" + String.valueOf(rowNum) + "行作品中文名不能为空";
                  break;
               }
               artWorks.setWorksCName(worksCName);
               //作品英文名
               String worksEName = getValue(hssfRow.getCell(6));
               if("".equals(worksEName)){
                  message = "第" + String.valueOf(rowNum) + "行作品英文名不能为空";
                  break;
               }
               artWorks.setWorksEName(worksEName);
               //国内媒介(材料)
               String mediumMaterial = getValue(hssfRow.getCell(7));
               if(materialMap.get(mediumMaterial) == null){
                  message = "第" + String.valueOf(rowNum) + "行找不到国内媒介(材料)";
                  break;
               }
               artWorks.setMediumMaterial(Integer.valueOf(materialMap.get(mediumMaterial)));
               //国内媒介（形式）
               String mediumShape = getValue(hssfRow.getCell(8));
               if(shapeMap.get(mediumShape) == null){
                  message = "第" + String.valueOf(rowNum) + "行找不到国内媒介（形式）";
                  break;
               }
               artWorks.setMediumShape(Integer.valueOf(shapeMap.get(mediumShape)));
               //尺寸(厘米)
               String sizeCm = getValue(hssfRow.getCell(9));
               if("".equals(sizeCm)){
                  message = "第" + String.valueOf(rowNum) + "行尺寸(厘米)不能为空";
                  break;
               }
               artWorks.setSizeCm(sizeCm);
               //尺寸(英寸)
               String sizeIn = getValue(hssfRow.getCell(10));
               if("".equals(sizeIn)){
                  message = "第" + String.valueOf(rowNum) + "行尺寸(英寸)不能为空";
                  break;
               }
               artWorks.setSizeIn(sizeIn);
               //尺寸(尺)
               String sizeRule = getValue(hssfRow.getCell(11));
               if("".equals(sizeRule)){
                  message = "第" + String.valueOf(rowNum) + "行尺寸(尺)不能为空";
                  break;
               }
               artWorks.setSizeRule(sizeRule);
               //签名内容1
               String signatureContent = getValue(hssfRow.getCell(12));
               if("".equals(signatureContent)){
                  message = "第" + String.valueOf(rowNum) + "行签名内容1不能为空";
                  break;
               }
               artWorks.setSignatureContent(signatureContent);
               //签名位置1
               String signature = getValue(hssfRow.getCell(13));
               if(map.get(signature) == null){
                  message = "第" + String.valueOf(rowNum) + "行找不到签名位置1";
                  break;
               }
               artWorks.setSignature(map.get(signature));
               if(signature.length() == 2){
                  artWorks.setSignature(signature);
               }
               //签名内容2
               String signatureContent2 = getValue(hssfRow.getCell(14));
               if("".equals(signatureContent2)){
                  message = "第" + String.valueOf(rowNum) + "行签名内容2不能为空";
                  break;
               }
               artWorks.setSignatureContent2(signatureContent2);
               //签名位置2
               String signature2 = getValue(hssfRow.getCell(15));
               if(map.get(signature2) == null){
                  message = "第" + String.valueOf(rowNum) + "行找不到签名位置2";
                  break;
               }
               artWorks.setSignature2(map.get(signature2));
               if(signature2.length() == 2){
                  artWorks.setSignature2(signature2);
               }
               //签名内容3
               String signatureContent3 = getValue(hssfRow.getCell(16));
               if("".equals(signatureContent3)){
                  message = "第" + String.valueOf(rowNum) + "行签名内容3不能为空";
                  break;
               }
               artWorks.setSignatureContent3(signatureContent3);
               //签名位置3
               String signature3 = getValue(hssfRow.getCell(17));
               if(map.get(signature3) == null){
                  message = "第" + String.valueOf(rowNum) + "行找不到签名位置3";
                  break;
               }
               artWorks.setSignature3(map.get(signature3));
               if(signature3.length() == 2){
                  artWorks.setSignature3(signature3);
               }
               //作品类别
               String worksCategory = getValue(hssfRow.getCell(18));
               if(artType.get(worksCategory) == null){
                  message = "第" + String.valueOf(rowNum) + "行找不到作品类别";
                  break;
               }
               artWorks.setWorksCategory(artType.get(worksCategory));
               //作品题材
               String worksTheme = getValue(hssfRow.getCell(19));
               if("".equals(worksTheme)){
                  message = "第" + String.valueOf(rowNum) + "行作品题材不能为空";
                  break;
               }
               artWorks.setWorksTheme(worksTheme);
               //风格技法内容描述
               String styleContent = getValue(hssfRow.getCell(20));
               if("".equals(styleContent)){
                  message = "第" + String.valueOf(rowNum) + "行风格技法内容描述不能为空";
                  break;
               }
               artWorks.setStyleContent(styleContent);
               //创作地点
               String createPlace = getValue(hssfRow.getCell(21));
               if("".equals(createPlace)){
                  message = "第" + String.valueOf(rowNum) + "行创作地点不能为空";
                  break;
               }
               artWorks.setCreatePlace(createPlace);
               //创作事由
               String createCause = getValue(hssfRow.getCell(22));
               if("".equals(createCause)){
                  message = "第" + String.valueOf(rowNum) + "行创作事由不能为空";
                  break;
               }
               artWorks.setCreateCause(createCause);
               //背景故事
               String backStory = getValue(hssfRow.getCell(23));
               if("".equals(backStory)){
                  message = "第" + String.valueOf(rowNum) + "行背景故事不能为空";
                  break;
               }
               artWorks.setBackStory(backStory);
               //创作时间段，开始年份
               String createFrom = getValue(hssfRow.getCell(24));
               if("".equals(createFrom)){
                  message = "第" + String.valueOf(rowNum) + "行创作时间段，开始年份不能为空";
                  break;
               }
               artWorks.setCreateFrom(createFrom);
               //创作时间段，结束年份
               String createTo = getValue(hssfRow.getCell(25));
               if("".equals(createTo)){
                  message = "第" + String.valueOf(rowNum) + "行创作时间段，结束年份不能为空";
                  break;
               }
               artWorks.setCreateTo(createTo);
               //局部尺寸（多个以;隔开）
               String partSize = getValue(hssfRow.getCell(26));
               if("".equals(partSize)){
                  message = "第" + String.valueOf(rowNum) + "行局部尺寸（多个以;隔开）不能为空";
                  break;
               }
               artWorks.setPartSize(partSize);
               //作品地位
               String worksStatus = getValue(hssfRow.getCell(27));
               if("".equals(worksStatus)){
                  message = "第" + String.valueOf(rowNum) + "行作品地位不能为空";
                  break;
               }
               artWorks.setWorksStatus(worksStatus);
               createArtWorks(artWorks);
            }
         }
      }
      catch (Exception e) {
         e.printStackTrace();
      }
      File file = new File(path);
      if(file.exists() && file.isFile()){
         file.delete();
      }
      return message;
   }
   
   private String getValue(HSSFCell hssfCell) {
      if (hssfCell.getCellType() == hssfCell.CELL_TYPE_BOOLEAN) {
         // 返回布尔类型的值   
         return String.valueOf(hssfCell.getBooleanCellValue());
      }
      else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_NUMERIC) {
         // 返回数值类型的值  
         DecimalFormat df = new DecimalFormat("0");
         return df.format(hssfCell.getNumericCellValue());
      }
      else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_FORMULA) {
         // 返回数值类型的值  
         return String.valueOf(hssfCell.getNumericCellValue());
      }
      else {
         // 返回字符串类型的值      
         return String.valueOf(hssfCell.getStringCellValue());
      }
   }
   
   public List<ArtWorks> findAll() throws ServiceException{
      try {
           return artWorksDao.findAll();
         } catch (DAOException e) {
           e.printStackTrace();
           throw new ServiceException("数据库操作错误。");
         } catch (ServiceException se) {
           se.printStackTrace();
           throw se;
         } catch (Exception e) {
           e.printStackTrace();
           throw new ServiceException("系统错误。");
         }
   }
	
	@Resource
	private ArtWorksPeriodService	artWorksPeriodService;
	
	@Resource
	private ArtWorksEvaluateService	artWorksEvaluateService;
	
	@Resource
	private ArtWorksCaseService	artWorksCaseService;
	
	@Resource
	private ArtWorksSomeService	artWorksSomeService;
	
	@Resource
	private ArtArtistService	artArtistService;
	
	@Resource
	private ArtMediumService	artMediumService;
	
	@Resource
	private SysCodeService	sysCodeService;
	
    @Resource
	private ArtWorksDao	artWorksDao;

	public void setArtWorksDao(ArtWorksDao artWorksDao) {
		this.artWorksDao = artWorksDao;
	}
}

