package com.golead.art.photo.service.impl;

import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;
import com.golead.art.artist.dao.ArtArtistDao;
import com.golead.art.artist.model.ArtArtist;
import com.golead.art.artist.service.ArtArtistService;
import com.golead.art.photo.dao.ArtPhotoDao;
import com.golead.art.photo.model.ArtPhoto;
import com.golead.art.photo.service.ArtPhotoService;
import com.golead.art.publication.dao.ArtPublicationDao;
import com.golead.art.publication.model.ArtPublication;
import com.golead.art.utils.FileUtils;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

@Service
public class ArtPhotoServiceImpl extends BaseServiceImpl implements ArtPhotoService {
   private static final long serialVersionUID = 1L;

   public ArtPhoto getArtPhoto(Serializable id) throws ServiceException {
      try {
         return artPhotoDao.get(id);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public void createArtPhoto(Map<String, String> artPhotoMap, File file, String fileName, String path) throws ServiceException {
      try {
         List<File> files = new ArrayList<File>();
         files.add(file);
         artPhotoMap.putAll(saveFile(artPhotoMap, files, fileName, path));
         ArtPhoto artPhoto = new ArtPhoto();
         ConvertUtil.mapToObject(artPhoto, artPhotoMap, false);
         artPhotoDao.save(artPhoto);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   private String parentPath(String artistId) {
      List<ArtArtist> artArtists = artArtistDao.findByField(ArtArtist.PROP_ID, Integer.valueOf(artistId));
      if (artArtists == null || artArtists.size() == 0) { return ""; }
      if (artArtists.get(0).getEname() == null || "".equals(artArtists.get(0).getEname().trim())) { return ""; }
      return artArtists.get(0).getEname().toLowerCase();
   }

   public Map<String, String> saveFile(Map<String, String> artPhotoMap, List<File> files, String filesFileName, String FILE_PATH) throws ServiceException {
      try {
         String[] names = filesFileName.split(",");
         String parentPath = FILE_PATH + File.separator;
         if (artPhotoMap.get("pubId") != null && !"".equals(artPhotoMap.get("pubId"))) {
            List<ArtPublication> artPublications = artPublicationDao.findByField(ArtPublication.PROP_ID, Integer.valueOf(artPhotoMap.get("pubId").toString()));
            if (artPublications == null || artPublications.size() == 0) { return artPhotoMap; }
            parentPath = parentPath + parentPath(artPublications.get(0).getArtistId().toString());
            artPhotoMap.put("artistId", artPublications.get(0).getArtistId().toString());
         }
         else if (artPhotoMap.get("artistId") != null && !"".equals(artPhotoMap.get("artistId"))) {
            parentPath = parentPath + parentPath(artPhotoMap.get("artistId"));
         }
         if (parentPath.trim().equals(FILE_PATH)) { return artPhotoMap; }
         if (!new File(parentPath).exists()) {
            new File(parentPath).mkdirs();
         }
         String path = parentPath;
         StringBuffer fileName = new StringBuffer();
         if (files != null) {
            for (int i = 0; i < files.size(); i++) {
               if (files.get(i) == null) {
                  break;
               }
               File file = files.get(i);
               String cName = String.valueOf(System.currentTimeMillis());
               String endless = names[i].substring(names[i].lastIndexOf(".") + 1);
               FileUtils.fileUpload(path + File.separator + cName + "." + endless, file);
               fileName.append(cName + "." + endless);
               if ((i + 1) != files.size()) fileName.append(",");
            }
         }
         artPhotoMap.put("photo", fileName.toString());
         return artPhotoMap;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public void updateArtPhoto(Map<String, String> artPhotoMap) throws ServiceException {
      try {
         Integer pkId = new Integer(artPhotoMap.get(ArtPhoto.PROP_ID));
         ArtPhoto tmp = artPhotoDao.get(pkId);
         ConvertUtil.mapToObject(tmp, artPhotoMap, true);
         artPhotoDao.update(tmp);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public void deleteArtPhoto(Serializable id) throws ServiceException {
      try {
         artPhotoDao.delete(id);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public void deleteArtPhotos(Serializable[] ids) throws ServiceException {
      try {
         artPhotoDao.deleteAll(ids);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public PageQuery queryArtPhoto(PageQuery pageQuery) throws ServiceException {
      try {
         createSqlFilter(pageQuery);
         return jdbcDao.queryBySqlId("artPhotoList", pageQuery);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   private void createSqlFilter(PageQuery page) {
   }

   @Resource
   private ArtPhotoDao       artPhotoDao;

   @Resource
   private ArtPublicationDao artPublicationDao;

   @Resource
   private ArtArtistDao      artArtistDao;

   public void setArtPhotoDao(ArtPhotoDao artPhotoDao) {
      this.artPhotoDao = artPhotoDao;
   }
}
