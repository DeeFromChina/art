package com.golead.art.artist;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.StrutsStatics;

import com.golead.art.artist.model.ArtArtist;
import com.golead.art.artist.service.ArtArtistService;
import com.golead.art.util.service.AdministrativeDivisionService;
import com.golead.art.utils.FileUtils;
import com.golead.common.service.system.SysUserService;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.util.ConvertUtil;
import com.golead.core.web.action.BaseAction;

public class ArtistInformationAction extends BaseAction {

	private Log log = LogFactory.getLog(ArtistInformationAction.class);

	private final static SimpleDateFormat dateFormate = new SimpleDateFormat("yyyy-MM-dd");
	public static String FILE_PATH = ServletActionContext.getServletContext().getRealPath("");
	private File files;
	private String filesFileName;
	private List<Map<String, String>> pic = new ArrayList<Map<String, String>>();
	
	private int id;
	
	@Resource
	private ArtArtistService artArtistService;

	@Resource
	private AdministrativeDivisionService administrativeDivisionService;

	@Resource
	private SysUserService sysUserService;

	@Override
	public String doExecute() throws Exception {
		String forward = "";
		String action = getForm().getAction();
		
		if (action == null) {
			action = LIST;
		}
		if (log.isDebugEnabled())
			log.debug("action" + action);
		try {
			if (LIST.equalsIgnoreCase(action)) forward = listArtist();
			else if (PAGE.equalsIgnoreCase(action)) forward = page();
			else if (ADD.equalsIgnoreCase(action)) forward = addArtist();
			else if (SAVE.equalsIgnoreCase(action)) forward = saveArtist();
			else if (EDIT.equalsIgnoreCase(action)) forward = editArtist();
			else if (UPDATE.equalsIgnoreCase(action)) forward = updateArtist();
			else if (DELETE.equalsIgnoreCase(action)) forward = deleteArtist();
			else if (VIEW.equalsIgnoreCase(action)) forward = viewArtist();
			else if ("BIRTHPLACELIST".equalsIgnoreCase(action) || "BIRTHPLACE".equalsIgnoreCase(action)) forward = placeList(action);
			else if ("ANCESTRALHOMELIST".equalsIgnoreCase(action) || "ANCESTRALHOME".equalsIgnoreCase(action)) forward = placeList(action);
			else if ("NHOMLIST".equalsIgnoreCase(action) || "NHOM".equalsIgnoreCase(action)) forward = placeList(action);//三个方法是一样的
			else if ("SHOW".equalsIgnoreCase(action)) forward = showPhoto();
		} catch (Exception e) {
			e.printStackTrace();
			request.put("errMsg", e.getMessage());
			forward = ERROR;
		}
		return forward;
	}
	
	public String listArtist() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'list()' method");
		initForm();
		return LIST;
	}

	public String page() throws Exception{
		if (log.isDebugEnabled()) log.debug("Entering 'page()' method");
		try {
			initForm();
			PageQuery pq = form.getQuery();
			pq = artArtistService.queryArtArtist(pq);
			List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
			for (Map<String, Object> item : pq.getRecordSet()) {
				Map<String, Object> map = new HashMap<String, Object>();
				String artistLink = "^javascript:view(" + item.get("id") +");^_self";
				
				String birthplaceCode = item.get("birthplace").toString();
				List<Map<String, Object>> list1 = administrativeDivisionService.findNameByCode(birthplaceCode); 
				String birthplaceName = "";
				if (birthplaceCode.length() < 2)
					birthplaceName += list1.get(0).get("area_name").toString();
				else {
					birthplaceName = administrativeDivisionService.findNameByCode(birthplaceCode.substring(0, 2)).get(0).get("area_name") + " · ";
					birthplaceName += list1.get(0).get("area_name").toString();
				}
				
				String nhomCode = item.get("nhom").toString();
				List<Map<String, Object>> list3 = administrativeDivisionService.findNameByCode(nhomCode);
				String nhomName = "";
				if (nhomCode.length() < 2)
					nhomName += list3.get(0).get("area_name").toString();
				else {
					nhomName = administrativeDivisionService.findNameByCode(nhomCode.substring(0,2)).get(0).get("area_name").toString() + " · ";
					nhomName += list3.get(0).get("area_name").toString();
				}
				
				map.put("id", item.get("id"));
				map.put("data", new Object[] {
						""
						,item.get("cName") + "(" + item.get("eName") + ")"+ artistLink
						,findCodeName(getForm(), "GENDER", String.valueOf(item.get("sex")))
						,birthplaceName
						,formateDate(item.get("birthdate"))
						,nhomName
						,item.get("nationality")
						,findCodeName(getForm(), "ARTIST_TYPE", String.valueOf(item.get("artistType")))
						,findCodeName(getForm(), "ZODIAC", String.valueOf(item.get("zodiac")))
				});
				list.add(map);
			}
			String res = genGridJson(pq, list);
			setResponse(res);
			
		} catch (ServiceException e) {
			setResponse("{exit:1,message:\"" + e.getMessage() + "\"}");
		} catch (Exception e) {
			e.printStackTrace();
			setResponse("{exit:1,message:\"数据访问错误。\"}");
		}
		return null;
	}

	public String addArtist() throws Exception {
		if(log.isDebugEnabled())
			log.debug("Entering 'addArtist()' method");
		String forward = null;
		try {
			initForm();
			return ADD;
		} catch (Exception e) {
			e.printStackTrace();
			forward = ERROR;
		}
		return forward;
		
	}
	
	public String saveArtist() throws Exception {
		if(log.isDebugEnabled()) log.debug("Entering 'saveArtist()' method");
		try {
			initForm();
			ArtArtist artArtist = new ArtArtist();
			ConvertUtil.mapToObject(artArtist, getForm().getRecord(), false);
			artArtist.setBirthdate(dateFormate.parse(getForm().getRecord().get("birthdate")));
			artArtist.setAncestralHome(getForm().getRecord().get("ancestralHomeCode"));
			artArtist.setBirthplace(getForm().getRecord().get("birthplaceCode"));
			artArtist.setNhom(getForm().getRecord().get("nhomCode"));
			artArtistService.createArtArtist(artArtist, files, getFilesFileName());
			String id = artArtist.getId().toString();
			getForm().getRecord().put("id", id);
			String path = FILE_PATH + File.separator +"upload" + File.separator + "artist" + File.separator +"album" + File.separator + getForm().getRecord().get("id");
			File file = new File(path);
			if(!file.exists()){
	            file.mkdirs();
			}
			String name = artArtist.getPhoto().split("/")[1];
			FileUtils.fileUpload(path + File.separator + name, files);
			return editArtist();
		} catch (ServiceException e) {
			addMessage(getForm(), e.getMessage());
			return ADD;
		} catch (Exception e) {
			e.printStackTrace();
			addMessage(getForm(), "保存操作失败!");
			return ADD;
		}
	}
	
	public String editArtist() throws Exception {
		if(log.isDebugEnabled()) log.debug("Entering 'editArtist()' method");
		String forward = null;
		try {
			initForm();
			int id = Integer.valueOf(getForm().getRecord().get("id"));
			ArtArtist artArtist = artArtistService.getArtArtist(id);
			ConvertUtil.objectToMap(getForm().getRecord(), artArtist);
			String birthplaceCode = artArtist.getBirthplace();
			List<Map<String, Object>> list1 = administrativeDivisionService.findNameByCode(birthplaceCode);
			String birthplaceName = "";
			if (birthplaceCode.length() <= 2)
				birthplaceName += list1.get(0).get("area_name").toString();
			else if (birthplaceCode.length() <= 4) {
				birthplaceName = administrativeDivisionService.findNameByCode(birthplaceCode.substring(0, 2)).get(0).get("area_name") + " · ";
				birthplaceName += list1.get(0).get("area_name").toString();
			} else {
				birthplaceName = administrativeDivisionService.findNameByCode(birthplaceCode.substring(0, 2)).get(0).get("area_name") + " · ";
				birthplaceName += administrativeDivisionService.findNameByCode(birthplaceCode.substring(0, 4)).get(0).get("area_name") + " · ";
				birthplaceName += list1.get(0).get("area_name").toString(); 
			}
			
			getForm().getRecord().put("birthplaceCode", birthplaceCode);
			getForm().getRecord().put("birthplaceName", birthplaceName);
			
			String ancestralHomeCode = artArtist.getAncestralHome();
			List<Map<String, Object>> list2 = administrativeDivisionService.findNameByCode(ancestralHomeCode);//该方法为找地方名称的
			String ancestralHomeName = "";
			if (ancestralHomeCode.length() <= 2)
				ancestralHomeName += list2.get(0).get("area_name").toString();
			else if (ancestralHomeCode.length() <= 4) {
				ancestralHomeName = administrativeDivisionService.findNameByCode(ancestralHomeCode.substring(0,2)).get(0).get("area_name").toString() + " · ";
				ancestralHomeName += list2.get(0).get("area_name").toString();
			} else {
				ancestralHomeName = administrativeDivisionService.findNameByCode(ancestralHomeCode.substring(0,2)).get(0).get("area_name").toString() + " · ";
				ancestralHomeName += administrativeDivisionService.findNameByCode(ancestralHomeCode.substring(0,4)).get(0).get("area_name").toString() + " · ";
				ancestralHomeName += list2.get(0).get("area_name").toString();
			}
			
			getForm().getRecord().put("ancestralHomeCode", ancestralHomeCode);
			getForm().getRecord().put("ancestralHomeName", ancestralHomeName);
			
			String nhomCode = artArtist.getNhom();
			List<Map<String, Object>> list3 = administrativeDivisionService.findNameByCode(nhomCode);
			String nhomName = "";
			if (nhomCode.length() <= 2)
				nhomName += list3.get(0).get("area_name").toString();
			else if (nhomCode.length() <= 4) {
				nhomName = administrativeDivisionService.findNameByCode(nhomCode.substring(0,2)).get(0).get("area_name").toString() + " · ";
				nhomName += list3.get(0).get("area_name").toString();
			} else {
				nhomName = administrativeDivisionService.findNameByCode(nhomCode.substring(0,2)).get(0).get("area_name").toString() + " · ";
				nhomName += administrativeDivisionService.findNameByCode(nhomCode.substring(0,4)).get(0).get("area_name").toString() + " · ";
				nhomName += list3.get(0).get("area_name").toString();
			}
			
			getForm().getRecord().put("nhomCode", nhomCode);
			getForm().getRecord().put("nhomName", nhomName);
			
			String picture = artArtist.getPhoto();
			if (picture != null && !("").equals(picture)) {
				String[] pictures = picture.split("/");
				Map<String, String> map = new HashMap<String, String>();
				map.put("name", pictures[0]);
				map.put("realName", pictures[1]);
				pic.add(map);
			}
			
			return EDIT;
		} catch (Exception e) {
			e.printStackTrace();
			forward = ERROR;
		}
		return forward;
	}

	public String updateArtist() throws Exception {
		if (log.isDebugEnabled()) log.debug("Entering 'updateArtist()' method");
		try {
			initForm();
			String path = FILE_PATH + File.separator +"upload" + File.separator + "artist" + File.separator +"album" + File.separator + getForm().getRecord().get("id");
			File file = new File(path);
			if(!file.exists()){
	            file.mkdirs();
			}
			getForm().getRecord().put("birthplace", getForm().getRecord().get("birthplaceCode"));
			getForm().getRecord().put("ancestralHome", getForm().getRecord().get("ancestralHomeCode"));
			getForm().getRecord().put("nhom", getForm().getRecord().get("nhomCode"));
			artArtistService.updateArtArtist(getForm().getRecord(), files, getFilesFileName(), path);
			return returnForward(RETURN_NORMAL);
		}
		catch (Exception e) {
			addMessage(form, e.getMessage());
			initForm();
			return EDIT;
		}
	}
	
	public String deleteArtist() throws Exception {
		if(log.isDebugEnabled())
			log.debug("Entering 'deleteArtist()' method");
		try {
			String[] id = ids.split(",");
			Integer[] del_ids = new Integer[id.length];
			for (int i = 0; i < id.length; i++) {
				del_ids[i] = Integer.parseInt(id[i]);
			}
			artArtistService.deleteAllWithArtArtists(del_ids);
		} catch (Exception e) {
			initForm();
			return ERROR;
		}
		return page();
	}
	
	public String viewArtist() throws Exception {
		if(log.isDebugEnabled()) log.debug("Entering 'viewArtist()' method");
		try {
			initForm();
			ArtArtist artArtist = artArtistService.getArtArtist(Integer.valueOf(ids));
			ConvertUtil.objectToMap(getForm().getRecord(), artArtist);
			String birthplaceCode = artArtist.getBirthplace();
			List<Map<String, Object>> list1 = administrativeDivisionService.findNameByCode(birthplaceCode);
			String birthplaceName = "";
			if (birthplaceCode.length() <= 2)
				birthplaceName += list1.get(0).get("area_name").toString();
			else if (birthplaceCode.length() <= 4) {
				birthplaceName = administrativeDivisionService.findNameByCode(birthplaceCode.substring(0, 2)).get(0).get("area_name") + " · ";
				birthplaceName += list1.get(0).get("area_name").toString();
			} else {
				birthplaceName = administrativeDivisionService.findNameByCode(birthplaceCode.substring(0, 2)).get(0).get("area_name") + " · ";
				birthplaceName += administrativeDivisionService.findNameByCode(birthplaceCode.substring(0, 4)).get(0).get("area_name") + " · ";
				birthplaceName += list1.get(0).get("area_name").toString(); 
			}
			
			getForm().getRecord().put("birthplaceCode", birthplaceCode);
			getForm().getRecord().put("birthplaceName", birthplaceName);
			
			String ancestralHomeCode = artArtist.getAncestralHome();
			List<Map<String, Object>> list2 = administrativeDivisionService.findNameByCode(ancestralHomeCode);//该方法为找地方名称的
			String ancestralHomeName = "";
			if (ancestralHomeCode.length() <= 2)
				ancestralHomeName += list2.get(0).get("area_name").toString();
			else if (birthplaceCode.length() <= 4) {
				ancestralHomeName = administrativeDivisionService.findNameByCode(ancestralHomeCode.substring(0,2)).get(0).get("area_name").toString() + " · ";
				ancestralHomeName += list2.get(0).get("area_name").toString();
			} else {
				ancestralHomeName = administrativeDivisionService.findNameByCode(ancestralHomeCode.substring(0,2)).get(0).get("area_name").toString() + " · ";
				ancestralHomeName += administrativeDivisionService.findNameByCode(ancestralHomeCode.substring(0,4)).get(0).get("area_name").toString() + " · ";
				ancestralHomeName += list2.get(0).get("area_name").toString();
			}
			
			getForm().getRecord().put("ancestralHomeCode", ancestralHomeCode);
			getForm().getRecord().put("ancestralHomeName", ancestralHomeName);
			
			String nhomCode = artArtist.getNhom();
			List<Map<String, Object>> list3 = administrativeDivisionService.findNameByCode(nhomCode);
			String nhomName = "";
			if (nhomCode.length() <= 2)
				nhomName += list3.get(0).get("area_name").toString();
			else if (birthplaceCode.length() <= 4) {
				nhomName = administrativeDivisionService.findNameByCode(nhomCode.substring(0,2)).get(0).get("area_name").toString() + " · ";
				nhomName += list3.get(0).get("area_name").toString();
			} else {
				nhomName = administrativeDivisionService.findNameByCode(nhomCode.substring(0,2)).get(0).get("area_name").toString() + " · ";
				nhomName += administrativeDivisionService.findNameByCode(nhomCode.substring(0,4)).get(0).get("area_name").toString() + " · ";
				nhomName += list3.get(0).get("area_name").toString();
			}
			
			getForm().getRecord().put("nhomCode", nhomCode);
			getForm().getRecord().put("nhomName", nhomName);
			
			String picture = artArtist.getPhoto();
			if (picture != null && !("").equals(picture)) {
				String[] pictures = picture.split("/");
				Map<String, String> map = new HashMap<String, String>();
				map.put("name", pictures[0]);
				map.put("realName", pictures[1]);
				pic.add(map);
			}
		} catch (Exception e) {
			initForm();
			return ERROR;
		}
		return VIEW;
	}
	
	public String placeList(String action) throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'placeList()' method");
		String forward = "";
		initForm();
		if("BIRTHPLACELIST".equalsIgnoreCase(action))
			forward = "BIRTHPLACELIST";
		else if("ANCESTRALHOMELIST".equalsIgnoreCase(action)) 
			forward = "ANCESTRALHOMELIST";
		else if("NHOMLIST".equalsIgnoreCase(action))
			forward = "NHOMLIST";
		if ("BIRTHPLACE".equalsIgnoreCase(action) || "ANCESTRALHOME".equalsIgnoreCase(action) || "NHOM".equalsIgnoreCase(action)) {
			HttpServletResponse response = (HttpServletResponse) ctx.get(StrutsStatics.HTTP_RESPONSE);
			response.setContentType("text/xml;charset=UTF-8");
			response.setHeader("Cache_Control", "no-cache");
			try {
				List<Map<String, Object>> listProvince = null;
				List<Map<String, Object>> listCity = null;
				List<Map<String, Object>> listMunicipalityOrAreaOrCounty = null;
				List<Map<String, Object>> listCounty = null;
				if (id > 0 && id < 100) {
					listCity = administrativeDivisionService.findCityByParentCode(String.valueOf(id));
					response.getWriter().write(getNodes(listCity, id));
				} else if (id > 100) {
					listMunicipalityOrAreaOrCounty = administrativeDivisionService.findMunicipalityOrAreaOrCounty(String.valueOf(id));
					if(listMunicipalityOrAreaOrCounty.size() > 0) {
						listCounty = administrativeDivisionService.findCountyByParentCode(String.valueOf(id));
						response.getWriter().write(getNodes(listCounty, id));
					}
				} else {
					listProvince = administrativeDivisionService.findAllProvince();
					response.getWriter().write(getTopNodes(listProvince));
				}
				response.getWriter().close();
			} catch (Exception e) {
		         e.printStackTrace();
			}
			forward = null;
		}
		return forward;
		
	}
	
	public String showPhoto() throws Exception {
		if (log.isDebugEnabled())
			log.debug("Entering 'showAlbum()' method");
		try {
			return "SHOW";
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR;
		}
	}
	
	public String getTopNodes(List<Map<String, Object>> list) throws Exception {
		StringBuffer sb = new StringBuffer("");
		sb.append("<?xml version='1.0' encoding='UTF-8' ?>");
		sb.append("<tree id=\"0\">");
		if (list != null) {
			for (int i = 0; i < list.size(); i++) {
				sb.append("<item id=\"" + list.get(i).get("area_code") + "\" text=\"" + list.get(i).get("area_name")
						+ "\" im0=\"../icon/house_big.gif\" im1=\"../icon/house_big.gif\" im2=\"../icon/house_big.gif\" child=\"1\">");
				sb.append("<userdata name=\"areaCode\">" + list.get(i).get("area_code") + "</userdata>");
				sb.append("<userdata name=\"areaName\">" + list.get(i).get("area_name") + "</userdata>");
				sb.append("</item>");
			}
		}
		sb.append("</tree>");
		return sb.toString();
	}
	
	public String getNodes(List<Map<String, Object>> list, int id) throws Exception {
		StringBuffer sb = new StringBuffer("");
		sb.append("<?xml version='1.0' encoding='UTF-8' ?>");
		sb.append("<tree id=\"" + id +"\">");
		String parentName = administrativeDivisionService.findNameByCode(String.valueOf(id).substring(0,2)).get(0).get("area_name").toString();
		List<Map<String, Object>> listMunicipalityOrAreaOrCounty = null;
		if (list != null) {
			for (int i = 0; i < list.size(); i++) {
				String area_code = list.get(i).get("area_code").toString();
				String parentName1 = administrativeDivisionService.findNameByCode(area_code.substring(0,4)).get(0).get("area_name").toString();
				listMunicipalityOrAreaOrCounty = administrativeDivisionService.findMunicipalityOrAreaOrCounty(area_code);
				if(listMunicipalityOrAreaOrCounty.size() > 0)
					sb.append("<item id=\"" + area_code + "\" text=\"" + list.get(i).get("area_name") + "\" im0=\"../icon/house_big.gif\" im1=\"../icon/house_big.gif\" im2=\"../icon/house_big.gif\" child=\"1\">"); 
				else 
					sb.append("<item id=\"" + area_code + "\" text=\"" + list.get(i).get("area_name") + "\" im0=\"../icon/house_big.gif\" im1=\"../icon/house_big.gif\" im2=\"../icon/house_big.gif\">");
				sb.append("<userdata name=\"areaCode\">" + list.get(i).get("area_code") + "</userdata>");
				if(area_code.length() == 6)
					sb.append("<userdata name=\"areaName\">" + parentName + " · " + parentName1 + " · " + list.get(i).get("area_name") + "</userdata>");
				else
					sb.append("<userdata name=\"areaName\">" + parentName + " · " + list.get(i).get("area_name") + "</userdata>");
				sb.append("</item>");
			}
		}
		sb.append("</tree>");
		return sb.toString();
	}

	public void initForm() throws Exception {
		setCode(getForm(), "ARTIST_TYPE,ZODIAC,GENDER");
	}
	
	private String formateDate(Object obj) {
		if(obj == null) return "";
		return dateFormate.format(obj);
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public File getFiles() {
		return files;
	}

	public void setFiles(File files) {
		this.files = files;
	}

	public String getFilesFileName() {
		return filesFileName;
	}

	public void setFilesFileName(String filesFileName) {
		this.filesFileName = filesFileName;
	}

	public List<Map<String, String>> getPic() {
		return pic;
	}

	public void setPic(List<Map<String, String>> pic) {
		this.pic = pic;
	}

}
