package com.golead.art.publication.service.impl;

import java.io.File;
import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.golead.core.common.Code;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;
import com.golead.core.web.form.BaseForm;
import com.golead.art.artist.dao.ArtArtistDao;
import com.golead.art.artist.model.ArtArtist;
import com.golead.art.publication.dao.ArtPublicationDao;
import com.golead.art.publication.model.ArtPublication;
import com.golead.art.publication.service.ArtPublicationService;
import com.golead.art.utils.FileUtils;

import javax.annotation.Resource;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Service;

@Service
public class ArtPublicationServiceImpl extends BaseServiceImpl implements ArtPublicationService {
   private static final long serialVersionUID = 1L;

   public ArtPublication getArtPublication(Serializable id) throws ServiceException {
      try {
         return artPublicationDao.get(id);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public void createArtPublication(ArtPublication artPublication, File cover, String coverFileName, File backCover, String backCoverFileName, String filePath)
         throws ServiceException {
      try {
         artPublication.setBackCover(backCoverFileName);
         artPublication.setCover(coverFileName);
         artPublicationDao.save(artPublication);
         ArtArtist artist = artArtistDao.get(artPublication.getArtistId());
         String path = filePath + File.separator + artist.getFolderName();
         File file = new File(path);
         if (!file.exists()) {
            file.mkdirs();
         }
         FileUtils.fileUpload(path + File.separator + coverFileName, cover);
         FileUtils.fileUpload(path + File.separator + backCoverFileName, backCover);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public void updateArtPublication(Map<String, String> artPublicationMap, File cover, String coverFileName, File backCover, String backCoverFileName,
         String filePath) throws ServiceException {
      try {
         Integer pkId = new Integer(artPublicationMap.get(ArtPublication.PROP_ID));
         ArtPublication tmp = artPublicationDao.get(pkId);
         ConvertUtil.mapToObject(tmp, artPublicationMap, true);
         ArtArtist artist = artArtistDao.get(tmp.getArtistId());
         String path = filePath + File.separator + artist.getFolderName();
         if (coverFileName != null && !"".equals(coverFileName)) {
            FileUtils.deleteFile(path + File.separator + tmp.getCover());
            File file = new File(path);
            if (!file.exists()) {
               file.mkdirs();
            }
            FileUtils.fileUpload(path + File.separator + coverFileName, cover);
            tmp.setCover(coverFileName);
         }
         if (backCoverFileName != null && !"".equals(backCoverFileName)) {
            FileUtils.deleteFile(path + File.separator + tmp.getBackCover());
            FileUtils.fileUpload(path + File.separator + backCoverFileName, backCover);
            tmp.setBackCover(backCoverFileName);
         }
         artPublicationDao.update(tmp);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public void deleteArtPublication(Serializable id) throws ServiceException {
      try {
         artPublicationDao.delete(id);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public void deleteArtPublications(Serializable[] ids) throws ServiceException {
      try {
         artPublicationDao.deleteAll(ids);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   public PageQuery queryArtPublication(PageQuery pageQuery) throws ServiceException {
      try {
         createSqlFilter(pageQuery);
         return jdbcDao.queryBySqlId("artPublicationList", pageQuery);
      }
      catch (DAOException e) {
         e.printStackTrace();
         throw new ServiceException("数据库操作错误。");
      }
      catch (ServiceException se) {
         se.printStackTrace();
         throw se;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   private void createSqlFilter(PageQuery page) {
      String tmp = "";
      Map<String, String> map = page.getParameters();
      String str = map.get("publicationType");
      if (str != null && !"".equals(str.trim())) {
         if (tmp.length() > 0) tmp += " and ";
         tmp += " p.publication_type ='" + str.trim() + "'";
      }
      str = map.get("artistName");
      if (str != null && !"".equals(str.trim())) {
         if (tmp.length() > 0) tmp += " and ";
         tmp += " a.c_name like '%" + str.trim() + "%'";
      }
      str = map.get("publicationYear");
      if (str != null && !"".equals(str.trim())) {
         if (tmp.length() > 0) tmp += " and ";
         tmp += " p.publication_year =" + str.trim();
      }
      str = map.get("publicationName");
      if (str != null && !"".equals(str.trim())) {
         if (tmp.length() > 0) tmp += " and ";
         tmp += " p.publication_name like '%" + str.trim() + "%'";
      }

      if (tmp.length() > 0) map.put("paras", tmp);
   }

   public List<ArtPublication> findAll() throws ServiceException {
      try {
         return artPublicationDao.findAll();
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   @SuppressWarnings("deprecation")
   public HSSFWorkbook export(BaseForm form, PageQuery pageQuery) throws ServiceException{
      try {
         HSSFWorkbook hssfWorkbook = new HSSFWorkbook();
         HSSFSheet sheet = hssfWorkbook.createSheet("sheet1");
         HSSFRow row = sheet.createRow((int) 0);  
         
         HSSFCell cell = row.createCell((short) 0);  
         cell.setCellValue("出版物名称");  
         cell = row.createCell((short) 1);  
         cell.setCellValue("艺术家");  
         cell = row.createCell((short) 2);  
         cell.setCellValue("出版机构");  
         cell = row.createCell((short) 3);  
         cell.setCellValue("出版时间");  
         cell = row.createCell((short) 4);  
         cell.setCellValue("编辑信息");  
         cell = row.createCell((short) 5);  
         cell.setCellValue("发行量");  
         cell = row.createCell((short) 6);  
         cell.setCellValue("印次");  
         cell = row.createCell((short) 7);  
         cell.setCellValue("出版物类型");  
         cell = row.createCell((short) 8);  
         cell.setCellValue("总页数");  
         cell = row.createCell((short) 9);  
         cell.setCellValue("价格");  
         pageQuery.setPageSize("-1");
         PageQuery pageQuery2 = queryArtPublication(pageQuery);
         int i = 0;
         for (Map<String, Object> item : pageQuery2.getRecordSet()) {
            String time = "";
            time = addString(time, returnString(item.get("publicationYear")), "年");
            time = addString(time, returnString(item.get("publicationMonth")), "月");
            String publicationType = findCodeName(form, "PUBLI_TYPE", returnString(item.get("publicationType")));
            String money = returnString(item.get("price")) + findCodeName(form, "CURRENCY_TYPE", returnString(item.get("priceUnit")));
            row = sheet.createRow(i+1); 
            row.createCell((short) 0).setCellValue(returnString(item.get("publicationName"))); 
            row.createCell((short) 1).setCellValue(returnString(item.get("cName"))); 
            row.createCell((short) 2).setCellValue(returnString(item.get("press"))); 
            row.createCell((short) 3).setCellValue(time); 
            row.createCell((short) 4).setCellValue(returnString(item.get("editor"))); 
            row.createCell((short) 5).setCellValue(returnString(item.get("circulation"))); 
            row.createCell((short) 6).setCellValue(returnString(item.get("impression"))); 
            row.createCell((short) 7).setCellValue(publicationType); 
            row.createCell((short) 8).setCellValue(returnString(item.get("pageCount"))); 
            row.createCell((short) 9).setCellValue(money); 
            i++;
         }
         return hssfWorkbook;
      }
      catch (Exception e) {
         e.printStackTrace();
         throw new ServiceException("系统错误。");
      }
   }

   private String returnString(Object object) {
      String str = object == null ? "" : object.toString();
      return str;
   }

   private String addString(String str, String equalStr, String addStr) {
      if (!"".equals(equalStr)) {
         if (equalStr.indexOf(addStr) > -1) return str + equalStr;
         else return str + equalStr + addStr;
      }
      return str;
   }

   private String findCodeName(Object objForm, String codeNo, Serializable value){
      BaseForm bf = (BaseForm) objForm;

      List<Code> list = bf.getCodeSets().get(codeNo);
      if (value == null) return "";
      if (list == null) return "";
      for (int i = 0; i < list.size(); i++) {
         Code code = list.get(i);
         String v;
         if (value instanceof String) v = ((String) value).trim();
         else v = value.toString();
         if (v.equals(code.getValue())) return code.getCodeName();
      }
      return "";
   }
   
   @Resource
   private ArtPublicationDao artPublicationDao;

   @Resource
   private ArtArtistDao      artArtistDao;
}
