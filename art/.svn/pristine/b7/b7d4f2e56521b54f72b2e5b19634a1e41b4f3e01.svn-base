package com.golead.art.literature;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.StrutsStatics;

import com.golead.art.literature.model.ArtLiteratureCollect;
import com.golead.art.literature.service.ArtLiteratureCollectService;
import com.golead.art.utils.FileUtils;
import com.golead.art.utils.PrintExcel;
import com.golead.art.utils.PrintPoint;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.util.ConvertUtil;
import com.golead.core.web.action.BaseAction;

public class ArtLiteratureCollectAction extends BaseAction {

	private Log log = LogFactory.getLog(ArtLiteratureCollectAction.class);
	
	private final static SimpleDateFormat dateFormate = new SimpleDateFormat("yyyy-MM-dd");
	
	public static String FILE_PATH = ServletActionContext.getServletContext().getRealPath("");
	private File importFile;
	private List<File> files;
	private String filesFileName;
	private List<Map<String, String>> filesList = new ArrayList<Map<String, String>>();
	
	@Resource
	private ArtLiteratureCollectService artLiteratureCollectService;
	
	@Override
	public String doExecute() throws Exception {
		String forward = "";
		String action = getForm().getAction();
		
		if (action == null) {
			action = LIST;
		}
		if (log.isDebugEnabled())
			log.debug("action" + action);
		try {
			if (LIST.equalsIgnoreCase(action)) forward = LIST;
			else if (PAGE.equalsIgnoreCase(action)) forward = pageCollect();
			else if (ADD.equalsIgnoreCase(action)) forward = addCollect();
			else if (SAVE.equalsIgnoreCase(action)) forward = saveCollect();
			else if (EDIT.equalsIgnoreCase(action)) forward = editCollect();
			else if (UPDATE.equalsIgnoreCase(action)) forward = updateCollect();
			else if (DELETE.equalsIgnoreCase(action)) forward = deleteCollect();
			else if (VIEW.equalsIgnoreCase(action)) forward = viewCollect();
			else if ("SHOW".equalsIgnoreCase(action)) forward = showPicture();
			else if ("IMPORT".equalsIgnoreCase(action)) forward = importCollect();
			else if ("DOWNLOAD".equalsIgnoreCase(action)) forward = downloadTemplate();
			else if ("DOWNLOADFILE".equalsIgnoreCase(action)) forward = downloadFile();
		} catch(Exception e) {
			e.printStackTrace();
			request.put("errMsg", e.getMessage());
			forward = ERROR;
		}
		return forward;
	}
	
	public String pageCollect() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'pageCollect' method");
		try {
			initForm();
			PageQuery pq = getForm().getQuery();
			pq = artLiteratureCollectService.queryArtLiteratureCollect(pq);
			List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();
			for (Map<String, Object> item : pq.getRecordSet()) {
				Map<String, Object> map = new HashMap<String, Object>();
				String link = "^javascript:view(" + item.get("id") + ")^_self";
				map.put("id", item.get("id"));
				map.put("data", new Object[]{
					""
					,item.get("collect_name") + link
					,formateDate(item.get("collect_time"))
					,item.get("city")
					,item.get("province")
					,item.get("country")
				});
				list.add(map);
			}
			String res = genGridJson(pq, list);
			setResponse(res);
		} catch (ServiceException e) {
			setResponse("{exit:1,message:\"" + e.getMessage() + "\"}");
		} catch (Exception e) {
			e.printStackTrace();
			setResponse("{exit:1,message:\"数据访问错误。\"}");
		}
		return null;
	}
	
	public String addCollect() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'addCollect' method");
		try {
			initForm();
			return "ADD";
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR;
		}
	}
	
	public String saveCollect() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'saveCollect' method");
		try {
			ArtLiteratureCollect artLiteratureCollect = new ArtLiteratureCollect();
			ConvertUtil.mapToObject(artLiteratureCollect, getForm().getRecord(), false);
			artLiteratureCollectService.createArtLiteratureCollect(artLiteratureCollect, files, filesFileName);
			String id = artLiteratureCollect.getId().toString();
			getForm().getRecord().put("id", id);
			String path = FILE_PATH + File.separator + "upload" + File.separator + "literature" + File.separator + "collect" + File.separator + id;
			File file = new File(path);
			if (!file.exists()) {
				file.mkdirs();
			}
			String[] attachments = artLiteratureCollect.getAttachment().split(";");
			for (int i = 0; i < files.size(); i++) {
				File inFile = files.get(i);
				FileUtils.fileUpload(path + File.separator + attachments[i], inFile);
			}
			return returnForward(RETURN_NORMAL);
		} catch (ServiceException e) {
			addMessage(getForm(), e.getMessage());
			return ADD;
		} catch (Exception e) {
			e.printStackTrace();
			addMessage(getForm(), "保存操作失败!");
			return ADD;
		}
	}
	
	public String editCollect() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'editCollect' method");
		try {
			initForm();
			int id = Integer.valueOf(getForm().getRecord().get("id"));
			ArtLiteratureCollect artLiteratureCollect = artLiteratureCollectService.getArtLiteratureCollect(id);
			ConvertUtil.objectToMap(getForm().getRecord(), artLiteratureCollect);
			String attachment = artLiteratureCollect.getAttachment();
			if (attachment != null && !"".equals(attachment)) {
				String[] attachments = attachment.split(";");
				for (String oneAttachment : attachments) {
					Map<String, String>	map = new HashMap<String, String>();
					map.put("name", oneAttachment);
					map.put("path", FILE_PATH + File.separator +"upload" + File.separator + "auction"
							+ File.separator + "video" + File.separator + artLiteratureCollect.getId().toString()
							+ File.separator + oneAttachment);
					filesList.add(map);
				}
			}
			return EDIT;
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR;
		}
	}
	
	public String updateCollect() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'updateCollect' method");
		try {
			String path = FILE_PATH + File.separator + "upload" + File.separator + "literature" + File.separator + "collect" + File.separator + getForm().getRecord().get("id");
			File file = new File(path);
			if (!file.exists()) {
				file.mkdirs();
			}
			artLiteratureCollectService.updateArtLiteratureCollect(getForm().getRecord(), files, getForm().getRecord().get("oldName"), filesFileName, path);
			return returnForward(RETURN_NORMAL);
		} catch (Exception e) {
			addMessage(getForm(), e.getMessage());
			initForm();
			return EDIT;
		}
	}
	
	public String deleteCollect() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'deleteCollect' method");
		try {
			String[] id = ids.split(",");
			Integer[] del_ids = new Integer[id.length];
			for (int i = 0; i < del_ids.length; i++) {
				del_ids[i] = Integer.valueOf(id[i]);
			}
			artLiteratureCollectService.deleteArtLiteratureCollects(del_ids);
			return pageCollect();
		} catch (Exception e) {
			e.printStackTrace();
			request.put("errMsg", e.getMessage());
			return ERROR;
		}
	}
	
	public String viewCollect() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'viewCollect' method");
		try {
			initForm();
			ArtLiteratureCollect artLiteratureCollect = artLiteratureCollectService.getArtLiteratureCollect(Integer.valueOf(ids));
			ConvertUtil.objectToMap(getForm().getRecord(), artLiteratureCollect);
			String attachment = artLiteratureCollect.getAttachment();
			if (attachment != null && !"".equals(attachment)) {
				String[] attachments = attachment.split(";");
				for (String oneAttachment : attachments) {
					Map<String, String>	map = new HashMap<String, String>();
					map.put("name", oneAttachment);
					map.put("path", FILE_PATH + File.separator +"upload" + File.separator + "auction"
							+ File.separator + "video" + File.separator + artLiteratureCollect.getId().toString()
							+ File.separator + oneAttachment);
					filesList.add(map);
				}
			}
			return VIEW;
		} catch (Exception e) {
			e.printStackTrace();
			request.put("errMsg", e.getMessage());
			return ERROR;
		}
	}
	
	public String showPicture() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'showPicture' method");
		try {
			return "SHOW";
		} catch (Exception e) {
			e.printStackTrace();
			request.put("errMsg", e.getMessage());
			return ERROR;
		}
	}
	
	public String importCollect() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'importCollect' method");
		try {
			if (importFile != null) {
				File file = new File(FILE_PATH + File.separator + "template" + File.separator + "literature" + File.separator + "collect");
				if (!file.exists()) {
					file.mkdirs();
				}
				String path = FILE_PATH + File.separator + "template" + File.separator + "literature" + File.separator + "collect" + File.separator + importFile.getName();
				FileUtils.fileUpload(path, importFile);
				String message = artLiteratureCollectService.importCollect(path);
				if(!"".equals(message)){
		            if (message.startsWith("成功")){
		            	request.put("msg", message);
		            } else {
		            	throw new Exception(message);
		            }
				}
				return returnForward(message);
			} else 
				return "IMPORT";
		} catch (Exception e) {
			e.printStackTrace();
			if(e.getMessage() != null){
				addMessage(getForm(), e.getMessage());
			}
			return "IMPORT";
		}
		
	}
	
	public String downloadTemplate() throws Exception {
		if (log.isDebugEnabled())
			log.debug("Entering 'downloadTemplate' method");
		try {
			HttpServletResponse response = (HttpServletResponse) ctx.get(StrutsStatics.HTTP_RESPONSE);
			response.setContentType("APPLICATION/DOWNLOAD");
			response.setContentType("application/octed-stream,charset=gb2312");
			response.setHeader("Content-Disposition", "attachment;filename=" + new String("收藏导入模板.xls".getBytes("gb2312"), "ISO-8859-1"));
			String templatePath = ServletActionContext.getServletContext().getRealPath("/template/literature/art_literature_collect.xls");
			File templateFile = new File(templatePath);
			PrintExcel printExcel = new PrintExcel();
			InputStream inputStream = new FileInputStream(templateFile);
			HSSFWorkbook hssfWorkbook = null;
			POIFSFileSystem poifsFileSystem = new POIFSFileSystem(inputStream);
			hssfWorkbook = new HSSFWorkbook(poifsFileSystem);
			
			HSSFDataFormat format = hssfWorkbook.createDataFormat();
			
			HSSFCellStyle csString = hssfWorkbook.createCellStyle();
			csString.setBorderLeft(CellStyle.BORDER_THIN);
			csString.setBorderRight(CellStyle.BORDER_THIN);
			csString.setBorderTop(CellStyle.BORDER_THIN);
			csString.setBorderBottom(CellStyle.BORDER_THIN);
			csString.setAlignment(HSSFCellStyle.ALIGN_CENTER);
			csString.setDataFormat(format.getFormat("@"));
			
			HSSFCellStyle csDecimal = hssfWorkbook.createCellStyle();
			csDecimal.setBorderLeft(CellStyle.BORDER_THIN);
			csDecimal.setBorderRight(CellStyle.BORDER_THIN);
			csDecimal.setBorderTop(CellStyle.BORDER_THIN);
			csDecimal.setBorderBottom(CellStyle.BORDER_THIN);
			csDecimal.setDataFormat(HSSFDataFormat.getBuiltinFormat("0.00"));

			HSSFCellStyle csDecimal1 = hssfWorkbook.createCellStyle();
			csDecimal1.setBorderLeft(CellStyle.BORDER_THIN);
			csDecimal1.setBorderRight(CellStyle.BORDER_THIN);
			csDecimal1.setBorderTop(CellStyle.BORDER_THIN);
			csDecimal1.setBorderBottom(CellStyle.BORDER_THIN);
			HSSFDataFormat csformat = hssfWorkbook.createDataFormat();
			csDecimal1.setDataFormat(csformat.getFormat("0.000"));
			
			List<PrintPoint> printPoints = new ArrayList<PrintPoint>();
			
			printExcel.setPrintPointList(printPoints);// 填写数据
			printExcel.doFillSheet(hssfWorkbook, 0);// 写入workbook的第一页
			printExcel.doPrint(response, templateFile, hssfWorkbook);// workbook输出到response中。
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public String downloadFile() throws Exception {
		if (log.isDebugEnabled())
			log.debug("Entering 'downloadFile' method");
		try {
			String name = getForm().getRecord().get("name");
			String path = FILE_PATH + File.separator + "upload" + File.separator + "literature" + File.separator + "collect" + File.separator + getForm().getRecord().get("id") + File.separator + name;
			HttpServletResponse response = (HttpServletResponse) ctx.get(StrutsStatics.HTTP_RESPONSE);
			File file = new File(path);
			// 以流的形式下载文件。
            InputStream fis = new BufferedInputStream(new FileInputStream(path));
            byte[] buffer = new byte[fis.available()];
            fis.read(buffer);
            fis.close();
            // 清空response
            response.reset();
            // 设置response的Header
            response.addHeader("Content-Disposition", "attachment;filename=" + new String(name.getBytes("GBK"), "ISO-8859-1"));
            response.addHeader("Content-Length", "" + file.length());
            OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
            response.setCharacterEncoding("UTF-8");
            response.setContentType("application/octet-stream");
            toClient.write(buffer);
            toClient.flush();
            toClient.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public void initForm() throws Exception {
		setCode(getForm(), "");
	}
	
	private String formateDate(Object obj) {
		if(obj == null) return "";
		return dateFormate.format(obj);
	}

	public File getImportFile() {
		return importFile;
	}

	public void setImportFile(File importFile) {
		this.importFile = importFile;
	}

	public List<File> getFiles() {
		return files;
	}

	public void setFiles(List<File> files) {
		this.files = files;
	}

	public String getFilesFileName() {
		return filesFileName;
	}

	public void setFilesFileName(String filesFileName) {
		this.filesFileName = filesFileName;
	}

	public List<Map<String, String>> getFilesList() {
		return filesList;
	}

	public void setFilesList(List<Map<String, String>> filesList) {
		this.filesList = filesList;
	}

}
