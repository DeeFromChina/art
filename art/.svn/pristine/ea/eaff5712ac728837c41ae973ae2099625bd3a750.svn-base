package com.golead.art.works;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.golead.art.artist.model.ArtArtist;
import com.golead.art.artist.model.ArtArtistWorksPeriod;
import com.golead.art.artist.service.ArtArtistService;
import com.golead.art.artist.service.ArtArtistWorksPeriodService;
import com.golead.art.works.model.ArtWorks;
import com.golead.art.works.model.ArtWorksEvaluate;
import com.golead.art.works.model.ArtWorksPeriod;
import com.golead.art.works.service.ArtWorksEvaluateService;
import com.golead.art.works.service.ArtWorksPeriodService;
import com.golead.art.works.service.ArtWorksService;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.util.ConvertUtil;
import com.golead.core.web.action.BaseAction;

public class ArtWorksEvaluateAction extends BaseAction {
   
   private final Log                     logger      = LogFactory.getLog(ArtWorksEvaluateAction.class);
   
   private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
   
   private List<Map<String, String>> cookie = new ArrayList<Map<String, String>>();
   
   @Resource
   private ArtWorksEvaluateService artWorksEvaluateService;
   
   @Resource
   private ArtWorksService artWorksService;
   
   @Resource
   private ArtArtistService artArtistService;
   
   @Resource
   ArtArtistWorksPeriodService artArtistWorksPeriodService;
   
   public String doExecute() throws Exception {
      String forward = "";
      String action = form.getAction();

      if (action == null) action = LIST;
      if (logger.isDebugEnabled()) logger.debug("action:" + action);
      try {
         initForm();
         if (LIST.equalsIgnoreCase(action)) forward = LIST;
         else if (PAGE.equalsIgnoreCase(action)) forward = getPageDate();
         else if (ADD.equalsIgnoreCase(action)) forward = addPeriod();
         else if (SAVE.equalsIgnoreCase(action)) forward = savePeriod();
         else if (EDIT.equalsIgnoreCase(action)) forward = editPeriod();
         else if (UPDATE.equalsIgnoreCase(action)) forward = updatePeriod();
         else if (VIEW.equalsIgnoreCase(action)) forward = view();
         else if (DELETE.equalsIgnoreCase(action)) forward = delete();
         else if ("ARTIST".equalsIgnoreCase(action)) forward = artist();
      }
      catch (Exception e) {// 其他系统出错
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         forward = ERROR;
      }
      return forward;
   }
   
   public void initForm() throws Exception {
      setCode(form, "ART_TYPE,DATE_YEAR,MEDIUM_TYPE,SIGNATURE,PERIOD_TYPE,EVAL_TYPE");
   }
   
   private String getPageDate() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'getPageDate' method");
      try {
         initForm();
         String id = form.getRecord().get("id");
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
         PageQuery pageQuery = form.getQuery();
         pageQuery.getParameters().put("id", id);
         pageQuery = artWorksEvaluateService.queryArtWorksEvaluate(pageQuery);
         if(pageQuery.getRecordSet() != null){
            for(Map<String, Object> item : pageQuery.getRecordSet()){
               Map<String, Object> map = new HashMap<String, Object>();
               map.put("id", item.get("id"));
               map.put("data", new Object[]{
                     "",
                     findCodeName(form, "EVAL_TYPE", item.get("evaluateType").toString()),
                     item.get("evaluates")
               });
               list.add(map);
            }
         }
         String res = genGridJson(pageQuery, list);
         setResponse(res);
      }
      catch (ServiceException e) {
         e.printStackTrace();
         setResponse("{exit:1,message:\"" + e.getMessage() + "\"}");
      }
      catch (Exception e) {
         e.printStackTrace();
         setResponse("{exit:1,message:\"数据访问错误。\"}");
      }
      return null;
   }
   
   private String addPeriod() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'addWorks' method");
      String forward = null;
      try {
         initForm();
         return ADD;
      }
      catch (Exception e) {
         e.printStackTrace();
         forward = ERROR;
      }
      return forward;
   }
   
   private String savePeriod() throws Exception {
      try {
         initForm();
         ArtWorksEvaluate artWorksEvaluate = new ArtWorksEvaluate();
         artWorksEvaluate.setEvaluate(form.getRecord().get("evaluates"));
         artWorksEvaluate.setEvaluateType(form.getRecord().get("evaluateType"));
         artWorksEvaluate.setWorksId(Integer.valueOf(form.getRecord().get("worksId")));
         artWorksEvaluateService.createArtWorksEvaluate(artWorksEvaluate);
         return returnForward(RETURN_NORMAL);
      }
      catch (Exception e) {
         addMessage(form, e.getMessage());
         initForm();
         return ADD;
      }
   }
   
   private String editPeriod() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'editWorks' method");
      String forward = null;
      try {
         initForm();
         String id = form.getRecord().get("id");
         ArtWorksEvaluate artWorksEvaluate = artWorksEvaluateService.getArtWorksEvaluate(Integer.valueOf(id));
         ConvertUtil.objectToMap(form.getRecord(), artWorksEvaluate);
         form.getRecord().put("evaluates", artWorksEvaluate.getEvaluate());
         return EDIT;
      }
      catch (Exception e) {
         e.printStackTrace();
         forward = ERROR;
      }
      return forward;
   }
   
   private String updatePeriod() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'updateWorks' method");
      try {
         initForm();
         form.getRecord().put("evaluate", form.getRecord().get("evaluates"));
         artWorksEvaluateService.updateArtWorksEvaluate(form.getRecord());
         return returnForward(RETURN_NORMAL);
      }
      catch (Exception e) {
         addMessage(form, e.getMessage());
         initForm();
         return EDIT;
      }
   }
   
   private String view() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'view' method");
      try {
         initForm();
         String id = form.getRecord().get("id");
         ArtWorks works = artWorksService.getArtWorks(Integer.valueOf(id));
         ConvertUtil.objectToMap(getForm().getRecord(), works);
         ArtArtist artist = artArtistService.getArtArtist(works.getArtistId());
         form.getRecord().put("artArtistName", artist.getCname());
         form.getRecord().put("artArtistId", artist.getId().toString());
         form.getRecord().put("chineseName", works.getWorksCName());
         form.getRecord().put("englishName", works.getWorksEName());
         form.getRecord().put("no", works.getWorksNo());
         String partSize = works.getPartSize();
         String[] partSizes = partSize.split(";");
         for(int i =0; i<partSizes.length; i++){
            Map<String, String> map = new HashMap<String, String>();
            String size = partSizes[i];
            String[] sizes = size.split("\\*");
            String partSize_l = sizes[0];
            String partSize_w = sizes[1];
            map.put("l_"+String.valueOf(i), partSize_l);
            map.put("w_"+String.valueOf(i), partSize_w);
            map.put("id", String.valueOf(i));
//            partSizeList.add(map);
         }
      }
      catch (Exception e) {
         initForm();
         return ERROR;
      }
      return VIEW;
   }
   
   private String delete() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'delete' method");
      try {
         String[] idlist = ids.split(",");
         Integer[] dels = new Integer[idlist.length];
         for(int i = 0; i<idlist.length; i++){
            dels[i] = Integer.valueOf(idlist[i]);
         }
         artWorksEvaluateService.deleteArtWorksEvaluates(dels);
         setResponse("{exit:0}");
      }
      catch (Exception e) {
         e.printStackTrace();
         return ERROR;
      }
      return null;
   }
   
   private String artist() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'artist' method");
      try {
         List<ArtArtist> artArtists = artArtistService.findAllArtArtist();
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
         for (ArtArtist artArtist : artArtists) {
            Map<String, Object> map = new HashMap<String, Object>();
            ConvertUtil.objectToMap(map, artArtist);
            if ((";" + ids).indexOf(";" + map.get("id") + ";") > -1) map.put("CHECKED", "checked");
            else map.put("CHECKED", "");
            list.add(map);
         }
         form.getQuery().setRecordSet(list);
         return "ARTIST";
      }
      catch (Exception e) {
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         return ERROR;
      }
   }

   public List<Map<String, String>> getCookie() {
      return cookie;
   }

   public void setCookie(List<Map<String, String>> cookie) {
      this.cookie = cookie;
   }

}
