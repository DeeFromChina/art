package com.golead.art.artist.service.impl;

import java.io.File;
import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;
import com.golead.art.artist.dao.ArtArtistAlbumDao;
import com.golead.art.artist.model.ArtArtistAlbum;
import com.golead.art.artist.service.ArtArtistAlbumService;
import com.golead.art.utils.FileUtils;

import javax.annotation.Resource; 

import org.apache.commons.fileupload.FileUpload;
import org.springframework.stereotype.Service;

@Service
public class ArtArtistAlbumServiceImpl extends BaseServiceImpl implements ArtArtistAlbumService {
	private static final long serialVersionUID = 1L;

	public ArtArtistAlbum getArtArtistAlbum(Serializable id) throws ServiceException {
		try {
			return artArtistAlbumDao.get(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void createArtArtistAlbum(ArtArtistAlbum artArtistAlbum, File files, String filesName, String path) throws ServiceException {
		try {
			StringBuffer fileName = new StringBuffer();
			if (files != null) {
				String cName = String.valueOf(System.currentTimeMillis());
				String[] endName = filesName.split("\\.");
				FileUtils.fileUpload(path + File.separator + cName + "." + endName[endName.length-1], files);
				fileName.append(filesName + "/" + cName + "." + endName[endName.length-1]);
			}
			artArtistAlbum.setPhoto(fileName.toString());
			artArtistAlbumDao.save(artArtistAlbum);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void updateArtArtistAlbum(Map<String, String> artArtistAlbumMap, File files, String filesName, String path) throws ServiceException {
		try {
            Integer pkId = new Integer(artArtistAlbumMap.get(ArtArtistAlbum.PROP_ID));
			ArtArtistAlbum tmp = artArtistAlbumDao.get(pkId);
			ConvertUtil.mapToObject(tmp, artArtistAlbumMap, true);			
			File file = new File(path);
			if (filesName != null) {
				StringBuffer fileName = new StringBuffer();
				if (files != null) {
					String cName = String.valueOf(System.currentTimeMillis());
					String[] endName = filesName.split("\\.");
					FileUtils.fileUpload(path + File.separator + cName + "." + endName[endName.length-1], files);
					fileName.append(filesName + "/" + cName + "." + endName[endName.length-1]);
				}
				tmp.setPhoto(fileName.toString());
			}
			artArtistAlbumDao.update(tmp);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtArtistAlbum(Serializable id) throws ServiceException {
		try {
			artArtistAlbumDao.delete(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtArtistAlbums(Serializable[] ids) throws ServiceException {
		try {
			artArtistAlbumDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtArtistWithAlbums(Serializable[] ids) throws ServiceException {
		try {
			for (Serializable id : ids) {
				artArtistAlbumDao.deleteByField("artistId", id);
			}
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public PageQuery queryArtArtistAlbum(PageQuery pageQuery) throws ServiceException {
		try {
		  createSqlFilter(pageQuery);
          return jdbcDao.queryBySqlId("artArtistAlbumList", pageQuery);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private void createSqlFilter(PageQuery page) {
		String paras = "";
		Map<String, String> parameters = page.getParameters();
		String artistId = parameters.get("artistId");
		paras = " aaa.artist_Id = " + artistId +" ";
		if (paras.length() > 0) {
			page.getParameters().put("paras", paras);
		}
	}
	
    @Resource
	private ArtArtistAlbumDao	artArtistAlbumDao;

	public void setArtArtistAlbumDao(ArtArtistAlbumDao artArtistAlbumDao) {
		this.artArtistAlbumDao = artArtistAlbumDao;
	}
}

