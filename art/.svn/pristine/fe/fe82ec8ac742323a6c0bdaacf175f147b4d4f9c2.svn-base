package com.golead.art.works;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.StrutsStatics;

import com.golead.art.artist.model.ArtArtist;
import com.golead.art.artist.service.ArtArtistService;
import com.golead.art.utils.FileUtils;
import com.golead.art.utils.PrintExcel;
import com.golead.art.utils.PrintPoint;
import com.golead.art.works.model.ArtMedium;
import com.golead.art.works.model.ArtWorks;
import com.golead.art.works.model.ArtWorksAttachment;
import com.golead.art.works.service.ArtMediumService;
import com.golead.art.works.service.ArtWorksAttachmentService;
import com.golead.art.works.service.ArtWorksService;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.util.ConvertUtil;
import com.golead.core.web.action.BaseAction;

public class ArtWorksAction extends BaseAction {
   
   private final Log                     logger      = LogFactory.getLog(ArtWorksAction.class);
   
   private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
   public static String FILE_PATH = ServletActionContext.getServletContext().getRealPath("");
   
   private List<Map<String, String>> partSizeList = new ArrayList<Map<String, String>>();
   private List<Map<String, String>> thumbnailList = new ArrayList<Map<String, String>>();
   private List<File> files;
   private String filesFileName;
   private String filesContentType;
   private File importFile;
   private String importFileFileName;
   private String importFileContentType;
   
   @Resource
   private ArtMediumService artMediumService;
   
   @Resource
   private ArtWorksService artWorksService;
   
   @Resource
   private ArtArtistService artArtistService;
   
   @Resource
   private ArtWorksAttachmentService artWorksAttachmentService;
   
   public String doExecute() throws Exception {
      String forward = "";
      String action = form.getAction();

      if (action == null) action = LIST;
      if (logger.isDebugEnabled()) logger.debug("action:" + action);
      try {
         initForm();
         if (LIST.equalsIgnoreCase(action)) forward = LIST;
         else if (PAGE.equalsIgnoreCase(action)) forward = getPageDate();
         else if (ADD.equalsIgnoreCase(action)) forward = addWorks();
         else if (SAVE.equalsIgnoreCase(action)) forward = saveWorks();
         else if (EDIT.equalsIgnoreCase(action)) forward = editWorks();
         else if (UPDATE.equalsIgnoreCase(action)) forward = updateWorks();
         else if (VIEW.equalsIgnoreCase(action)) forward = view();
         else if (DELETE.equalsIgnoreCase(action)) forward = delete();
         else if ("ARTIST".equalsIgnoreCase(action)) forward = artist();
         else if ("MEDIUM".equalsIgnoreCase(action)) forward = medium();
         else if ("THUMBNAIL".equalsIgnoreCase(action)) forward = thumbnail();
         else if ("SAVETHUMBNAIL".equalsIgnoreCase(action)) forward = saveThumbnail();
         else if ("DELETETHUMBNAIL".equalsIgnoreCase(action)) forward = deleteThumbnail();
         else if ("SHOW".equalsIgnoreCase(action)) forward = show();
         else if ("GOEXCEL".equalsIgnoreCase(action)) forward = goExcel();
         else if ("EXCEL".equalsIgnoreCase(action)) forward = excel();
         else if ("DOWNLOAD".equalsIgnoreCase(action)) forward = download();
      }
      catch (Exception e) {// 其他系统出错
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         forward = ERROR;
      }
      return forward;
   }
   
   public void initForm() throws Exception {
      setCode(form, "ART_TYPE,DATE_YEAR,MEDIUM_TYPE,SIGNATURE");
      List<ArtMedium> chineseMediums = artMediumService.findBySide("1");
      List<ArtMedium> englishMediums = artMediumService.findBySide("2");
      setCode(form, "chineseMediums", chineseMediums, ArtMedium.PROP_MEDIUM_NAME, ArtMedium.PROP_ID, true);
      setCode(form, "englishMediums", englishMediums, ArtMedium.PROP_MEDIUM_NAME, ArtMedium.PROP_ID, true);
      List<ArtMedium> materials = artMediumService.findByCategory("1");
      List<ArtMedium> shapes = artMediumService.findByCategory("2");
      setCode(form, "MATERIALS", materials, ArtMedium.PROP_MEDIUM_NAME, ArtMedium.PROP_ID, true);
      setCode(form, "SHAPES", shapes, ArtMedium.PROP_MEDIUM_NAME, ArtMedium.PROP_ID, true);
   }
   
   private String getPageDate() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'getPageDate' method");
      try {
         initForm();
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
         PageQuery pageQuery = form.getQuery();
         pageQuery = artWorksService.queryArtWorks(pageQuery);
         if(pageQuery.getRecordSet() != null){
            for(Map<String, Object> item : pageQuery.getRecordSet()){
               Map<String, Object> map = new HashMap<String, Object>();
               String artistlink = "^javascript:artistview(" + item.get("artistId") + ");^_self";
               String worklink = "^javascript:workview(" + item.get("id") + ");^_self";
               map.put("id", item.get("id"));
               String createTime = item.get("createTime") == null ? "" : item.get("createTime").toString();
               if(!"".equals(createTime)){
            	   createTime = sdf.format(item.get("createTime"));
               }
               map.put("data", new Object[]{
                     "",item.get("styleType"),
                     item.get("c_name") + "(" + item.get("e_name") + ")" + artistlink,
                     item.get("no") + worklink, item.get("chineseName"), item.get("englishName"),
                     item.get("worksSeries"), createTime
               });
               list.add(map);
            }
         }
         String res = genGridJson(pageQuery, list);
         setResponse(res);
      }
      catch (ServiceException e) {
         e.printStackTrace();
         setResponse("{exit:1,message:\"" + e.getMessage() + "\"}");
      }
      catch (Exception e) {
         e.printStackTrace();
         setResponse("{exit:1,message:\"数据访问错误。\"}");
      }
      return null;
   }
   
   private String addWorks() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'addWorks' method");
      String forward = null;
      try {
         initForm();
         return ADD;
      }
      catch (Exception e) {
         e.printStackTrace();
         forward = ERROR;
      }
      return forward;
   }
   
   private String saveWorks() throws Exception {
      try {
         initForm();
         String partSize_name = form.getRecord().get("partSize_name");
         partSize_name = partSize_name.replace(" ", "");
         String partSize_unit = form.getRecord().get("partSize_unit");
         partSize_unit = partSize_unit.replace(" ", "");
         String partSize_l = form.getRecord().get("partSize_l");
         partSize_l = partSize_l.replace(" ", "");
         String partSize_w = form.getRecord().get("partSize_w");
         partSize_w = partSize_w.replace(" ", "");
         String[] partSize_ls = partSize_l.split(",");
         String[] partSize_ws = partSize_w.split(",");
         String[] partSize_names = partSize_name.split(",");
         String[] partSize_units = partSize_unit.split(",");
         String partSize = "";
         for(int i = 0; i<partSize_ls.length; i++){
            partSize = partSize + partSize_names[i] + ":" +partSize_ls[i] + "*" + partSize_ws[i] + " " + partSize_units[i] + ";";
         }
         ArtWorks artWorks = new ArtWorks();
         artWorks.setPartSize(partSize);
         artWorks.setWorksNo(form.getRecord().get("no"));
         artWorks.setArtistId(Integer.valueOf(form.getRecord().get("artArtistId")));
         artWorks.setWorksCName(form.getRecord().get("chineseName"));
         artWorks.setWorksEName(form.getRecord().get("englishName"));
         artWorks.setCreateTime(sdf.parse(form.getRecord().get("createTime")));
         artWorks.setCreateFrom(form.getRecord().get("createFrom"));
         artWorks.setCreateTo(form.getRecord().get("createTo"));
         artWorks.setWorksSeries(form.getRecord().get("worksSeries"));
         artWorks.setWorksTheme(form.getRecord().get("worksTheme"));
         artWorks.setSizeCm(form.getRecord().get("sizeCm"));
         artWorks.setSizeIn(form.getRecord().get("sizeIn"));
         artWorks.setSizeRule(form.getRecord().get("sizeRule"));
         artWorks.setThumbnail(form.getRecord().get("thumbnailName"));
         Integer medium = form.getRecord().get("mediumMaterialId") == null ? 0 : Integer.valueOf(form.getRecord().get("mediumMaterialId")); 
         artWorks.setMediumMaterial(medium);
         medium = form.getRecord().get("mediumShapeId") == null ? 0 : Integer.valueOf(form.getRecord().get("mediumShapeId")); 
         artWorks.setMediumShape(medium);
         artWorks.setSignature(form.getRecord().get("signature"));
         artWorks.setSignature2(form.getRecord().get("signature2"));
         artWorks.setSignature3(form.getRecord().get("signature3"));
         artWorks.setSignatureContent(form.getRecord().get("signatureContent"));
         artWorks.setSignatureContent2(form.getRecord().get("signatureContent2"));
         artWorks.setSignatureContent3(form.getRecord().get("signatureContent3"));
         artWorks.setStyleContent(form.getRecord().get("styleContent"));
         artWorks.setCreatePlace(form.getRecord().get("createPlace"));
         artWorks.setCreatePeriod(form.getRecord().get("createPeriod"));
         artWorks.setStyleType(form.getRecord().get("styleType"));
         artWorks.setWorksStatus(form.getRecord().get("worksStatus"));
         artWorksService.createArtWorks(artWorks);
         form.getRecord().put("id", artWorks.getId().toString());
         editWorks();
         form.getRecord().put("next", "true");
         return EDIT;
      }
      catch (Exception e) {
         addMessage(form, e.getMessage());
         initForm();
         return ADD;
      }
   }
   
   private String editWorks() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'editWorks' method");
      String forward = null;
      try {
         initForm();
         String id = form.getRecord().get("id");
         ArtWorks works = artWorksService.getArtWorks(Integer.valueOf(id));
         ConvertUtil.objectToMap(getForm().getRecord(), works);
         if(works.getMediumMaterial() != null && !"".equals(works.getMediumMaterial())){
        	 ArtMedium artMedium = artMediumService.getArtMedium(works.getMediumMaterial());
        	 form.getRecord().put("mediumMaterial", artMedium.getMediumName());
        	 form.getRecord().put("mediumMaterialId", artMedium.getId().toString());
        	 artMedium = artMediumService.getArtMedium(works.getMediumShape());
        	 form.getRecord().put("mediumShape", artMedium.getMediumName());
        	 form.getRecord().put("mediumShapeId", artMedium.getId().toString());
         }
         ArtArtist artist = artArtistService.getArtArtist(works.getArtistId());
         form.getRecord().put("artArtistName", artist.getCname());
         form.getRecord().put("artArtistId", artist.getId().toString());
         form.getRecord().put("chineseName", works.getWorksCName());
         form.getRecord().put("englishName", works.getWorksEName() == null ? "" : works.getWorksEName());
         form.getRecord().put("no", works.getWorksNo());
//         String mediums = works.getMediumMaterial() == null ? "" : works.getMediumMaterial().toString();
//         form.getRecord().put("chineseMediums", mediums);
//         mediums = works.getMediumShape() == null ? "" : works.getMediumShape().toString();
//         form.getRecord().put("englishMediums", mediums);
         String partSize = works.getPartSize();
         if(partSize != null && !"".equals(partSize)){
            String[] partSizes = partSize.split(";");
            for(int i =0; i<partSizes.length; i++){
               Map<String, String> map = new HashMap<String, String>();
               String size = partSizes[i];
               String[] sizes = size.split(":");
               String partSize_name = sizes[0];
               map.put("name_"+String.valueOf(i), partSize_name);
               String partSize_unit = sizes[1].split(" ")[1];
               map.put("unit_"+String.valueOf(i), partSize_unit);
               String lw = sizes[1].split(" ")[0];
               String[] lws = lw.split("\\*");
               String partSize_l = lws[0];
               String partSize_w = lws[1];
               map.put("l_"+String.valueOf(i), partSize_l);
               map.put("w_"+String.valueOf(i), partSize_w);
               map.put("id", String.valueOf(i));
               partSizeList.add(map);
            }
         }else{
            form.getRecord().put("Psize", "no");
         }
         return EDIT;
      }
      catch (Exception e) {
         e.printStackTrace();
         forward = ERROR;
      }
      return forward;
   }
   
   private String updateWorks() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'updateWorks' method");
      try {
         initForm();
         form.getRecord().put("artistId", form.getRecord().get("artArtistId"));
         form.getRecord().put("worksCName", form.getRecord().get("chineseName"));
         form.getRecord().put("worksEName", form.getRecord().get("englishName"));
         form.getRecord().put("worksNo", form.getRecord().get("no"));
         form.getRecord().put("mediumMaterial", form.getRecord().get("mediumMaterialId"));
         form.getRecord().put("mediumShape", form.getRecord().get("mediumShapeId"));
         artWorksService.updateArtWorks(form.getRecord());
         return returnForward(RETURN_NORMAL);
      }
      catch (Exception e) {
         addMessage(form, e.getMessage());
         initForm();
         return EDIT;
      }
   }
   
   private String view() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'view' method");
      try {
         initForm();
         String id = form.getRecord().get("id");
         ArtWorks works = artWorksService.getArtWorks(Integer.valueOf(id));
         ConvertUtil.objectToMap(getForm().getRecord(), works);
         ArtMedium artMedium = artMediumService.getArtMedium(works.getMediumMaterial());
         form.getRecord().put("mediumMaterial", artMedium.getMediumName());
         form.getRecord().put("mediumMaterialId", artMedium.getId().toString());
         artMedium = artMediumService.getArtMedium(works.getMediumShape());
         form.getRecord().put("mediumShape", artMedium.getMediumName());
         form.getRecord().put("mediumShapeId", artMedium.getId().toString());
         ArtArtist artist = artArtistService.getArtArtist(works.getArtistId());
         form.getRecord().put("artArtistName", artist.getCname());
         form.getRecord().put("artArtistId", artist.getId().toString());
         form.getRecord().put("chineseName", works.getWorksCName());
         form.getRecord().put("englishName", works.getWorksEName());
         form.getRecord().put("no", works.getWorksNo());
         String mediums = works.getMediumMaterial() == null ? "" : works.getMediumMaterial().toString();
         form.getRecord().put("chineseMediums", mediums);
         mediums = works.getMediumShape() == null ? "" : works.getMediumShape().toString();
         form.getRecord().put("englishMediums", mediums);
         String partSize = works.getPartSize();
         String[] partSizes = partSize.split(";");
         for(int i =0; i<partSizes.length; i++){
            Map<String, String> map = new HashMap<String, String>();
            String size = partSizes[i];
            String[] sizes = size.split(":");
            String partSize_name = sizes[0];
            map.put("name_"+String.valueOf(i), partSize_name);
            String partSize_unit = sizes[1].split(" ")[1];
            map.put("unit_"+String.valueOf(i), partSize_unit);
            String lw = sizes[1].split(" ")[0];
            String[] lws = lw.split("\\*");
            String partSize_l = lws[0];
            String partSize_w = lws[1];
            map.put("l_"+String.valueOf(i), partSize_l);
            map.put("w_"+String.valueOf(i), partSize_w);
            map.put("id", String.valueOf(i));
            partSizeList.add(map);
         }
      }
      catch (Exception e) {
         initForm();
         return ERROR;
      }
      return VIEW;
   }
   
   private String delete() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'delete' method");
      try {
         String[] idlist = ids.split(",");
         Integer[] dels = new Integer[idlist.length];
         for(int i = 0; i<idlist.length; i++){
            dels[i] = Integer.valueOf(idlist[i]);
         }
         artWorksService.deleteArtWorkss(dels);
         setResponse("{exit:0}");
      }
      catch (Exception e) {
         e.printStackTrace();
         return ERROR;
      }
      return null;
   }
   
   private String artist() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'artist' method");
      try {
         List<ArtArtist> artArtists = artArtistService.findAllArtArtist();
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
         for (ArtArtist artArtist : artArtists) {
            Map<String, Object> map = new HashMap<String, Object>();
            ConvertUtil.objectToMap(map, artArtist);
            if ((";" + ids).indexOf(";" + map.get("id") + ";") > -1) map.put("CHECKED", "checked");
            else map.put("CHECKED", "");
            list.add(map);
         }
         form.getQuery().setRecordSet(list);
         return "ARTIST";
      }
      catch (Exception e) {
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         return ERROR;
      }
   }
   
   private String medium() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'Medium' method");
      try {
         String id = form.getRecord().get("id");
         PageQuery pageQuery = new PageQuery();
         pageQuery.getParameters().put("upId", "");
         pageQuery.getParameters().put("mediumCategory", form.getRecord().get("mediumCategory"));
         pageQuery = artMediumService.queryArtMedium(pageQuery);
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
         for (Map<String, Object> map : pageQuery.getRecordSet()) {
            if (id.indexOf(map.get("id").toString()) > -1) map.put("CHECKED", "checked");
            else map.put("CHECKED", "");
            list.add(map);
         }
         form.getQuery().setRecordSet(list);
         return "MEDIUM";
      }
      catch (Exception e) {
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         return ERROR;
      }
   }
   
   private String thumbnail() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'thumbnail' method");
      try {
         String id = form.getRecord().get("id");
         form.getRecord().put("worksId", id);
         ArtWorks artWorks = artWorksService.getArtWorks(Integer.valueOf(id));
         ArtWorksAttachment artWorksAttachment = artWorksAttachmentService.findByWorksId(Integer.valueOf(id));
         String cover = "";
         if(artWorksAttachment != null){
            cover = artWorksAttachment.getFileName();
         }
         String picture = artWorks.getThumbnail();
         if(picture != null && !"".equals(picture)){
            String[] pictures = picture.split(",");
            for(String str : pictures){
               Map<String, String> map = new HashMap<String, String>();
               map.put("name", str.split("/")[0]);
               map.put("realName", str.split("/")[1]);
               map.put("worksId", id);
               if(cover.equals(str)){
                  map.put("cover", "(封面)");
               }
               thumbnailList.add(map);
            }
         }
         return "THUMBNAIL";
      }
      catch (Exception e) {
         e.printStackTrace();
         return ERROR;
      }
   }
   
   private String saveThumbnail() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'saveThumbnail' method");
      try {
         String id = form.getRecord().get("id");
         ArtWorks artWorks = artWorksService.getArtWorks(Integer.valueOf(id));
         
         String path = FILE_PATH + File.separator +"upload" + File.separator + "works" + File.separator +"thumbnail" + File.separator + form.getRecord().get("worksId");
         File newfile = new File(path);
         if(!newfile.exists()){
            newfile.mkdirs();
         }
         StringBuffer fileName = new StringBuffer();
         String name = getFilesFileName();
         if (files != null) {
            for (int i = 0; i < files.size(); i++) {
               File file = files.get(i);
               String cName = String.valueOf(System.currentTimeMillis());
               String[] endless = name.split("\\.");
               FileUtils.fileUpload(path + File.separator + cName + "." + endless[endless.length -1], file);
               fileName.append(name + "/" + cName + "." + endless[endless.length -1]);
            }
         }
         String thumbnail = artWorks.getThumbnail();
         if(thumbnail == null){
            thumbnail = fileName.toString();
         }else{
            if(thumbnail.length() == 0){
               thumbnail = fileName.toString();
            }else{
               thumbnail = thumbnail + "," + fileName.toString();
            }
         }
         artWorks.setThumbnail(thumbnail);
         artWorksService.updateArtWorks(artWorks);
      }
      catch (Exception e) {
         e.printStackTrace();
         return ERROR;
      }
      return thumbnail();
   }
   
   private String deleteThumbnail() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'deleteThumbnail' method");
      try {
         String id = form.getRecord().get("worksId");
         form.getRecord().put("id", id);
         String name = form.getRecord().get("name"); 
         ArtWorks artWorks = artWorksService.getArtWorks(Integer.valueOf(id));
         
         StringBuffer saveThumbnail = new StringBuffer();
         List<String> fileNames = new ArrayList<String>();
         String thumbnail = artWorks.getThumbnail();
         if(thumbnail != null){
            String[] thumbnails = thumbnail.split(",");
            for(String allName : thumbnails){
               fileNames.add(allName);
            }
         }
         String[] fileNames2 = new String[fileNames.size()];
         int j = 0;
         for(String fileName : fileNames){
            fileNames2[j] = fileName;
            j++;
         }
         String[] names = name.split(",");
         int length = fileNames2.length;
         for(String delname : names){
            for(int i =0; i<length; i++){
               if(fileNames2[i].split("/").length == 2){
                  if(delname.equals(fileNames2[i].split("/")[1])){
                     fileNames2[i] = "";
                  }
               }
            }
         }
         for(String saveName : fileNames2){
            if(saveName != null && !"".equals(saveName)){
               saveThumbnail.append(saveName);
               saveThumbnail.append(",");
            }
         }
         thumbnail = saveThumbnail.toString();
         if(thumbnail.length()>0){
            saveThumbnail.deleteCharAt(thumbnail.length()-1);
         }
         thumbnail = saveThumbnail.toString();
         artWorks.setThumbnail(thumbnail);
         artWorksService.updateArtWorks(artWorks);
         String path = FILE_PATH + File.separator +"upload" + File.separator + "works" + File.separator +"thumbnail" + File.separator + form.getRecord().get("worksId");
         File[] fileLies = new File(path).listFiles();
         for(File file : fileLies){
            for(String fileName : names){
               if(fileName.equals(file.getName())){
                  file.delete();
               }
            }
         }
         if(fileLies.length == 0 ){
            File file = new File(path);
            file.delete();
         }
         return thumbnail();
      }
      catch (Exception e) {
         e.printStackTrace();
         return ERROR;
      }
   }
   
   private String show() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'show' method");
      try {
         return "SHOW";
      }
      catch (Exception e) {
         e.printStackTrace();
         request.put("errMsg", e.getMessage());
         return ERROR;
      }
   }

   private String goExcel() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'goExcel' method");
      try {
         return "GOEXCEL";
      }
      catch (Exception e) {
         e.printStackTrace();
         return LIST;
      }
   }
   
   private String excel() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'excel' method");
      try {
         File file = new File(FILE_PATH  + File.separator + "template" + File.separator + "works" + File.separator + "works");
         if(!file.exists()){
            file.mkdirs();
         }
         String path = FILE_PATH  + File.separator + "template" + File.separator + "works" + File.separator + "works" + File.separator + importFileFileName;
         FileUtils.fileUpload(path, importFile);
         String message = artWorksService.importArtWorks(path);
         if(!"".equals(message)){
            if(message.startsWith("成功")){
               request.put("msg", message);
            }else{
               throw new Exception(message);
            }
         }
         return returnForward(message);
      }
      catch (Exception e) {
         e.printStackTrace();
         if(e.getMessage() != null){
            addMessage(form, e.getMessage());
         }
         return "GOEXCEL";
      }
   }
   
   private String download() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'download' method");
      try {
         HttpServletResponse response = (HttpServletResponse) ctx.get(StrutsStatics.HTTP_RESPONSE);
         response.setContentType("APPLICATION/DOWNLOAD");
         response.setContentType("application/octed-stream,charset=gb2312");
         response.setHeader("Content-Disposition", "attachment;filename=" + new String("作品模板.xls".getBytes("gb2312"), "ISO-8859-1"));
         String tempPath = ServletActionContext.getServletContext().getRealPath("") + File.separator + "template" + File.separator + "works" + File.separator + "art_works.xls";
         File tempFile = new File(tempPath);
         if(!tempFile.exists()){
            throw new Exception();
         }

         PrintExcel printExcel = new PrintExcel();
         InputStream inp = null;
         inp = new FileInputStream(tempFile);
         HSSFWorkbook wb = null;
         POIFSFileSystem f = new POIFSFileSystem(inp);
         wb = new HSSFWorkbook(f);

         HSSFDataFormat format = wb.createDataFormat();

         HSSFCellStyle csString = wb.createCellStyle();
         csString.setBorderLeft(CellStyle.BORDER_THIN);
         csString.setBorderRight(CellStyle.BORDER_THIN);
         csString.setBorderTop(CellStyle.BORDER_THIN);
         csString.setBorderBottom(CellStyle.BORDER_THIN);
         csString.setAlignment(HSSFCellStyle.ALIGN_CENTER);
         csString.setDataFormat(format.getFormat("@"));

         HSSFCellStyle csDecimal = wb.createCellStyle();
         csDecimal.setBorderLeft(CellStyle.BORDER_THIN);
         csDecimal.setBorderRight(CellStyle.BORDER_THIN);
         csDecimal.setBorderTop(CellStyle.BORDER_THIN);
         csDecimal.setBorderBottom(CellStyle.BORDER_THIN);
         csDecimal.setDataFormat(HSSFDataFormat.getBuiltinFormat("0.00"));

         HSSFCellStyle csDecimal1 = wb.createCellStyle();
         csDecimal1.setBorderLeft(CellStyle.BORDER_THIN);
         csDecimal1.setBorderRight(CellStyle.BORDER_THIN);
         csDecimal1.setBorderTop(CellStyle.BORDER_THIN);
         csDecimal1.setBorderBottom(CellStyle.BORDER_THIN);
         HSSFDataFormat csformat = wb.createDataFormat();
         csDecimal1.setDataFormat(csformat.getFormat("0.000"));

         List<PrintPoint> printPointList = new ArrayList<PrintPoint>();

         printExcel.setPrintPointList(printPointList);// 填写数据
         printExcel.doFillSheet(wb, 0);// 写入workbook的第一页
         printExcel.doPrint(response, tempFile, wb);// workbook输出到response中。
      }
      catch (Exception e) {
         e.printStackTrace();
      }
      return null;
   }
   
   private String cover() throws Exception {
      if (logger.isDebugEnabled()) logger.debug("Entering 'cover' method");
      try {
         ArtWorksAttachment artWorksAttachment = new ArtWorksAttachment();
         String worksId = form.getRecord().get("worksId");
         ArtWorks artWorks = artWorksService.getArtWorks(Integer.valueOf(worksId));
         String name = form.getRecord().get("name");
         if(artWorks.getThumbnail().length() != 0){
            String[] thumbnails = artWorks.getThumbnail().split(",");
            for(int i = 0; i<thumbnails.length; i++){
               if(thumbnails[i].endsWith(name)){
                  artWorksAttachment.setFileName(thumbnails[i]);
                  break;
               }
            }
         }
         String path = FILE_PATH + File.separator +"upload" + File.separator + "works" + File.separator +"thumbnail" + File.separator + form.getRecord().get("worksId");
         
      }
      catch (Exception e) {
         e.printStackTrace();
      }
      return null;
   }
   
   public List<Map<String, String>> getPartSizeList() {
      return partSizeList;
   }

   public void setPartSizeList(List<Map<String, String>> partSizeList) {
      this.partSizeList = partSizeList;
   }

   public List<Map<String, String>> getThumbnailList() {
      return thumbnailList;
   }

   public void setThumbnailList(List<Map<String, String>> thumbnailList) {
      this.thumbnailList = thumbnailList;
   }

   public List<File> getFiles() {
      return files;
   }

   public void setFiles(List<File> files) {
      this.files = files;
   }

   public String getFilesFileName() {
      return filesFileName;
   }

   public void setFilesFileName(String filesFileName) {
      this.filesFileName = filesFileName;
   }

   public String getFilesContentType() {
      return filesContentType;
   }

   public void setFilesContentType(String filesContentType) {
      this.filesContentType = filesContentType;
   }

   public File getImportFile() {
      return importFile;
   }

   public void setImportFile(File importFile) {
      this.importFile = importFile;
   }

   public String getImportFileFileName() {
      return importFileFileName;
   }

   public void setImportFileFileName(String importFileFileName) {
      this.importFileFileName = importFileFileName;
   }

   public String getImportFileContentType() {
      return importFileContentType;
   }

   public void setImportFileContentType(String importFileContentType) {
      this.importFileContentType = importFileContentType;
   }

}
