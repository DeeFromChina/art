package com.golead.art.artist;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.golead.art.artist.model.ArtArtistCoop;
import com.golead.art.artist.service.ArtArtistCoopService;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.util.ConvertUtil;
import com.golead.core.web.action.BaseAction;

public class ArtistCoopAction extends BaseAction {

	private Log log = LogFactory.getLog(ArtistCoopAction.class);
	
	@Resource
	private ArtArtistCoopService artArtistCoopService;
	
	@Override
	public String doExecute() throws Exception {
		String forward = "";
		String action = getForm().getAction();
		if (action == null) {
			forward = LIST;
		}
		try {
			if (LIST.equalsIgnoreCase(action)) forward = listCoop();
			else if (PAGE.equalsIgnoreCase(action)) forward = pageCoop();
			else if (ADD.equalsIgnoreCase(action)) forward = addCoop();
			else if (SAVE.equalsIgnoreCase(action)) forward = saveCoop();
			else if (EDIT.equalsIgnoreCase(action)) forward = editCoop();
			else if (UPDATE.equalsIgnoreCase(action)) forward = updateCoop();
			else if (DELETE.equalsIgnoreCase(action)) forward = deleteCoop();
			else if (VIEW.equalsIgnoreCase(action)) forward = viewCoop();
		} catch (Exception e) {
			e.printStackTrace();
			request.put("errMsg", e.getMessage());
			return ERROR;
		}
		return forward;
	}
	
	public String listCoop() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'listCoop()' method");
		try {
			initForm();
			return LIST;
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR;
		}
	}
	
	public String pageCoop() throws Exception {
		if (log.isDebugEnabled())
			log.debug("Entering pageCoop() method");
		try {
			initForm();
			PageQuery pq = getForm().getQuery();
			String artistId = getForm().getRecord().get("artistId");
			pq.getParameters().put("artistId", artistId);
			pq = artArtistCoopService.queryArtArtistCoop(pq);
			List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();
			for (Map<String, Object> item : pq.getRecordSet()) {
				Map<String, Object> map = new HashMap<String, Object>();
				String coopLink = "^javascript:view(" + item.get("id") + ")^_self";
				map.put("id", item.get("id"));
				map.put("data", new Object[]{
					""
					,item.get("coopName") + coopLink
					,item.get("coopDesc")
				});
				list.add(map);
			}
			String res = genGridJson(pq, list);
			setResponse(res);
		} catch (ServiceException e) {
			setResponse("{exit:1,message:\"" + e.getMessage() + "\"}");
		} catch (Exception e) {
			e.printStackTrace();
			setResponse("{exit:1,message:\"数据访问错误。\"}");
		}
		return null;
	}
	
	public String addCoop() throws Exception {
		if (log.isDebugEnabled()) 
			log.debug("Entering 'addCoop()' method");
		try {
			initForm();
			return ADD;
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR;
		}
	}
	
	public String saveCoop() throws Exception {
		if (log.isDebugEnabled())
			log.debug("Entering 'saveCoop()' method");
		try {
			ArtArtistCoop artArtistCoop = new ArtArtistCoop();
			int artistId = Integer.valueOf(getForm().getRecord().get("artistId"));
			artArtistCoop.setArtistId(artistId);
			artArtistCoop.setCoopDesc(getForm().getRecord().get("coopDesc"));
			artArtistCoop.setCoopName(getForm().getRecord().get("coopName"));
			artArtistCoopService.createArtArtistCoop(artArtistCoop);
			return returnForward(RETURN_NORMAL);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR;
		}
	}
	
	public String editCoop() throws Exception {
		if (log.isDebugEnabled())
			log.debug("Entering 'editCoop()' method");
		try {
			initForm();
			int id = Integer.valueOf(getForm().getRecord().get("id"));
			ArtArtistCoop artArtistCoop = artArtistCoopService.getArtArtistCoop(id);
			ConvertUtil.objectToMap(getForm().getRecord(), artArtistCoop);
			return EDIT;
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR;
		}
	}
	
	public String updateCoop() throws Exception {
		if (log.isDebugEnabled())
			log.debug("Entering 'updateCoop()' method");
		try {
			artArtistCoopService.updateArtArtistCoop(getForm().getRecord());
			return returnForward(RETURN_NORMAL);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR;
		}
	}
	
	public String deleteCoop() throws Exception {
		if (log.isDebugEnabled())
			log.debug("Entering 'deleteCoop()' method");
		try {
			String[] id = ids.split(",");
			Integer[] del_ids = new Integer[id.length];
			for (int i = 0; i < del_ids.length; i++) {
				del_ids[i] = Integer.valueOf(id[i]);
			}
			artArtistCoopService.deleteArtArtistCoops(del_ids);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR;
		}
		return pageCoop();
	}
	
	public String viewCoop() throws Exception {
		if (log.isDebugEnabled())
			log.debug("Entering 'viewCoop()' method");
		try {
			initForm();
			ArtArtistCoop artArtistCoop = artArtistCoopService.getArtArtistCoop(Integer.valueOf(ids));
			ConvertUtil.objectToMap(getForm().getRecord(), artArtistCoop);
			return VIEW;
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR;
		}
	}
	
	public void initForm() throws Exception {
		setCode(getForm(), "");
	}

}
