package com.golead.art.artist.service.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;

import com.golead.art.artist.dao.ArtArtistHonorsDao;
import com.golead.art.artist.model.ArtArtistHonors;
import com.golead.art.artist.service.ArtArtistHonorsService;
import javax.annotation.Resource; 
import org.springframework.stereotype.Service;

@Service
public class ArtArtistHonorsServiceImpl extends BaseServiceImpl implements ArtArtistHonorsService {
	private static final long serialVersionUID = 1L;

	public ArtArtistHonors getArtArtistHonors(Serializable id) throws ServiceException {
		try {
			return artArtistHonorsDao.get(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void createArtArtistHonors(ArtArtistHonors artArtistHonors) throws ServiceException {
		try {
			artArtistHonorsDao.save(artArtistHonors);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void updateArtArtistHonors(Map<String, String> artArtistHonorsMap) throws ServiceException {
		try {
            Integer pkId = new Integer(artArtistHonorsMap.get(ArtArtistHonors.PROP_ID));
			ArtArtistHonors tmp = artArtistHonorsDao.get(pkId);
			ConvertUtil.mapToObject(tmp, artArtistHonorsMap, true);			
			artArtistHonorsDao.update(tmp);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtArtistHonors(Serializable id) throws ServiceException {
		try {
			artArtistHonorsDao.delete(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtArtistHonorss(Serializable[] ids) throws ServiceException {
		try {
			artArtistHonorsDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtArtistWithHonorss(Serializable[] ids) throws ServiceException {
		try {
			for (Serializable id : ids) {
				artArtistHonorsDao.deleteByField("artistId", id);
			}
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	public PageQuery queryArtArtistHonors(PageQuery pageQuery) throws ServiceException {
		try {
		  createSqlFilter(pageQuery);
          return jdbcDao.queryBySqlId("artArtistHonorsList", pageQuery);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private void createSqlFilter(PageQuery page) {
		String artistId = page.getParameters().get("artistId");
		String paras = "";
		paras = " aah.artist_id = " + artistId + " ";
		if (paras.length() > 0) {
			page.getParameters().put("paras", paras);
		}
	}
	
    @Resource
	private ArtArtistHonorsDao	artArtistHonorsDao;

	public void setArtArtistHonorsDao(ArtArtistHonorsDao artArtistHonorsDao) {
		this.artArtistHonorsDao = artArtistHonorsDao;
	}
}

