package com.golead.art.auction.service.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import com.golead.core.dao.model.PageQuery;
import com.golead.core.exception.ServiceException;
import com.golead.core.exception.DAOException;
import com.golead.core.service.impl.BaseServiceImpl;
import com.golead.core.util.ConvertUtil;

import com.golead.art.auction.dao.ArtAuctionTempVideoDao;
import com.golead.art.auction.model.ArtAuctionTempVideo;
import com.golead.art.auction.service.ArtAuctionTempVideoService;
import javax.annotation.Resource; 
import org.springframework.stereotype.Service;

@Service
public class ArtAuctionTempVideoServiceImpl extends BaseServiceImpl implements ArtAuctionTempVideoService {
	private static final long serialVersionUID = 1L;

	public ArtAuctionTempVideo getArtAuctionTempVideo(Serializable id) throws ServiceException {
		try {
			return artAuctionTempVideoDao.get(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void createArtAuctionTempVideo(ArtAuctionTempVideo artAuctionTempVideo) throws ServiceException {
		try {
			artAuctionTempVideoDao.save(artAuctionTempVideo);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void updateArtAuctionTempVideo(Map<String, String> artAuctionTempVideoMap) throws ServiceException {
		try {
            Integer pkId = new Integer(artAuctionTempVideoMap.get(ArtAuctionTempVideo.PROP_ID));
			ArtAuctionTempVideo tmp = artAuctionTempVideoDao.get(pkId);
			ConvertUtil.mapToObject(tmp, artAuctionTempVideoMap, true);			
			artAuctionTempVideoDao.update(tmp);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtAuctionTempVideo(Serializable id) throws ServiceException {
		try {
			artAuctionTempVideoDao.delete(id);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public void deleteArtAuctionTempVideos(Serializable[] ids) throws ServiceException {
		try {
			artAuctionTempVideoDao.deleteAll(ids);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}

	public PageQuery queryArtAuctionTempVideo(PageQuery pageQuery) throws ServiceException {
		try {
		  createSqlFilter(pageQuery);
          return jdbcDao.queryBySqlId("artAuctionTempVideoList", pageQuery);
        } catch (DAOException e) {
          e.printStackTrace();
          throw new ServiceException("数据库操作错误。");
        } catch (ServiceException se) {
          se.printStackTrace();
          throw se;
        } catch (Exception e) {
          e.printStackTrace();
          throw new ServiceException("系统错误。");
        }
	}
	
	private void createSqlFilter(PageQuery page) {
	}
	
    @Resource
	private ArtAuctionTempVideoDao	artAuctionTempVideoDao;

	public void setArtAuctionTempVideoDao(ArtAuctionTempVideoDao artAuctionTempVideoDao) {
		this.artAuctionTempVideoDao = artAuctionTempVideoDao;
	}
}

